
/home/os/workspace/LukeyOS/start/build/source/kernel/kernel.elf:     file format elf32-i386
/home/os/workspace/LukeyOS/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000035a8 memsz 0x000035a8 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006de0 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001ade0 align 2**12
         filesz 0x0000003c memsz 0x0000003c flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dca  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000007dc  00012dcc  00012dcc  00003dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005de0  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   0000003c  80000000  0001ade0  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000023a3  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00004507  00000000  00000000  000083df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000013e3  00000000  00000000  0000c8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001e0  00000000  00000000  0000dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    000011b9  00000000  00000000  0000deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  0000f069  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00001268  00000000  00000000  0000f094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012dcc l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102a8 l     F .text	00000017 up2
000102bf l     F .text	0000000d down2
000102cc l     F .text	0000000c write_cr3
000102d8 l     F .text	00000014 pde_index
000102ec l     F .text	00000027 pde_paddr
00010313 l     F .text	00000010 pte_index
00010323 l     F .text	00000011 mmu_set_page_dir
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010334 l     F .text	0000005c addr_alloc_init
00010390 l     F .text	0000006b addr_alloc_page
000103fb l     F .text	00000066 addr_free_page
00010461 l     F .text	0000006a show_mem_info
000104cb l     F .text	00000040 total_mem_size
00012f0c l     O .rodata	00000012 __func__.1961
00014000 l     O .data	00000040 kernel_map.1973
00012f20 l     O .rodata	0000000c __func__.2021
00000000 l    df *ABS*	00000000 task.c
0001099a l     F .text	0000001b list_node_init
000109b5 l     F .text	0000000b list_node_next
000109c0 l     F .text	0000000b list_count
000109cb l     F .text	0000000a list_first
000109d5 l     F .text	0000000c write_cr3
000109e1 l     F .text	00000007 hlt
000109e8 l     F .text	0000000c write_tr
000109f4 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000198 task_manager
000171a0 l     O .bss	00001000 idle_task_stack
00010a05 l     F .text	00000151 tss_init
00010d44 l     F .text	0000000e idle_task_entry
00012fbc l     O .rodata	00000010 __func__.2046
00010ef0 l     F .text	00000047 task_next_run
00000000 l    df *ABS*	00000000 cpu.c
00011161 l     F .text	00000028 lgdt
00011189 l     F .text	0000001a far_jump
000181a0 l     O .bss	00000800 gdt_table
000189a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
0001138a l     F .text	00000007 cli
00011391 l     F .text	00000007 sti
00011398 l     F .text	0000001d inb
000113b5 l     F .text	00000021 outb
000113d6 l     F .text	00000028 lidt
000113fe l     F .text	00000011 read_cr2
0001140f l     F .text	00000007 hlt
00011416 l     F .text	00000010 read_eflags
00011426 l     F .text	0000000b write_eflags
000189c0 l     O .bss	00000400 idt_table
00011431 l     F .text	00000103 dump_core_regs
0001157f l     F .text	00000034 do_default_handler
00011984 l     F .text	00000097 init_pic
00000000 l    df *ABS*	00000000 time.c
00011da0 l     F .text	00000021 outb
00018dc0 l     O .bss	00000004 sys_tick
00011ded l     F .text	00000064 init_pit
00000000 l    df *ABS*	00000000 init.c
00018dc4 l     O .bss	00000004 init_boot_info
00013538 l     O .rodata	00000013 __func__.1974
00000000 l    df *ABS*	00000000 mutex.c
00011f68 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000120fe l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000124af l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1724
00000000 l    df *ABS*	00000000 list.c
00012a25 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012c31 l     F .text	0000001d inb
00012c4e l     F .text	00000021 outb
00018dc8 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
0001239a g     F .text	0000003d bitmap_get_bit
00012636 g     F .text	00000053 kernel_memcpy
00010e7d g     F .text	0000000e task_current
00011d60 g     F .text	0000000f irq_enable_global
00012ac4 g     F .text	00000068 list_insert_last
00011713 g     F .text	00000020 do_handler_segment_not_present
00010e16 g     F .text	0000003a task_set_ready
000123d7 g     F .text	0000001f bitmap_is_set
00012689 g     F .text	00000045 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00011368 g     F .text	00000022 cpu_init
00012c6f g     F .text	00000079 log_init
00011f0e g     F .text	0000005a init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00011314 g     F .text	0000003d gdt_free_sel
000124b6 g     F .text	0000004b kernel_strcpy
00014000 g       .data	00000000 s_data
00011c37 g     F .text	0000008f irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00011653 g     F .text	00000020 do_handler_overflow
00011904 g     F .text	00000020 do_handler_alignment_check
000105bf g     F .text	000000a4 memory_create_map
000101b6 g       .text	00000000 exception_handler_general_protection
00011753 g     F .text	000000b9 do_handler_general_protection
00012225 g     F .text	0000002d sem_count
80000010 g     F .first_task	0000002c first_task_main
000115d3 g     F .text	00000020 do_handler_divider
000122c3 g     F .text	000000d7 bitmap_set_bit
000116d3 g     F .text	00000020 do_handler_double_fault
0001180c g     F .text	000000d8 do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00011a1b g     F .text	0000002f pic_send_eoi
00010d36 g     F .text	0000000e task_first_task
00010000 g       .text	00000000 s_text
00010703 g     F .text	00000089 memory_create_uvm
00012130 g     F .text	0000006f sem_wait
00010879 g     F .text	00000026 memory_alloc_page_for
00011dc1 g     F .text	0000002c do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011964 g     F .text	00000020 do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
00018de0 g     O .bss	00002000 stack
000110f3 g     F .text	0000006e sys_sleep
0001ade0 g       *ABS*	00000000 s_first_task
0001078c g     F .text	000000ed memory_alloc_for_page_dir
000100e5 g       .text	00000000 exception_handler_bound_range
0001219f g     F .text	00000086 sem_notify
00011693 g     F .text	00000020 do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
000118e4 g     F .text	00000020 do_handler_fpu_error
00010d52 g     F .text	000000c4 task_first_init
00011924 g     F .text	00000020 do_handler_machine_check
000115f3 g     F .text	00000020 do_handler_Debug
00012a61 g     F .text	00000063 list_insert_first
000110cf g     F .text	00000024 task_set_wakeup
00011613 g     F .text	00000020 do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00012501 g     F .text	00000074 kernel_strncpy
00011d51 g     F .text	0000000f irq_disable_global
00010e8b g     F .text	00000065 sys_sched_yield
0001ae1c g       *ABS*	00000000 mem_free_start
00011e6d g     F .text	0000003c kernel_init
00012109 g     F .text	00000027 sem_init
00010000 g       .text	00000000 _start
00012730 g     F .text	00000150 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001ade0 g       .bss	00000000 e_data
00011fa5 g     F .text	00000098 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
000116f3 g     F .text	00000020 do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001ae1c g       *ABS*	00000000 e_first_task
0001108a g     F .text	00000045 task_set_sleep
000129eb g     F .text	0000003a panic
00010289 g       .text	00000000 exception_handler_timer
00011bfc g     F .text	0000003b irq_install
0001122a g     F .text	00000071 init_gdt
00011d6f g     F .text	0000001c irq_enter_protection
00011f73 g     F .text	00000032 mutex_init
00011cc6 g     F .text	0000008b irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00012252 g     F .text	0000001a bitmap_byte_count
000116b3 g     F .text	00000020 do_handler_device_unavailable
00010f37 g     F .text	0000004d task_dispatch
00011ea9 g     F .text	00000065 move_to_first_task
00011351 g     F .text	00000017 switch_to_tss
000126ce g     F .text	00000062 kernel_memcmp
00010663 g     F .text	000000a0 create_kernel_table
00012a38 g     F .text	00000029 list_init
00011944 g     F .text	00000020 do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
00010e50 g     F .text	0000002d task_set_block
000115b3 g     F .text	00000020 do_handler_unknown
000101f0 g       .text	00000000 exception_handler_fpu_error
00010b56 g     F .text	00000023 task_switch_from_to
00011a4a g     F .text	000001b2 irq_init
0001203d g     F .text	000000c1 mutex_unlock
00011d8b g     F .text	00000015 irq_leave_protection
00012575 g     F .text	0000003f kernel_strlen
000111a3 g     F .text	00000087 segment_desc_set
00011673 g     F .text	00000020 do_handler_bound_range
00012b2c g     F .text	0000007c list_remove_first
000135a8 g       .rodata	00000000 e_text
000125b4 g     F .text	00000082 kernel_strncmp
0001226c g     F .text	00000057 bitmap_init
0001017c g       .text	00000000 exception_handler_segment_not_present
00010088 g       .text	00000000 exception_handler_NMI
000123f6 g     F .text	000000b9 bitmap_alloc_nbits
00010c82 g     F .text	000000b4 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
00010f84 g     F .text	00000106 task_time_tick
0001089f g     F .text	000000fb memory_init
00011733 g     F .text	00000020 do_handler_stack_segment_fault
00011633 g     F .text	00000020 do_handler_breakpoint
00012ce8 g     F .text	000000e2 log_printf
00010b79 g     F .text	00000109 task_init
000129c3 g     F .text	00000028 kernel_sprintf
0001129b g     F .text	00000079 gdt_alloc_desc
00012880 g     F .text	00000143 kernel_itoa
00012ba8 g     F .text	00000089 list_remove
00011534 g     F .text	0000004b gate_desc_set
0001050b g     F .text	000000b4 find_pte
00011e51 g     F .text	0000001c time_init



Disassembly of section .text:

00010000 <_start>:
	.extern kernel_init
	
	# void start(boot_info_f *boot_info)
_start:
	// 取出 boot_info 参数
	push %ebp
   10000:	55                   	push   %ebp
	mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
	mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
	# 等价于 mov 4(%exp), %eax

	// 传给 kernel_init
	# kernel_init(boot_info)
	push %eax
   10006:	50                   	push   %eax
	call kernel_init
   10007:	e8 61 1e 00 00       	call   11e6d <kernel_init>

    // 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc e0 ad 01 00       	mov    $0x1ade0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10026:	e9 e3 1e 00 00       	jmp    11f0e <init_main>

0001002b <exception_handler_unknown>:
		// 跳过压入的异常号和错误码
		add $(2*4), %esp
		iret
.endm
// 未知异常
exception_handler unknown, -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 77 15 00 00       	call   115b3 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
// 除零异常
exception_handler divider, 0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 78 15 00 00       	call   115d3 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 79 15 00 00       	call   115f3 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 7a 15 00 00       	call   11613 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 7b 15 00 00       	call   11633 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 7c 15 00 00       	call   11653 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 7d 15 00 00       	call   11673 <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 7e 15 00 00       	call   11693 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 7f 15 00 00       	call   116b3 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 82 15 00 00       	call   116d3 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 85 15 00 00       	call   116f3 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 88 15 00 00       	call   11713 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 8b 15 00 00       	call   11733 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 8e 15 00 00       	call   11753 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 2a 16 00 00       	call   1180c <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 e3 16 00 00       	call   118e4 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 e6 16 00 00       	call   11904 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 e7 16 00 00       	call   11924 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 e8 16 00 00       	call   11944 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 e9 16 00 00       	call   11964 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_timer>:
// 硬件中断
exception_handler timer, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 27 1b 00 00       	call   11dc1 <do_handler_timer>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <up2>:
/**
 * 例如，如果 size 是 1000，bound 是 256，那么对 size 进行向上对齐后，
 * 它的值将变为 1280，即最接近 1000 且是 256 的倍数的数。
*/
// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102a8:	55                   	push   %ebp
   102a9:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102ab:	8b 55 08             	mov    0x8(%ebp),%edx
   102ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b1:	01 d0                	add    %edx,%eax
   102b3:	8d 50 ff             	lea    -0x1(%eax),%edx
   102b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102b9:	f7 d8                	neg    %eax
   102bb:	21 d0                	and    %edx,%eax
}
   102bd:	5d                   	pop    %ebp
   102be:	c3                   	ret    

000102bf <down2>:
/**
 * 例如，如果 size 是 1000，bound 是 256，那么对 size 进行向下对齐后，
 * 它的值将变为 768，即最接近 1000 且是 256 的倍数的数。
*/
// 向下对齐到页边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102bf:	55                   	push   %ebp
   102c0:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c5:	f7 d8                	neg    %eax
   102c7:	23 45 08             	and    0x8(%ebp),%eax
}
   102ca:	5d                   	pop    %ebp
   102cb:	c3                   	ret    

000102cc <write_cr3>:
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

// 写入 CR3 指令,CR3 在项目中用于存储页目录表的物理地址。
static inline void write_cr3(uint32_t v) {
   102cc:	55                   	push   %ebp
   102cd:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   102cf:	8b 45 08             	mov    0x8(%ebp),%eax
   102d2:	0f 22 d8             	mov    %eax,%cr3
}
   102d5:	90                   	nop
   102d6:	5d                   	pop    %ebp
   102d7:	c3                   	ret    

000102d8 <pde_index>:

/**
 * @brief 返获取页目录项的索引：将虚拟地址的高 10 位作为页目录项的索引。
 */
static inline uint32_t pde_index(uint32_t vaddr)
{
   102d8:	55                   	push   %ebp
   102d9:	89 e5                	mov    %esp,%ebp
   102db:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   102de:	8b 45 08             	mov    0x8(%ebp),%eax
   102e1:	c1 e8 16             	shr    $0x16,%eax
   102e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   102e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   102ea:	c9                   	leave  
   102eb:	c3                   	ret    

000102ec <pde_paddr>:

/**
 * @brief 获取页目录项中的物理地址
 */
static inline uint32_t pde_paddr(pde_t *pde)
{
   102ec:	55                   	push   %ebp
   102ed:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   102ef:	8b 45 08             	mov    0x8(%ebp),%eax
   102f2:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   102f6:	c0 ea 04             	shr    $0x4,%dl
   102f9:	0f b6 d2             	movzbl %dl,%edx
   102fc:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10300:	c1 e1 04             	shl    $0x4,%ecx
   10303:	09 ca                	or     %ecx,%edx
   10305:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10309:	c1 e0 0c             	shl    $0xc,%eax
   1030c:	09 d0                	or     %edx,%eax
   1030e:	c1 e0 0c             	shl    $0xc,%eax
}
   10311:	5d                   	pop    %ebp
   10312:	c3                   	ret    

00010313 <pte_index>:

/**
 * @brief 获取页表项的索引：将虚拟地址的中间 10 位作为页表项的索引。
 */
static inline int pte_index(uint32_t vaddr)
{
   10313:	55                   	push   %ebp
   10314:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF; // 取中间10位
   10316:	8b 45 08             	mov    0x8(%ebp),%eax
   10319:	c1 e8 0c             	shr    $0xc,%eax
   1031c:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10321:	5d                   	pop    %ebp
   10322:	c3                   	ret    

00010323 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的物理地址
 * @param paddr 页目录表的物理地址
 */
static inline void mmu_set_page_dir(uint32_t paddr)
{
   10323:	55                   	push   %ebp
   10324:	89 e5                	mov    %esp,%ebp
    // 将该物理地址写入控制寄存器CR3中，从而更新页目录表的物理地址
    write_cr3(paddr);
   10326:	ff 75 08             	pushl  0x8(%ebp)
   10329:	e8 9e ff ff ff       	call   102cc <write_cr3>
   1032e:	83 c4 04             	add    $0x4,%esp
}
   10331:	90                   	nop
   10332:	c9                   	leave  
   10333:	c3                   	ret    

00010334 <addr_alloc_init>:
 * @param {uint32_t} start          所管理内存的起始地址
 * @param {uint32_t} size           所管理内存的大小
 * @param {uint32_t} page_size      所管理内存的每一页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start, uint32_t size, uint32_t page_size)
{
   10334:	f3 0f 1e fb          	endbr32 
   10338:	55                   	push   %ebp
   10339:	89 e5                	mov    %esp,%ebp
   1033b:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   1033e:	8b 45 08             	mov    0x8(%ebp),%eax
   10341:	83 ec 0c             	sub    $0xc,%esp
   10344:	50                   	push   %eax
   10345:	e8 29 1c 00 00       	call   11f73 <mutex_init>
   1034a:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1034d:	8b 45 08             	mov    0x8(%ebp),%eax
   10350:	8b 55 10             	mov    0x10(%ebp),%edx
   10353:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10356:	8b 45 08             	mov    0x8(%ebp),%eax
   10359:	8b 55 14             	mov    0x14(%ebp),%edx
   1035c:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1035f:	8b 45 08             	mov    0x8(%ebp),%eax
   10362:	8b 55 18             	mov    0x18(%ebp),%edx
   10365:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10368:	8b 45 08             	mov    0x8(%ebp),%eax
   1036b:	8b 40 24             	mov    0x24(%eax),%eax
   1036e:	ba 00 00 00 00       	mov    $0x0,%edx
   10373:	f7 75 18             	divl   0x18(%ebp)
   10376:	89 c2                	mov    %eax,%edx
   10378:	8b 45 08             	mov    0x8(%ebp),%eax
   1037b:	83 c0 14             	add    $0x14,%eax
   1037e:	6a 00                	push   $0x0
   10380:	52                   	push   %edx
   10381:	ff 75 0c             	pushl  0xc(%ebp)
   10384:	50                   	push   %eax
   10385:	e8 e2 1e 00 00       	call   1226c <bitmap_init>
   1038a:	83 c4 10             	add    $0x10,%esp
}
   1038d:	90                   	nop
   1038e:	c9                   	leave  
   1038f:	c3                   	ret    

00010390 <addr_alloc_page>:
 * @return {*}  返回分配好内存的基地址
 * @param {addr_alloc_t *} alloc    地址分配器的结构
 * @param {int} page_count          分配的页数
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   10390:	f3 0f 1e fb          	endbr32 
   10394:	55                   	push   %ebp
   10395:	89 e5                	mov    %esp,%ebp
   10397:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   1039a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	83 ec 0c             	sub    $0xc,%esp
   103a7:	50                   	push   %eax
   103a8:	e8 f8 1b 00 00       	call   11fa5 <mutex_lock>
   103ad:	83 c4 10             	add    $0x10,%esp
    // 连续分配若干指定比特位，返回起始索引 page_index 一页就是一个bit位
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	83 c0 14             	add    $0x14,%eax
   103b6:	83 ec 04             	sub    $0x4,%esp
   103b9:	ff 75 0c             	pushl  0xc(%ebp)
   103bc:	6a 00                	push   $0x0
   103be:	50                   	push   %eax
   103bf:	e8 32 20 00 00       	call   123f6 <bitmap_alloc_nbits>
   103c4:	83 c4 10             	add    $0x10,%esp
   103c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   103ca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103ce:	78 17                	js     103e7 <addr_alloc_page+0x57>
    {
        // 例如，如果起始地址S是0x1000，页大小P是0x1000，分配的页索引i是2，则分配的起始地址为：addr = 0x1000 + 2 * 0x1000 = 0x3000
        addr = alloc->start + page_index * alloc->page_size;
   103d0:	8b 45 08             	mov    0x8(%ebp),%eax
   103d3:	8b 50 20             	mov    0x20(%eax),%edx
   103d6:	8b 45 08             	mov    0x8(%ebp),%eax
   103d9:	8b 48 1c             	mov    0x1c(%eax),%ecx
   103dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103df:	0f af c1             	imul   %ecx,%eax
   103e2:	01 d0                	add    %edx,%eax
   103e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   103e7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ea:	83 ec 0c             	sub    $0xc,%esp
   103ed:	50                   	push   %eax
   103ee:	e8 4a 1c 00 00       	call   1203d <mutex_unlock>
   103f3:	83 c4 10             	add    $0x10,%esp
    return addr;
   103f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   103f9:	c9                   	leave  
   103fa:	c3                   	ret    

000103fb <addr_free_page>:
 * @param {addr_alloc_t *} alloc    地址分配器的结构
 * @param {uint32_t} addr   即将释放的内存块的基地址
 * @param {int} page_count  释放的页数
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   103fb:	f3 0f 1e fb          	endbr32 
   103ff:	55                   	push   %ebp
   10400:	89 e5                	mov    %esp,%ebp
   10402:	53                   	push   %ebx
   10403:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   10406:	8b 45 08             	mov    0x8(%ebp),%eax
   10409:	83 ec 0c             	sub    $0xc,%esp
   1040c:	50                   	push   %eax
   1040d:	e8 93 1b 00 00       	call   11fa5 <mutex_lock>
   10412:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   10415:	8b 45 08             	mov    0x8(%ebp),%eax
   10418:	8b 40 20             	mov    0x20(%eax),%eax
   1041b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1041e:	89 d1                	mov    %edx,%ecx
   10420:	29 c1                	sub    %eax,%ecx
   10422:	8b 45 08             	mov    0x8(%ebp),%eax
   10425:	8b 58 1c             	mov    0x1c(%eax),%ebx
   10428:	89 c8                	mov    %ecx,%eax
   1042a:	ba 00 00 00 00       	mov    $0x0,%edx
   1042f:	f7 f3                	div    %ebx
   10431:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   10434:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10437:	8b 55 08             	mov    0x8(%ebp),%edx
   1043a:	83 c2 14             	add    $0x14,%edx
   1043d:	6a 00                	push   $0x0
   1043f:	ff 75 10             	pushl  0x10(%ebp)
   10442:	50                   	push   %eax
   10443:	52                   	push   %edx
   10444:	e8 7a 1e 00 00       	call   122c3 <bitmap_set_bit>
   10449:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   1044c:	8b 45 08             	mov    0x8(%ebp),%eax
   1044f:	83 ec 0c             	sub    $0xc,%esp
   10452:	50                   	push   %eax
   10453:	e8 e5 1b 00 00       	call   1203d <mutex_unlock>
   10458:	83 c4 10             	add    $0x10,%esp
}
   1045b:	90                   	nop
   1045c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1045f:	c9                   	leave  
   10460:	c3                   	ret    

00010461 <show_mem_info>:
 * @description: 将系统可用的物理内存区域信息输出到终端，方便用户查看和分析系统内存使用情况。
 * @return {*}
 * @param {boot_info_t} *boot_info 描述每一块可用内存的信息
 */
static void show_mem_info(boot_info_t *boot_info)
{
   10461:	f3 0f 1e fb          	endbr32 
   10465:	55                   	push   %ebp
   10466:	89 e5                	mov    %esp,%ebp
   10468:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1046b:	83 ec 0c             	sub    $0xc,%esp
   1046e:	68 cc 2d 01 00       	push   $0x12dcc
   10473:	e8 70 28 00 00       	call   12ce8 <log_printf>
   10478:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1047b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10482:	eb 29                	jmp    104ad <show_mem_info+0x4c>
    {
        log_printf("[%d]: 0x%x - 0x%x", i,
   10484:	8b 45 08             	mov    0x8(%ebp),%eax
   10487:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1048a:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1048e:	8b 45 08             	mov    0x8(%ebp),%eax
   10491:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10494:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10497:	52                   	push   %edx
   10498:	50                   	push   %eax
   10499:	ff 75 f4             	pushl  -0xc(%ebp)
   1049c:	68 d8 2d 01 00       	push   $0x12dd8
   104a1:	e8 42 28 00 00       	call   12ce8 <log_printf>
   104a6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   104a9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104ad:	8b 45 08             	mov    0x8(%ebp),%eax
   104b0:	8b 40 50             	mov    0x50(%eax),%eax
   104b3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104b6:	7c cc                	jl     10484 <show_mem_info+0x23>
                   boot_info->ram_region_cfg[i].start,
                   boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   104b8:	83 ec 0c             	sub    $0xc,%esp
   104bb:	68 ea 2d 01 00       	push   $0x12dea
   104c0:	e8 23 28 00 00       	call   12ce8 <log_printf>
   104c5:	83 c4 10             	add    $0x10,%esp
}
   104c8:	90                   	nop
   104c9:	c9                   	leave  
   104ca:	c3                   	ret    

000104cb <total_mem_size>:

/**
 * @brief 获取可用的总的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   104cb:	f3 0f 1e fb          	endbr32 
   104cf:	55                   	push   %ebp
   104d0:	89 e5                	mov    %esp,%ebp
   104d2:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   104d5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++)
   104dc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   104e3:	eb 16                	jmp    104fb <total_mem_size+0x30>
    {
        mem_size += boot_info->ram_region_cfg[i].size;
   104e5:	8b 45 08             	mov    0x8(%ebp),%eax
   104e8:	8b 55 f8             	mov    -0x8(%ebp),%edx
   104eb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104f2:	01 d0                	add    %edx,%eax
   104f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   104f7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   104fb:	8b 45 08             	mov    0x8(%ebp),%eax
   104fe:	8b 40 50             	mov    0x50(%eax),%eax
   10501:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10504:	7c df                	jl     104e5 <total_mem_size+0x1a>
    }
    return mem_size;
   10506:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10509:	c9                   	leave  
   1050a:	c3                   	ret    

0001050b <find_pte>:
 * @param {pde_t *} page_dir    指向页面目录的指针
 * @param {uint32_t} vaddr      需要查找的虚拟地址；
 * @param {int} alloc           指示是否需要在必要时分配新的页表
 */
pte_t *find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   1050b:	f3 0f 1e fb          	endbr32 
   1050f:	55                   	push   %ebp
   10510:	89 e5                	mov    %esp,%ebp
   10512:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table;
    // 获取页目录项的索引：将虚拟地址的高 10 位作为页目录项的索引。
    pde_t *pde = page_dir + pde_index(vaddr);
   10515:	ff 75 0c             	pushl  0xc(%ebp)
   10518:	e8 bb fd ff ff       	call   102d8 <pde_index>
   1051d:	83 c4 04             	add    $0x4,%esp
   10520:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10527:	8b 45 08             	mov    0x8(%ebp),%eax
   1052a:	01 d0                	add    %edx,%eax
   1052c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   1052f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10532:	0f b6 00             	movzbl (%eax),%eax
   10535:	83 e0 01             	and    $0x1,%eax
   10538:	84 c0                	test   %al,%al
   1053a:	74 10                	je     1054c <find_pte+0x41>
    {
        // 获取页目录项中存储的页表物理地址
        page_table = (pte_t *)pde_paddr(pde);
   1053c:	ff 75 f0             	pushl  -0x10(%ebp)
   1053f:	e8 a8 fd ff ff       	call   102ec <pde_paddr>
   10544:	83 c4 04             	add    $0x4,%esp
   10547:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1054a:	eb 57                	jmp    105a3 <find_pte+0x98>
    }
    else
    {
        // 如果不存在，则考虑分配一个
        if (alloc == 0)
   1054c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10550:	75 07                	jne    10559 <find_pte+0x4e>
        {
            return (pte_t *)0;
   10552:	b8 00 00 00 00       	mov    $0x0,%eax
   10557:	eb 64                	jmp    105bd <find_pte+0xb2>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10559:	83 ec 08             	sub    $0x8,%esp
   1055c:	6a 01                	push   $0x1
   1055e:	68 00 50 01 00       	push   $0x15000
   10563:	e8 28 fe ff ff       	call   10390 <addr_alloc_page>
   10568:	83 c4 10             	add    $0x10,%esp
   1056b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0)
   1056e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10572:	75 07                	jne    1057b <find_pte+0x70>
        {
            return (pte_t *)0;
   10574:	b8 00 00 00 00       	mov    $0x0,%eax
   10579:	eb 42                	jmp    105bd <find_pte+0xb2>
        }

        // pde建立pte之间的关系
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U; // 设置为用户可读写，将被pte中设置所覆盖
   1057b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1057e:	83 c8 07             	or     $0x7,%eax
   10581:	89 c2                	mov    %eax,%edx
   10583:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10586:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        // kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   10588:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1058b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1058e:	83 ec 04             	sub    $0x4,%esp
   10591:	68 00 10 00 00       	push   $0x1000
   10596:	6a 00                	push   $0x0
   10598:	ff 75 f4             	pushl  -0xc(%ebp)
   1059b:	e8 e9 20 00 00       	call   12689 <kernel_memset>
   105a0:	83 c4 10             	add    $0x10,%esp
    }
    // 取出pte表项
    return page_table + pte_index(vaddr);
   105a3:	83 ec 0c             	sub    $0xc,%esp
   105a6:	ff 75 0c             	pushl  0xc(%ebp)
   105a9:	e8 65 fd ff ff       	call   10313 <pte_index>
   105ae:	83 c4 10             	add    $0x10,%esp
   105b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105bb:	01 d0                	add    %edx,%eax
}
   105bd:	c9                   	leave  
   105be:	c3                   	ret    

000105bf <memory_create_map>:
 * @param {uint32_t} paddr      物理地址的起始地址
 * @param {int} count           要映射的物理页的数量
 * @param {uint32_t} perm       要设置的页面权限
 */
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   105bf:	f3 0f 1e fb          	endbr32 
   105c3:	55                   	push   %ebp
   105c4:	89 e5                	mov    %esp,%ebp
   105c6:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++)
   105c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105d0:	eb 7e                	jmp    10650 <memory_create_map+0x91>
    {
        // log_printf("create map: vaddr-0x%x paddr-0x%x, perm: 0x%x", vaddr, paddr, perm);
        // 查找与给定虚拟地址 vaddr 对应的页表条目（PTE）
        pte_t *pte = find_pte(page_dir, vaddr, 1);
   105d2:	83 ec 04             	sub    $0x4,%esp
   105d5:	6a 01                	push   $0x1
   105d7:	ff 75 0c             	pushl  0xc(%ebp)
   105da:	ff 75 08             	pushl  0x8(%ebp)
   105dd:	e8 29 ff ff ff       	call   1050b <find_pte>
   105e2:	83 c4 10             	add    $0x10,%esp
   105e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   105e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105ec:	75 17                	jne    10605 <memory_create_map+0x46>
        {
            log_printf("create pte failed. pte == 0");
   105ee:	83 ec 0c             	sub    $0xc,%esp
   105f1:	68 ec 2d 01 00       	push   $0x12dec
   105f6:	e8 ed 26 00 00       	call   12ce8 <log_printf>
   105fb:	83 c4 10             	add    $0x10,%esp
            return -1;
   105fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10603:	eb 5c                	jmp    10661 <memory_create_map+0xa2>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   10605:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10608:	0f b6 00             	movzbl (%eax),%eax
   1060b:	83 e0 01             	and    $0x1,%eax
   1060e:	84 c0                	test   %al,%al
   10610:	74 1c                	je     1062e <memory_create_map+0x6f>
   10612:	68 08 2e 01 00       	push   $0x12e08
   10617:	68 0c 2f 01 00       	push   $0x12f0c
   1061c:	68 b2 00 00 00       	push   $0xb2
   10621:	68 1c 2e 01 00       	push   $0x12e1c
   10626:	e8 c0 23 00 00       	call   129eb <panic>
   1062b:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   1062e:	8b 45 10             	mov    0x10(%ebp),%eax
   10631:	0b 45 18             	or     0x18(%ebp),%eax
   10634:	83 c8 01             	or     $0x1,%eax
   10637:	89 c2                	mov    %eax,%edx
   10639:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1063c:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   1063e:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   10645:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++)
   1064c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10650:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10653:	3b 45 14             	cmp    0x14(%ebp),%eax
   10656:	0f 8c 76 ff ff ff    	jl     105d2 <memory_create_map+0x13>
    }

    return 0;
   1065c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10661:	c9                   	leave  
   10662:	c3                   	ret    

00010663 <create_kernel_table>:

/**
 * @brief 创建内核的地址映射表
 */
void create_kernel_table(void)
{
   10663:	f3 0f 1e fb          	endbr32 
   10667:	55                   	push   %ebp
   10668:	89 e5                	mov    %esp,%ebp
   1066a:	83 ec 28             	sub    $0x28,%esp
        // 扩展存储空间一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END,     (void *)MEM_EXT_START, PTE_W},
    };

    // 计算出每个内存区域需要映射的页数和每个页的虚拟地址和物理地址之间的映射关系。
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   1066d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10674:	eb 7d                	jmp    106f3 <create_kernel_table+0x90>
    {
        memory_map_t *map = kernel_map + i;
   10676:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10679:	c1 e0 04             	shl    $0x4,%eax
   1067c:	05 00 40 01 00       	add    $0x14000,%eax
   10681:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10684:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10687:	8b 00                	mov    (%eax),%eax
   10689:	68 00 10 00 00       	push   $0x1000
   1068e:	50                   	push   %eax
   1068f:	e8 2b fc ff ff       	call   102bf <down2>
   10694:	83 c4 08             	add    $0x8,%esp
   10697:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   1069a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1069d:	8b 40 04             	mov    0x4(%eax),%eax
   106a0:	68 00 10 00 00       	push   $0x1000
   106a5:	50                   	push   %eax
   106a6:	e8 fd fb ff ff       	call   102a8 <up2>
   106ab:	83 c4 08             	add    $0x8,%esp
   106ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   106b4:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106b7:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   106bd:	85 c0                	test   %eax,%eax
   106bf:	0f 48 c2             	cmovs  %edx,%eax
   106c2:	c1 f8 0c             	sar    $0xc,%eax
   106c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // log_printf("%dth area :  vstart:%d, vend:%d, page_count:%d", i, vstart, vend, page_count);
        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   106c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106cb:	8b 50 0c             	mov    0xc(%eax),%edx
   106ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d1:	8b 40 08             	mov    0x8(%eax),%eax
   106d4:	89 c1                	mov    %eax,%ecx
   106d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   106d9:	83 ec 0c             	sub    $0xc,%esp
   106dc:	52                   	push   %edx
   106dd:	ff 75 e4             	pushl  -0x1c(%ebp)
   106e0:	51                   	push   %ecx
   106e1:	50                   	push   %eax
   106e2:	68 00 60 01 00       	push   $0x16000
   106e7:	e8 d3 fe ff ff       	call   105bf <memory_create_map>
   106ec:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   106ef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106f6:	83 f8 03             	cmp    $0x3,%eax
   106f9:	0f 86 77 ff ff ff    	jbe    10676 <create_kernel_table+0x13>
    }
}
   106ff:	90                   	nop
   10700:	90                   	nop
   10701:	c9                   	leave  
   10702:	c3                   	ret    

00010703 <memory_create_uvm>:
/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm(void)
{
   10703:	f3 0f 1e fb          	endbr32 
   10707:	55                   	push   %ebp
   10708:	89 e5                	mov    %esp,%ebp
   1070a:	83 ec 18             	sub    $0x18,%esp
    pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   1070d:	83 ec 08             	sub    $0x8,%esp
   10710:	6a 01                	push   $0x1
   10712:	68 00 50 01 00       	push   $0x15000
   10717:	e8 74 fc ff ff       	call   10390 <addr_alloc_page>
   1071c:	83 c4 10             	add    $0x10,%esp
   1071f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0)
   10722:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10726:	75 07                	jne    1072f <memory_create_uvm+0x2c>
    {
        return 0;
   10728:	b8 00 00 00 00       	mov    $0x0,%eax
   1072d:	eb 5b                	jmp    1078a <memory_create_uvm+0x87>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   1072f:	83 ec 04             	sub    $0x4,%esp
   10732:	68 00 10 00 00       	push   $0x1000
   10737:	6a 00                	push   $0x0
   10739:	ff 75 f0             	pushl  -0x10(%ebp)
   1073c:	e8 48 1f 00 00       	call   12689 <kernel_memset>
   10741:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10744:	83 ec 0c             	sub    $0xc,%esp
   10747:	68 00 00 00 80       	push   $0x80000000
   1074c:	e8 87 fb ff ff       	call   102d8 <pde_index>
   10751:	83 c4 10             	add    $0x10,%esp
   10754:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++)
   10757:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1075e:	eb 1f                	jmp    1077f <memory_create_uvm+0x7c>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   10760:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10763:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1076a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1076d:	01 c2                	add    %eax,%edx
   1076f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10772:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   10779:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++)
   1077b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1077f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10782:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10785:	77 d9                	ja     10760 <memory_create_uvm+0x5d>
    }

    return (uint32_t)page_dir;
   10787:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1078a:	c9                   	leave  
   1078b:	c3                   	ret    

0001078c <memory_alloc_for_page_dir>:
 * @param {uint32_t} page_dir   页目录的地址
 * @param {uint32_t} vaddr      虚拟地址的起始地址
 * @param {uint32_t} size       需要分配的虚拟地址空间大小
 * @param {int} perm            映射的权限
 */
uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   1078c:	f3 0f 1e fb          	endbr32 
   10790:	55                   	push   %ebp
   10791:	89 e5                	mov    %esp,%ebp
   10793:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10796:	8b 45 0c             	mov    0xc(%ebp),%eax
   10799:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   1079c:	68 00 10 00 00       	push   $0x1000
   107a1:	ff 75 10             	pushl  0x10(%ebp)
   107a4:	e8 ff fa ff ff       	call   102a8 <up2>
   107a9:	83 c4 08             	add    $0x8,%esp
   107ac:	c1 e8 0c             	shr    $0xc,%eax
   107af:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   107b2:	68 00 10 00 00       	push   $0x1000
   107b7:	ff 75 0c             	pushl  0xc(%ebp)
   107ba:	e8 00 fb ff ff       	call   102bf <down2>
   107bf:	83 c4 08             	add    $0x8,%esp
   107c2:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++) {
   107c5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   107cc:	e9 95 00 00 00       	jmp    10866 <memory_alloc_for_page_dir+0xda>
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   107d1:	83 ec 08             	sub    $0x8,%esp
   107d4:	6a 01                	push   $0x1
   107d6:	68 00 50 01 00       	push   $0x15000
   107db:	e8 b0 fb ff ff       	call   10390 <addr_alloc_page>
   107e0:	83 c4 10             	add    $0x10,%esp
   107e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   107e6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   107ea:	75 17                	jne    10803 <memory_alloc_for_page_dir+0x77>
            log_printf("mem alloc failed. no memory");
   107ec:	83 ec 0c             	sub    $0xc,%esp
   107ef:	68 59 2e 01 00       	push   $0x12e59
   107f4:	e8 ef 24 00 00       	call   12ce8 <log_printf>
   107f9:	83 c4 10             	add    $0x10,%esp
            return 0;
   107fc:	b8 00 00 00 00       	mov    $0x0,%eax
   10801:	eb 74                	jmp    10877 <memory_alloc_for_page_dir+0xeb>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10803:	8b 55 14             	mov    0x14(%ebp),%edx
   10806:	8b 45 08             	mov    0x8(%ebp),%eax
   10809:	83 ec 0c             	sub    $0xc,%esp
   1080c:	52                   	push   %edx
   1080d:	6a 01                	push   $0x1
   1080f:	ff 75 e8             	pushl  -0x18(%ebp)
   10812:	ff 75 f4             	pushl  -0xc(%ebp)
   10815:	50                   	push   %eax
   10816:	e8 a4 fd ff ff       	call   105bf <memory_create_map>
   1081b:	83 c4 20             	add    $0x20,%esp
   1081e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10821:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10825:	79 34                	jns    1085b <memory_alloc_for_page_dir+0xcf>
            log_printf("create memory map failed. err = %d", err);
   10827:	83 ec 08             	sub    $0x8,%esp
   1082a:	ff 75 e4             	pushl  -0x1c(%ebp)
   1082d:	68 78 2e 01 00       	push   $0x12e78
   10832:	e8 b1 24 00 00       	call   12ce8 <log_printf>
   10837:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&paddr_alloc, vaddr, i + 1);
   1083a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1083d:	83 c0 01             	add    $0x1,%eax
   10840:	83 ec 04             	sub    $0x4,%esp
   10843:	50                   	push   %eax
   10844:	ff 75 0c             	pushl  0xc(%ebp)
   10847:	68 00 50 01 00       	push   $0x15000
   1084c:	e8 aa fb ff ff       	call   103fb <addr_free_page>
   10851:	83 c4 10             	add    $0x10,%esp
            return -1;  
   10854:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10859:	eb 1c                	jmp    10877 <memory_alloc_for_page_dir+0xeb>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   1085b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10862:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10866:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10869:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   1086c:	0f 8c 5f ff ff ff    	jl     107d1 <memory_alloc_for_page_dir+0x45>
    }

    return 0;
   10872:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10877:	c9                   	leave  
   10878:	c3                   	ret    

00010879 <memory_alloc_page_for>:
/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for (uint32_t addr, uint32_t size, int perm) {
   10879:	f3 0f 1e fb          	endbr32 
   1087d:	55                   	push   %ebp
   1087e:	89 e5                	mov    %esp,%ebp
   10880:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10883:	e8 f5 05 00 00       	call   10e7d <task_current>
   10888:	8b 40 1c             	mov    0x1c(%eax),%eax
   1088b:	ff 75 10             	pushl  0x10(%ebp)
   1088e:	ff 75 0c             	pushl  0xc(%ebp)
   10891:	ff 75 08             	pushl  0x8(%ebp)
   10894:	50                   	push   %eax
   10895:	e8 f2 fe ff ff       	call   1078c <memory_alloc_for_page_dir>
   1089a:	83 c4 10             	add    $0x10,%esp
}
   1089d:	c9                   	leave  
   1089e:	c3                   	ret    

0001089f <memory_init>:
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init(boot_info_t *boot_info)
{
   1089f:	f3 0f 1e fb          	endbr32 
   108a3:	55                   	push   %ebp
   108a4:	89 e5                	mov    %esp,%ebp
   108a6:	83 ec 18             	sub    $0x18,%esp

    // 1MB内存空间起始，在链接脚本中定义 /kernel/kernel.lds
    extern uint8_t *mem_free_start;
    // 在内核数据后面放物理页位图
    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   108a9:	c7 45 f4 1c ae 01 00 	movl   $0x1ae1c,-0xc(%ebp)

    log_printf("mem init.");
   108b0:	83 ec 0c             	sub    $0xc,%esp
   108b3:	68 9b 2e 01 00       	push   $0x12e9b
   108b8:	e8 2b 24 00 00       	call   12ce8 <log_printf>
   108bd:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   108c0:	83 ec 0c             	sub    $0xc,%esp
   108c3:	ff 75 08             	pushl  0x8(%ebp)
   108c6:	e8 96 fb ff ff       	call   10461 <show_mem_info>
   108cb:	83 c4 10             	add    $0x10,%esp

    // 计算1MB以上空间的空闲内存容量
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   108ce:	83 ec 0c             	sub    $0xc,%esp
   108d1:	ff 75 08             	pushl  0x8(%ebp)
   108d4:	e8 f2 fb ff ff       	call   104cb <total_mem_size>
   108d9:	83 c4 10             	add    $0x10,%esp
   108dc:	2d 00 00 10 00       	sub    $0x100000,%eax
   108e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 将 mem_up1MB_free 地址向下对齐到下一个 MEM_PAGE_SIZE 的倍数
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE); // 对齐到4KB页
   108e4:	83 ec 08             	sub    $0x8,%esp
   108e7:	68 00 10 00 00       	push   $0x1000
   108ec:	ff 75 f0             	pushl  -0x10(%ebp)
   108ef:	e8 cb f9 ff ff       	call   102bf <down2>
   108f4:	83 c4 10             	add    $0x10,%esp
   108f7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    log_printf(">1MB Free memory start addr: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   108fa:	83 ec 04             	sub    $0x4,%esp
   108fd:	ff 75 f0             	pushl  -0x10(%ebp)
   10900:	68 00 00 10 00       	push   $0x100000
   10905:	68 a8 2e 01 00       	push   $0x12ea8
   1090a:	e8 d9 23 00 00       	call   12ce8 <log_printf>
   1090f:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 位图缓冲区部分的内存仅跟在mem_free_start开始放置
    log_printf("mem_free:%d ", mem_free);
   10912:	83 ec 08             	sub    $0x8,%esp
   10915:	ff 75 f4             	pushl  -0xc(%ebp)
   10918:	68 d6 2e 01 00       	push   $0x12ed6
   1091d:	e8 c6 23 00 00       	call   12ce8 <log_printf>
   10922:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10925:	83 ec 0c             	sub    $0xc,%esp
   10928:	68 00 10 00 00       	push   $0x1000
   1092d:	ff 75 f0             	pushl  -0x10(%ebp)
   10930:	68 00 00 10 00       	push   $0x100000
   10935:	ff 75 f4             	pushl  -0xc(%ebp)
   10938:	68 00 50 01 00       	push   $0x15000
   1093d:	e8 f2 f9 ff ff       	call   10334 <addr_alloc_init>
   10942:	83 c4 20             	add    $0x20,%esp
    // 将mem_free移至位图缓冲区后面
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10945:	a1 24 50 01 00       	mov    0x15024,%eax
   1094a:	c1 e8 0c             	shr    $0xc,%eax
   1094d:	83 ec 0c             	sub    $0xc,%esp
   10950:	50                   	push   %eax
   10951:	e8 fc 18 00 00       	call   12252 <bitmap_byte_count>
   10956:	83 c4 10             	add    $0x10,%esp
   10959:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   1095c:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10963:	76 1c                	jbe    10981 <memory_init+0xe2>
   10965:	68 e4 2e 01 00       	push   $0x12ee4
   1096a:	68 20 2f 01 00       	push   $0x12f20
   1096f:	68 41 01 00 00       	push   $0x141
   10974:	68 1c 2e 01 00       	push   $0x12e1c
   10979:	e8 6d 20 00 00       	call   129eb <panic>
   1097e:	83 c4 10             	add    $0x10,%esp

    // 创建内核的地址映射表
    create_kernel_table();
   10981:	e8 dd fc ff ff       	call   10663 <create_kernel_table>

    // 设置页目录表的物理地址
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10986:	b8 00 60 01 00       	mov    $0x16000,%eax
   1098b:	83 ec 0c             	sub    $0xc,%esp
   1098e:	50                   	push   %eax
   1098f:	e8 8f f9 ff ff       	call   10323 <mmu_set_page_dir>
   10994:	83 c4 10             	add    $0x10,%esp
}
   10997:	90                   	nop
   10998:	c9                   	leave  
   10999:	c3                   	ret    

0001099a <list_node_init>:
/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node)
{
   1099a:	55                   	push   %ebp
   1099b:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   1099d:	8b 45 08             	mov    0x8(%ebp),%eax
   109a0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   109a7:	8b 45 08             	mov    0x8(%ebp),%eax
   109aa:	8b 50 04             	mov    0x4(%eax),%edx
   109ad:	8b 45 08             	mov    0x8(%ebp),%eax
   109b0:	89 10                	mov    %edx,(%eax)
}
   109b2:	90                   	nop
   109b3:	5d                   	pop    %ebp
   109b4:	c3                   	ret    

000109b5 <list_node_next>:
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t *list_node_next(list_node_t *node)
{
   109b5:	55                   	push   %ebp
   109b6:	89 e5                	mov    %esp,%ebp
    return node->next;
   109b8:	8b 45 08             	mov    0x8(%ebp),%eax
   109bb:	8b 40 04             	mov    0x4(%eax),%eax
}
   109be:	5d                   	pop    %ebp
   109bf:	c3                   	ret    

000109c0 <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   109c0:	55                   	push   %ebp
   109c1:	89 e5                	mov    %esp,%ebp
    return list->count;
   109c3:	8b 45 08             	mov    0x8(%ebp),%eax
   109c6:	8b 40 08             	mov    0x8(%eax),%eax
}
   109c9:	5d                   	pop    %ebp
   109ca:	c3                   	ret    

000109cb <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   109cb:	55                   	push   %ebp
   109cc:	89 e5                	mov    %esp,%ebp
    return list->first;
   109ce:	8b 45 08             	mov    0x8(%ebp),%eax
   109d1:	8b 00                	mov    (%eax),%eax
}
   109d3:	5d                   	pop    %ebp
   109d4:	c3                   	ret    

000109d5 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   109d5:	55                   	push   %ebp
   109d6:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   109d8:	8b 45 08             	mov    0x8(%ebp),%eax
   109db:	0f 22 d8             	mov    %eax,%cr3
}
   109de:	90                   	nop
   109df:	5d                   	pop    %ebp
   109e0:	c3                   	ret    

000109e1 <hlt>:
{
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void) {
   109e1:	55                   	push   %ebp
   109e2:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   109e4:	f4                   	hlt    
}
   109e5:	90                   	nop
   109e6:	5d                   	pop    %ebp
   109e7:	c3                   	ret    

000109e8 <write_tr>:

/**
 * @description: 对TR寄存器进行写操作
 * @param {uint32_t} tss_selector tss选择子类型
 */
static inline void write_tr (uint32_t tss_selector) {
   109e8:	55                   	push   %ebp
   109e9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   109eb:	8b 45 08             	mov    0x8(%ebp),%eax
   109ee:	0f 00 d8             	ltr    %ax
}
   109f1:	90                   	nop
   109f2:	5d                   	pop    %ebp
   109f3:	c3                   	ret    

000109f4 <mmu_set_page_dir>:
{
   109f4:	55                   	push   %ebp
   109f5:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   109f7:	ff 75 08             	pushl  0x8(%ebp)
   109fa:	e8 d6 ff ff ff       	call   109d5 <write_cr3>
   109ff:	83 c4 04             	add    $0x4,%esp
}
   10a02:	90                   	nop
   10a03:	c9                   	leave  
   10a04:	c3                   	ret    

00010a05 <tss_init>:
 * @param flag      系统任务标志位
 * @param esp       任务堆栈指针
 * @return int      成功返回0，失败返回-1
 */
static int tss_init(task_t *task, int flag, uint32_t entry, uint32_t esp)
{
   10a05:	f3 0f 1e fb          	endbr32 
   10a09:	55                   	push   %ebp
   10a0a:	89 e5                	mov    %esp,%ebp
   10a0c:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   10a0f:	e8 87 08 00 00       	call   1129b <gdt_alloc_desc>
   10a14:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0)
   10a17:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10a1b:	79 1a                	jns    10a37 <tss_init+0x32>
    {
        log_printf("alloc tss failed.\n");
   10a1d:	83 ec 0c             	sub    $0xc,%esp
   10a20:	68 2c 2f 01 00       	push   $0x12f2c
   10a25:	e8 be 22 00 00       	call   12ce8 <log_printf>
   10a2a:	83 c4 10             	add    $0x10,%esp
        return -1;
   10a2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10a32:	e9 1d 01 00 00       	jmp    10b54 <tss_init+0x14f>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   10a37:	8b 45 08             	mov    0x8(%ebp),%eax
   10a3a:	68 89 00 00 00       	push   $0x89
   10a3f:	6a 68                	push   $0x68
   10a41:	50                   	push   %eax
   10a42:	ff 75 ec             	pushl  -0x14(%ebp)
   10a45:	e8 59 07 00 00       	call   111a3 <segment_desc_set>
   10a4a:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10a4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a50:	83 ec 04             	sub    $0x4,%esp
   10a53:	6a 68                	push   $0x68
   10a55:	6a 00                	push   $0x0
   10a57:	50                   	push   %eax
   10a58:	e8 2c 1c 00 00       	call   12689 <kernel_memset>
   10a5d:	83 c4 10             	add    $0x10,%esp

    int code_sel, data_sel;
    if (flag & TASK_FLAG_SYSTEM)    // 对系统工程进行初始化
   10a60:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a63:	83 e0 01             	and    $0x1,%eax
   10a66:	85 c0                	test   %eax,%eax
   10a68:	74 10                	je     10a7a <tss_init+0x75>
    {
        code_sel = KERNEL_SELECTOR_CS;
   10a6a:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10a71:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10a78:	eb 16                	jmp    10a90 <tss_init+0x8b>
    }
    else
    {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   10a7a:	a1 90 71 01 00       	mov    0x17190,%eax
   10a7f:	83 c8 03             	or     $0x3,%eax
   10a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   10a85:	a1 94 71 01 00       	mov    0x17194,%eax
   10a8a:	83 c8 03             	or     $0x3,%eax
   10a8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   10a90:	8b 45 08             	mov    0x8(%ebp),%eax
   10a93:	8b 55 10             	mov    0x10(%ebp),%edx
   10a96:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10a99:	8b 45 08             	mov    0x8(%ebp),%eax
   10a9c:	8b 55 14             	mov    0x14(%ebp),%edx
   10a9f:	89 50 04             	mov    %edx,0x4(%eax)
   10aa2:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa5:	8b 50 04             	mov    0x4(%eax),%edx
   10aa8:	8b 45 08             	mov    0x8(%ebp),%eax
   10aab:	89 50 38             	mov    %edx,0x38(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10aae:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab1:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
    task->tss.eip = entry;
   10ab8:	8b 45 08             	mov    0x8(%ebp),%eax
   10abb:	8b 55 10             	mov    0x10(%ebp),%edx
   10abe:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10ac1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac4:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs = task->tss.gs = data_sel; // 全部采用同一数据段
   10acb:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ace:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad1:	89 50 5c             	mov    %edx,0x5c(%eax)
   10ad4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad7:	8b 50 5c             	mov    0x5c(%eax),%edx
   10ada:	8b 45 08             	mov    0x8(%ebp),%eax
   10add:	89 50 58             	mov    %edx,0x58(%eax)
   10ae0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae3:	8b 50 58             	mov    0x58(%eax),%edx
   10ae6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae9:	89 50 54             	mov    %edx,0x54(%eax)
   10aec:	8b 45 08             	mov    0x8(%ebp),%eax
   10aef:	8b 50 54             	mov    0x54(%eax),%edx
   10af2:	8b 45 08             	mov    0x8(%ebp),%eax
   10af5:	89 50 50             	mov    %edx,0x50(%eax)
   10af8:	8b 45 08             	mov    0x8(%ebp),%eax
   10afb:	8b 50 50             	mov    0x50(%eax),%edx
   10afe:	8b 45 08             	mov    0x8(%ebp),%eax
   10b01:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = code_sel;
   10b04:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10b07:	8b 45 08             	mov    0x8(%ebp),%eax
   10b0a:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.iomap = 0;
   10b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b10:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   10b17:	e8 e7 fb ff ff       	call   10703 <memory_create_uvm>
   10b1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (page_dir == 0)
   10b1f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10b23:	75 15                	jne    10b3a <tss_init+0x135>
    {
        gdt_free_sel(tss_sel);
   10b25:	83 ec 0c             	sub    $0xc,%esp
   10b28:	ff 75 ec             	pushl  -0x14(%ebp)
   10b2b:	e8 e4 07 00 00       	call   11314 <gdt_free_sel>
   10b30:	83 c4 10             	add    $0x10,%esp
        return -1;
   10b33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b38:	eb 1a                	jmp    10b54 <tss_init+0x14f>
    }
    task->tss.cr3 = page_dir;
   10b3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b3d:	8b 55 e8             	mov    -0x18(%ebp),%edx
   10b40:	89 50 1c             	mov    %edx,0x1c(%eax)

    task->tss_sel = tss_sel;
   10b43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10b46:	89 c2                	mov    %eax,%edx
   10b48:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4b:	66 89 50 68          	mov    %dx,0x68(%eax)
    return 0;
   10b4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b54:	c9                   	leave  
   10b55:	c3                   	ret    

00010b56 <task_switch_from_to>:

void task_switch_from_to(task_t *from, task_t *to)
{
   10b56:	f3 0f 1e fb          	endbr32 
   10b5a:	55                   	push   %ebp
   10b5b:	89 e5                	mov    %esp,%ebp
   10b5d:	83 ec 08             	sub    $0x8,%esp
    // 基于TSS 切换至 to->tss_sel 的任务
    switch_to_tss(to->tss_sel);
   10b60:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b63:	0f b7 40 68          	movzwl 0x68(%eax),%eax
   10b67:	0f b7 c0             	movzwl %ax,%eax
   10b6a:	83 ec 0c             	sub    $0xc,%esp
   10b6d:	50                   	push   %eax
   10b6e:	e8 de 07 00 00       	call   11351 <switch_to_tss>
   10b73:	83 c4 10             	add    $0x10,%esp
}
   10b76:	90                   	nop
   10b77:	c9                   	leave  
   10b78:	c3                   	ret    

00010b79 <task_init>:

int task_init(task_t *task, const char *name, int flag, uint32_t entry, uint32_t esp)
{
   10b79:	f3 0f 1e fb          	endbr32 
   10b7d:	55                   	push   %ebp
   10b7e:	89 e5                	mov    %esp,%ebp
   10b80:	83 ec 18             	sub    $0x18,%esp
    // 基于TSS 初始化
    int err = tss_init(task, flag, entry, esp);
   10b83:	ff 75 18             	pushl  0x18(%ebp)
   10b86:	ff 75 14             	pushl  0x14(%ebp)
   10b89:	ff 75 10             	pushl  0x10(%ebp)
   10b8c:	ff 75 08             	pushl  0x8(%ebp)
   10b8f:	e8 71 fe ff ff       	call   10a05 <tss_init>
   10b94:	83 c4 10             	add    $0x10,%esp
   10b97:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0)
   10b9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b9e:	79 18                	jns    10bb8 <task_init+0x3f>
    {
        log_printf("init task failed.\n");
   10ba0:	83 ec 0c             	sub    $0xc,%esp
   10ba3:	68 3f 2f 01 00       	push   $0x12f3f
   10ba8:	e8 3b 21 00 00       	call   12ce8 <log_printf>
   10bad:	83 c4 10             	add    $0x10,%esp
        return err;
   10bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bb3:	e9 c8 00 00 00       	jmp    10c80 <task_init+0x107>
    }
    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10bb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbb:	05 88 00 00 00       	add    $0x88,%eax
   10bc0:	83 ec 04             	sub    $0x4,%esp
   10bc3:	6a 20                	push   $0x20
   10bc5:	ff 75 0c             	pushl  0xc(%ebp)
   10bc8:	50                   	push   %eax
   10bc9:	e8 33 19 00 00       	call   12501 <kernel_strncpy>
   10bce:	83 c4 10             	add    $0x10,%esp
    // 当前任务设置为创建态
    task->state = TASK_CREATED;
   10bd1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd4:	c7 80 84 00 00 00 00 	movl   $0x0,0x84(%eax)
   10bdb:	00 00 00 
    task->sleep_ticks = 0;
   10bde:	8b 45 08             	mov    0x8(%ebp),%eax
   10be1:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
   10be8:	00 00 00 
    task->times_ticks = TASK_TIME_SLICE_DEFAULT;
   10beb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bee:	c7 80 ac 00 00 00 64 	movl   $0x64,0xac(%eax)
   10bf5:	00 00 00 
    task->slice_ticks = task->times_ticks;
   10bf8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfb:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   10c01:	8b 45 08             	mov    0x8(%ebp),%eax
   10c04:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

    list_node_init(&task->all_node);
   10c0a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c0d:	83 c0 74             	add    $0x74,%eax
   10c10:	83 ec 0c             	sub    $0xc,%esp
   10c13:	50                   	push   %eax
   10c14:	e8 81 fd ff ff       	call   1099a <list_node_init>
   10c19:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10c1c:	8b 45 08             	mov    0x8(%ebp),%eax
   10c1f:	83 c0 6c             	add    $0x6c,%eax
   10c22:	83 ec 0c             	sub    $0xc,%esp
   10c25:	50                   	push   %eax
   10c26:	e8 6f fd ff ff       	call   1099a <list_node_init>
   10c2b:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10c2e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c31:	83 c0 7c             	add    $0x7c,%eax
   10c34:	83 ec 0c             	sub    $0xc,%esp
   10c37:	50                   	push   %eax
   10c38:	e8 5d fd ff ff       	call   1099a <list_node_init>
   10c3d:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10c40:	e8 2a 11 00 00       	call   11d6f <irq_enter_protection>
   10c45:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 将task任务插入到就绪队列中并设置为就绪态
    task_set_ready(task);
   10c48:	83 ec 0c             	sub    $0xc,%esp
   10c4b:	ff 75 08             	pushl  0x8(%ebp)
   10c4e:	e8 c3 01 00 00       	call   10e16 <task_set_ready>
   10c53:	83 c4 10             	add    $0x10,%esp
    // 将任务添加到任务队列（尾插法）
    list_insert_last(&task_manager.task_list, &task->all_node);
   10c56:	8b 45 08             	mov    0x8(%ebp),%eax
   10c59:	83 c0 74             	add    $0x74,%eax
   10c5c:	83 ec 08             	sub    $0x8,%esp
   10c5f:	50                   	push   %eax
   10c60:	68 10 70 01 00       	push   $0x17010
   10c65:	e8 5a 1e 00 00       	call   12ac4 <list_insert_last>
   10c6a:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10c6d:	83 ec 0c             	sub    $0xc,%esp
   10c70:	ff 75 f0             	pushl  -0x10(%ebp)
   10c73:	e8 13 11 00 00       	call   11d8b <irq_leave_protection>
   10c78:	83 c4 10             	add    $0x10,%esp
    return 0;
   10c7b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c80:	c9                   	leave  
   10c81:	c3                   	ret    

00010c82 <task_manager_init>:

/**
 * @brief 任务管理器初始化：将就绪队列和任务队列初始化为空，并将当前运行的任务指针设置为 NULL。
 */
void task_manager_init(void)
{
   10c82:	f3 0f 1e fb          	endbr32 
   10c86:	55                   	push   %ebp
   10c87:	89 e5                	mov    %esp,%ebp
   10c89:	83 ec 18             	sub    $0x18,%esp
    // 数据段和代码段，使用DPL3，所有应用共用同一个
    // 为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   10c8c:	e8 0a 06 00 00       	call   1129b <gdt_alloc_desc>
   10c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10c94:	68 f2 40 00 00       	push   $0x40f2
   10c99:	6a ff                	push   $0xffffffff
   10c9b:	6a 00                	push   $0x0
   10c9d:	ff 75 f4             	pushl  -0xc(%ebp)
   10ca0:	e8 fe 04 00 00       	call   111a3 <segment_desc_set>
   10ca5:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   10ca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cab:	a3 94 71 01 00       	mov    %eax,0x17194

    sel = gdt_alloc_desc();
   10cb0:	e8 e6 05 00 00       	call   1129b <gdt_alloc_desc>
   10cb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10cb8:	68 fa 40 00 00       	push   $0x40fa
   10cbd:	6a ff                	push   $0xffffffff
   10cbf:	6a 00                	push   $0x0
   10cc1:	ff 75 f4             	pushl  -0xc(%ebp)
   10cc4:	e8 da 04 00 00       	call   111a3 <segment_desc_set>
   10cc9:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   10ccc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ccf:	a3 90 71 01 00       	mov    %eax,0x17190

    // 各队列初始化
    list_init(&task_manager.ready_list);
   10cd4:	83 ec 0c             	sub    $0xc,%esp
   10cd7:	68 04 70 01 00       	push   $0x17004
   10cdc:	e8 57 1d 00 00       	call   12a38 <list_init>
   10ce1:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10ce4:	83 ec 0c             	sub    $0xc,%esp
   10ce7:	68 10 70 01 00       	push   $0x17010
   10cec:	e8 47 1d 00 00       	call   12a38 <list_init>
   10cf1:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10cf4:	83 ec 0c             	sub    $0xc,%esp
   10cf7:	68 1c 70 01 00       	push   $0x1701c
   10cfc:	e8 37 1d 00 00       	call   12a38 <list_init>
   10d01:	83 c4 10             	add    $0x10,%esp
    // 对空闲进程进行初始化
    task_init(&task_manager.idle_task,
              "idle task",
              TASK_FLAG_SYSTEM,
              (uint32_t)idle_task_entry,
              (uint32_t)(idle_task_stack + IDLE_STACK_SIZE)); // 里面的值不必要写
   10d04:	b8 a0 81 01 00       	mov    $0x181a0,%eax
    task_init(&task_manager.idle_task,
   10d09:	89 c2                	mov    %eax,%edx
   10d0b:	b8 44 0d 01 00       	mov    $0x10d44,%eax
   10d10:	83 ec 0c             	sub    $0xc,%esp
   10d13:	52                   	push   %edx
   10d14:	50                   	push   %eax
   10d15:	6a 01                	push   $0x1
   10d17:	68 52 2f 01 00       	push   $0x12f52
   10d1c:	68 dc 70 01 00       	push   $0x170dc
   10d21:	e8 53 fe ff ff       	call   10b79 <task_init>
   10d26:	83 c4 20             	add    $0x20,%esp

    task_manager.curr_task = (task_t *)0;
   10d29:	c7 05 00 70 01 00 00 	movl   $0x0,0x17000
   10d30:	00 00 00 
}
   10d33:	90                   	nop
   10d34:	c9                   	leave  
   10d35:	c3                   	ret    

00010d36 <task_first_task>:
/**
 * @brief 返回任务管理器中的第一个任务
 */
task_t *task_first_task(void)
{
   10d36:	f3 0f 1e fb          	endbr32 
   10d3a:	55                   	push   %ebp
   10d3b:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10d3d:	b8 28 70 01 00       	mov    $0x17028,%eax
}
   10d42:	5d                   	pop    %ebp
   10d43:	c3                   	ret    

00010d44 <idle_task_entry>:

// 空闲进程初始化
static void idle_task_entry()
{
   10d44:	f3 0f 1e fb          	endbr32 
   10d48:	55                   	push   %ebp
   10d49:	89 e5                	mov    %esp,%ebp
    for (;;)
    {
        // 调用低功耗指令，使得CPU处于低功耗状态
        hlt();
   10d4b:	e8 91 fc ff ff       	call   109e1 <hlt>
   10d50:	eb f9                	jmp    10d4b <idle_task_entry+0x7>

00010d52 <task_first_init>:
    }
}
// 初始化了一个名为 first_task 的内核任务，并将其设为当前运行的任务。它还通过写 TR 寄存器来切换到这个任务。
void task_first_init(void)
{
   10d52:	f3 0f 1e fb          	endbr32 
   10d56:	55                   	push   %ebp
   10d57:	89 e5                	mov    %esp,%ebp
   10d59:	83 ec 18             	sub    $0x18,%esp
    // 获取入口地址
    void first_task_entry(void);
    uint32_t first_start = (uint32_t)first_task_entry;
   10d5c:	c7 45 f4 00 00 00 80 	movl   $0x80000000,-0xc(%ebp)

    // 以下获得的是bin文件在内存中的物理地址
    extern uint8_t s_first_task[], e_first_task[];

    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task); // 待拷贝的区域
   10d63:	b8 1c ae 01 00       	mov    $0x1ae1c,%eax
   10d68:	2d e0 ad 01 00       	sub    $0x1ade0,%eax
   10d6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;                     // 为待拷贝区域分配内存
   10d70:	c7 45 ec 00 a0 00 00 	movl   $0xa000,-0x14(%ebp)
    ASSERT(copy_size < alloc_size);
   10d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d7a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10d7d:	72 1c                	jb     10d9b <task_first_init+0x49>
   10d7f:	68 5c 2f 01 00       	push   $0x12f5c
   10d84:	68 bc 2f 01 00       	push   $0x12fbc
   10d89:	68 b3 00 00 00       	push   $0xb3
   10d8e:	68 74 2f 01 00       	push   $0x12f74
   10d93:	e8 53 1c 00 00       	call   129eb <panic>
   10d98:	83 c4 10             	add    $0x10,%esp

    // 初始化任务
    task_init(&task_manager.first_task, "first task", 0, first_start, 0);
   10d9b:	83 ec 0c             	sub    $0xc,%esp
   10d9e:	6a 00                	push   $0x0
   10da0:	ff 75 f4             	pushl  -0xc(%ebp)
   10da3:	6a 00                	push   $0x0
   10da5:	68 af 2f 01 00       	push   $0x12faf
   10daa:	68 28 70 01 00       	push   $0x17028
   10daf:	e8 c5 fd ff ff       	call   10b79 <task_init>
   10db4:	83 c4 20             	add    $0x20,%esp

    // 当前任务 指向 当前运行的第一个任务
    task_manager.curr_task = &task_manager.first_task;
   10db7:	c7 05 00 70 01 00 28 	movl   $0x17028,0x17000
   10dbe:	70 01 00 
    //  更新页表地址为自己的
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10dc1:	a1 44 70 01 00       	mov    0x17044,%eax
   10dc6:	83 ec 0c             	sub    $0xc,%esp
   10dc9:	50                   	push   %eax
   10dca:	e8 25 fc ff ff       	call   109f4 <mmu_set_page_dir>
   10dcf:	83 c4 10             	add    $0x10,%esp
    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   10dd2:	83 ec 04             	sub    $0x4,%esp
   10dd5:	6a 07                	push   $0x7
   10dd7:	ff 75 ec             	pushl  -0x14(%ebp)
   10dda:	ff 75 f4             	pushl  -0xc(%ebp)
   10ddd:	e8 97 fa ff ff       	call   10879 <memory_alloc_page_for>
   10de2:	83 c4 10             	add    $0x10,%esp

    kernel_memcpy((void *)first_start, (void *)s_first_task, copy_size);
   10de5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10de8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10deb:	83 ec 04             	sub    $0x4,%esp
   10dee:	52                   	push   %edx
   10def:	68 e0 ad 01 00       	push   $0x1ade0
   10df4:	50                   	push   %eax
   10df5:	e8 3c 18 00 00       	call   12636 <kernel_memcpy>
   10dfa:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   10dfd:	0f b7 05 90 70 01 00 	movzwl 0x17090,%eax
   10e04:	0f b7 c0             	movzwl %ax,%eax
   10e07:	83 ec 0c             	sub    $0xc,%esp
   10e0a:	50                   	push   %eax
   10e0b:	e8 d8 fb ff ff       	call   109e8 <write_tr>
   10e10:	83 c4 10             	add    $0x10,%esp
}
   10e13:	90                   	nop
   10e14:	c9                   	leave  
   10e15:	c3                   	ret    

00010e16 <task_set_ready>:

// 将task任务插入到就绪队列中并设置为就绪态
void task_set_ready(task_t *task)
{
   10e16:	f3 0f 1e fb          	endbr32 
   10e1a:	55                   	push   %ebp
   10e1b:	89 e5                	mov    %esp,%ebp
   10e1d:	83 ec 08             	sub    $0x8,%esp
    // 不处理空闲进程
    if (task != &task_manager.idle_task)
   10e20:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10e27:	74 24                	je     10e4d <task_set_ready+0x37>
    {
        // 首先将任务插入到就绪队列中（尾插法）
        list_insert_last(&task_manager.ready_list, &task->run_node);
   10e29:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2c:	83 c0 6c             	add    $0x6c,%eax
   10e2f:	83 ec 08             	sub    $0x8,%esp
   10e32:	50                   	push   %eax
   10e33:	68 04 70 01 00       	push   $0x17004
   10e38:	e8 87 1c 00 00       	call   12ac4 <list_insert_last>
   10e3d:	83 c4 10             	add    $0x10,%esp
        task->state = TASK_READY;
   10e40:	8b 45 08             	mov    0x8(%ebp),%eax
   10e43:	c7 80 84 00 00 00 03 	movl   $0x3,0x84(%eax)
   10e4a:	00 00 00 
    }
}
   10e4d:	90                   	nop
   10e4e:	c9                   	leave  
   10e4f:	c3                   	ret    

00010e50 <task_set_block>:

// 将task任务从就绪态队列中移除
void task_set_block(task_t *task)
{
   10e50:	f3 0f 1e fb          	endbr32 
   10e54:	55                   	push   %ebp
   10e55:	89 e5                	mov    %esp,%ebp
   10e57:	83 ec 08             	sub    $0x8,%esp
    // 不处理空闲进程
    if (task != &task_manager.idle_task)
   10e5a:	81 7d 08 dc 70 01 00 	cmpl   $0x170dc,0x8(%ebp)
   10e61:	74 17                	je     10e7a <task_set_block+0x2a>
    {
        list_remove(&task_manager.ready_list, &task->run_node);
   10e63:	8b 45 08             	mov    0x8(%ebp),%eax
   10e66:	83 c0 6c             	add    $0x6c,%eax
   10e69:	83 ec 08             	sub    $0x8,%esp
   10e6c:	50                   	push   %eax
   10e6d:	68 04 70 01 00       	push   $0x17004
   10e72:	e8 31 1d 00 00       	call   12ba8 <list_remove>
   10e77:	83 c4 10             	add    $0x10,%esp
        // 移除后状态不确定，因此不设置状态值
    }
}
   10e7a:	90                   	nop
   10e7b:	c9                   	leave  
   10e7c:	c3                   	ret    

00010e7d <task_current>:
/**
 * @description: 返回当前正在运行的进程
 * @return {*}
 */
task_t *task_current(void)
{
   10e7d:	f3 0f 1e fb          	endbr32 
   10e81:	55                   	push   %ebp
   10e82:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10e84:	a1 00 70 01 00       	mov    0x17000,%eax
}
   10e89:	5d                   	pop    %ebp
   10e8a:	c3                   	ret    

00010e8b <sys_sched_yield>:
/**
 * @description: [已弃用！]进程自己主动放弃CPU，自觉移到队列尾部，从而给其它进程留出运行的机会
 * @return {*}
 */
int sys_sched_yield(void)
{
   10e8b:	f3 0f 1e fb          	endbr32 
   10e8f:	55                   	push   %ebp
   10e90:	89 e5                	mov    %esp,%ebp
   10e92:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10e95:	e8 d5 0e 00 00       	call   11d6f <irq_enter_protection>
   10e9a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 首先判断就绪队列中是否有多个进程
    if (list_count(&task_manager.ready_list) > 1)
   10e9d:	83 ec 0c             	sub    $0xc,%esp
   10ea0:	68 04 70 01 00       	push   $0x17004
   10ea5:	e8 16 fb ff ff       	call   109c0 <list_count>
   10eaa:	83 c4 10             	add    $0x10,%esp
   10ead:	83 f8 01             	cmp    $0x1,%eax
   10eb0:	7e 29                	jle    10edb <sys_sched_yield+0x50>
    {
        // 获取当前正在运行的任务
        task_t *curr_task = task_current();
   10eb2:	e8 c6 ff ff ff       	call   10e7d <task_current>
   10eb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // 将当前任务从就绪队列中删除
        task_set_block(curr_task);
   10eba:	83 ec 0c             	sub    $0xc,%esp
   10ebd:	ff 75 f0             	pushl  -0x10(%ebp)
   10ec0:	e8 8b ff ff ff       	call   10e50 <task_set_block>
   10ec5:	83 c4 10             	add    $0x10,%esp
        // 将当前任务加入到就绪队列尾部
        task_set_ready(curr_task);
   10ec8:	83 ec 0c             	sub    $0xc,%esp
   10ecb:	ff 75 f0             	pushl  -0x10(%ebp)
   10ece:	e8 43 ff ff ff       	call   10e16 <task_set_ready>
   10ed3:	83 c4 10             	add    $0x10,%esp
        // 将当前任务切换为下一个任务
        task_dispatch();
   10ed6:	e8 5c 00 00 00       	call   10f37 <task_dispatch>
    }

    irq_leave_protection(state);
   10edb:	83 ec 0c             	sub    $0xc,%esp
   10ede:	ff 75 f4             	pushl  -0xc(%ebp)
   10ee1:	e8 a5 0e 00 00       	call   11d8b <irq_leave_protection>
   10ee6:	83 c4 10             	add    $0x10,%esp
    return 0;
   10ee9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10eee:	c9                   	leave  
   10eef:	c3                   	ret    

00010ef0 <task_next_run>:
// 返回下一个即将运行的任务(本项目直接返回队头的进程)
static task_t *task_next_run()
{
   10ef0:	f3 0f 1e fb          	endbr32 
   10ef4:	55                   	push   %ebp
   10ef5:	89 e5                	mov    %esp,%ebp
   10ef7:	83 ec 10             	sub    $0x10,%esp
    // 如果就绪队列中没有进程，则返回一个空闲进程
    if (list_count(&task_manager.ready_list) == 0)
   10efa:	68 04 70 01 00       	push   $0x17004
   10eff:	e8 bc fa ff ff       	call   109c0 <list_count>
   10f04:	83 c4 04             	add    $0x4,%esp
   10f07:	85 c0                	test   %eax,%eax
   10f09:	75 07                	jne    10f12 <task_next_run+0x22>
    {
        return &task_manager.idle_task;
   10f0b:	b8 dc 70 01 00       	mov    $0x170dc,%eax
   10f10:	eb 23                	jmp    10f35 <task_next_run+0x45>
    }
    // 取出链表的第一个结点，即为队头的进程
    list_node_t *task_node = list_first(&task_manager.ready_list);
   10f12:	68 04 70 01 00       	push   $0x17004
   10f17:	e8 af fa ff ff       	call   109cb <list_first>
   10f1c:	83 c4 04             	add    $0x4,%esp
   10f1f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // 根据当前结点的地址，获得整个任务控制块
    return list_node_parent(task_node, task_t, run_node);
   10f22:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10f26:	74 08                	je     10f30 <task_next_run+0x40>
   10f28:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f2b:	83 e8 6c             	sub    $0x6c,%eax
   10f2e:	eb 05                	jmp    10f35 <task_next_run+0x45>
   10f30:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f35:	c9                   	leave  
   10f36:	c3                   	ret    

00010f37 <task_dispatch>:

// 切换下一个欲运行的任务
void task_dispatch()
{
   10f37:	f3 0f 1e fb          	endbr32 
   10f3b:	55                   	push   %ebp
   10f3c:	89 e5                	mov    %esp,%ebp
   10f3e:	83 ec 18             	sub    $0x18,%esp
    task_t *to = task_next_run();
   10f41:	e8 aa ff ff ff       	call   10ef0 <task_next_run>
   10f46:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 下一个任务和当前任务不同的时候才进行切换
    if (to != task_manager.curr_task)
   10f49:	a1 00 70 01 00       	mov    0x17000,%eax
   10f4e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10f51:	74 2e                	je     10f81 <task_dispatch+0x4a>
    {
        task_t *from = task_manager.curr_task;
   10f53:	a1 00 70 01 00       	mov    0x17000,%eax
   10f58:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.curr_task = to;
   10f5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f5e:	a3 00 70 01 00       	mov    %eax,0x17000

        to->state = TASK_RUNNING;
   10f63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f66:	c7 80 84 00 00 00 01 	movl   $0x1,0x84(%eax)
   10f6d:	00 00 00 
        task_switch_from_to(from, to);
   10f70:	83 ec 08             	sub    $0x8,%esp
   10f73:	ff 75 f4             	pushl  -0xc(%ebp)
   10f76:	ff 75 f0             	pushl  -0x10(%ebp)
   10f79:	e8 d8 fb ff ff       	call   10b56 <task_switch_from_to>
   10f7e:	83 c4 10             	add    $0x10,%esp
    }
}
   10f81:	90                   	nop
   10f82:	c9                   	leave  
   10f83:	c3                   	ret    

00010f84 <task_time_tick>:
/**
 * @brief 定时器切换任务：时间片的处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick()
{
   10f84:	f3 0f 1e fb          	endbr32 
   10f88:	55                   	push   %ebp
   10f89:	89 e5                	mov    %esp,%ebp
   10f8b:	83 ec 28             	sub    $0x28,%esp

    // 获取当前正在运行的任务
    task_t *curr_task = task_current();
   10f8e:	e8 ea fe ff ff       	call   10e7d <task_current>
   10f93:	89 45 f0             	mov    %eax,-0x10(%ebp)

    irq_state_t state = irq_enter_protection();
   10f96:	e8 d4 0d 00 00       	call   11d6f <irq_enter_protection>
   10f9b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // 判断当前任务的时间片计数器是否减到0
    if (--curr_task->slice_ticks == 0)
   10f9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fa1:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
   10fa7:	8d 50 ff             	lea    -0x1(%eax),%edx
   10faa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fad:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10fb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fb6:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
   10fbc:	85 c0                	test   %eax,%eax
   10fbe:	75 2e                	jne    10fee <task_time_tick+0x6a>
    {
        // 重新设置计数器
        curr_task->slice_ticks = curr_task->times_ticks;
   10fc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fc3:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   10fc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10fcc:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

        // 将当前任务从就绪队列中删除
        task_set_block(curr_task);
   10fd2:	83 ec 0c             	sub    $0xc,%esp
   10fd5:	ff 75 f0             	pushl  -0x10(%ebp)
   10fd8:	e8 73 fe ff ff       	call   10e50 <task_set_block>
   10fdd:	83 c4 10             	add    $0x10,%esp
        // 将当前任务加入到就绪队列尾部
        task_set_ready(curr_task);
   10fe0:	83 ec 0c             	sub    $0xc,%esp
   10fe3:	ff 75 f0             	pushl  -0x10(%ebp)
   10fe6:	e8 2b fe ff ff       	call   10e16 <task_set_ready>
   10feb:	83 c4 10             	add    $0x10,%esp
    }
    // 睡眠处理
    // 在每个时钟节拍中断发生时，扫描延时队列，发现延时时间到，则再将进程移回就绪队列的队尾
    list_node_t *curr = list_first(&task_manager.sleep_list);
   10fee:	83 ec 0c             	sub    $0xc,%esp
   10ff1:	68 1c 70 01 00       	push   $0x1701c
   10ff6:	e8 d0 f9 ff ff       	call   109cb <list_first>
   10ffb:	83 c4 10             	add    $0x10,%esp
   10ffe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   11001:	eb 6b                	jmp    1106e <task_time_tick+0xea>
    {
        list_node_t *next = list_node_next(curr);
   11003:	83 ec 0c             	sub    $0xc,%esp
   11006:	ff 75 f4             	pushl  -0xc(%ebp)
   11009:	e8 a7 f9 ff ff       	call   109b5 <list_node_next>
   1100e:	83 c4 10             	add    $0x10,%esp
   11011:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t *task = list_node_parent(curr, task_t, run_node);
   11014:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11018:	74 08                	je     11022 <task_time_tick+0x9e>
   1101a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1101d:	83 e8 6c             	sub    $0x6c,%eax
   11020:	eb 05                	jmp    11027 <task_time_tick+0xa3>
   11022:	b8 00 00 00 00       	mov    $0x0,%eax
   11027:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0)
   1102a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1102d:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   11033:	8d 50 ff             	lea    -0x1(%eax),%edx
   11036:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11039:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   1103f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11042:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   11048:	85 c0                	test   %eax,%eax
   1104a:	75 1c                	jne    11068 <task_time_tick+0xe4>
        {
            task_set_wakeup(task);
   1104c:	83 ec 0c             	sub    $0xc,%esp
   1104f:	ff 75 e4             	pushl  -0x1c(%ebp)
   11052:	e8 78 00 00 00       	call   110cf <task_set_wakeup>
   11057:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1105a:	83 ec 0c             	sub    $0xc,%esp
   1105d:	ff 75 e4             	pushl  -0x1c(%ebp)
   11060:	e8 b1 fd ff ff       	call   10e16 <task_set_ready>
   11065:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11068:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1106b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   1106e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11072:	75 8f                	jne    11003 <task_time_tick+0x7f>
    }
    // 由于有进程已经插入到就绪队列中，可能要马上运行，因此需要调用切换任务函数
    task_dispatch();
   11074:	e8 be fe ff ff       	call   10f37 <task_dispatch>
    irq_leave_protection(state);
   11079:	83 ec 0c             	sub    $0xc,%esp
   1107c:	ff 75 ec             	pushl  -0x14(%ebp)
   1107f:	e8 07 0d 00 00       	call   11d8b <irq_leave_protection>
   11084:	83 c4 10             	add    $0x10,%esp
}
   11087:	90                   	nop
   11088:	c9                   	leave  
   11089:	c3                   	ret    

0001108a <task_set_sleep>:
 * @return {*}
 * @param {task_t} *task	要睡眠的任务
 * @param {uint32_t} ticks	任务睡眠的时间
 */
void task_set_sleep(task_t *task, uint32_t ticks)
{
   1108a:	f3 0f 1e fb          	endbr32 
   1108e:	55                   	push   %ebp
   1108f:	89 e5                	mov    %esp,%ebp
   11091:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0)
   11094:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11098:	74 32                	je     110cc <task_set_sleep+0x42>
        return;
    task->sleep_ticks = ticks;
   1109a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1109d:	8b 45 08             	mov    0x8(%ebp),%eax
   110a0:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    task->state = TASK_SLEEP;
   110a6:	8b 45 08             	mov    0x8(%ebp),%eax
   110a9:	c7 80 84 00 00 00 02 	movl   $0x2,0x84(%eax)
   110b0:	00 00 00 
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   110b3:	8b 45 08             	mov    0x8(%ebp),%eax
   110b6:	83 c0 6c             	add    $0x6c,%eax
   110b9:	83 ec 08             	sub    $0x8,%esp
   110bc:	50                   	push   %eax
   110bd:	68 1c 70 01 00       	push   $0x1701c
   110c2:	e8 fd 19 00 00       	call   12ac4 <list_insert_last>
   110c7:	83 c4 10             	add    $0x10,%esp
   110ca:	eb 01                	jmp    110cd <task_set_sleep+0x43>
        return;
   110cc:	90                   	nop
}
   110cd:	c9                   	leave  
   110ce:	c3                   	ret    

000110cf <task_set_wakeup>:
 * @description: 将任务从睡眠队列中移出
 * @return {*}
 * @param {task_t *} task	待移出的任务
 */
void task_set_wakeup(task_t *task)
{
   110cf:	f3 0f 1e fb          	endbr32 
   110d3:	55                   	push   %ebp
   110d4:	89 e5                	mov    %esp,%ebp
   110d6:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   110d9:	8b 45 08             	mov    0x8(%ebp),%eax
   110dc:	83 c0 6c             	add    $0x6c,%eax
   110df:	83 ec 08             	sub    $0x8,%esp
   110e2:	50                   	push   %eax
   110e3:	68 1c 70 01 00       	push   $0x1701c
   110e8:	e8 bb 1a 00 00       	call   12ba8 <list_remove>
   110ed:	83 c4 10             	add    $0x10,%esp
}
   110f0:	90                   	nop
   110f1:	c9                   	leave  
   110f2:	c3                   	ret    

000110f3 <sys_sleep>:

// 延迟时间
void sys_sleep(uint32_t ms)
{
   110f3:	f3 0f 1e fb          	endbr32 
   110f7:	55                   	push   %ebp
   110f8:	89 e5                	mov    %esp,%ebp
   110fa:	53                   	push   %ebx
   110fb:	83 ec 14             	sub    $0x14,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS)
   110fe:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   11102:	77 07                	ja     1110b <sys_sleep+0x18>
    {
        ms = OS_TICK_MS;
   11104:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }
    irq_state_t state = irq_enter_protection();
   1110b:	e8 5f 0c 00 00       	call   11d6f <irq_enter_protection>
   11110:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 将当前进程从就绪队列中移出
    task_set_block(task_current());
   11113:	e8 65 fd ff ff       	call   10e7d <task_current>
   11118:	83 ec 0c             	sub    $0xc,%esp
   1111b:	50                   	push   %eax
   1111c:	e8 2f fd ff ff       	call   10e50 <task_set_block>
   11121:	83 c4 10             	add    $0x10,%esp
    // 将给队列插入到睡眠队列中 将ms转换成时钟节拍的计数
    task_set_sleep(task_current(), (ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   11124:	8b 45 08             	mov    0x8(%ebp),%eax
   11127:	83 c0 09             	add    $0x9,%eax
   1112a:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   1112f:	f7 e2                	mul    %edx
   11131:	89 d3                	mov    %edx,%ebx
   11133:	c1 eb 03             	shr    $0x3,%ebx
   11136:	e8 42 fd ff ff       	call   10e7d <task_current>
   1113b:	83 ec 08             	sub    $0x8,%esp
   1113e:	53                   	push   %ebx
   1113f:	50                   	push   %eax
   11140:	e8 45 ff ff ff       	call   1108a <task_set_sleep>
   11145:	83 c4 10             	add    $0x10,%esp
    // 切换进程
    task_dispatch();
   11148:	e8 ea fd ff ff       	call   10f37 <task_dispatch>

    irq_leave_protection(state);
   1114d:	83 ec 0c             	sub    $0xc,%esp
   11150:	ff 75 f4             	pushl  -0xc(%ebp)
   11153:	e8 33 0c 00 00       	call   11d8b <irq_leave_protection>
   11158:	83 c4 10             	add    $0x10,%esp
   1115b:	90                   	nop
   1115c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1115f:	c9                   	leave  
   11160:	c3                   	ret    

00011161 <lgdt>:
{
   11161:	55                   	push   %ebp
   11162:	89 e5                	mov    %esp,%ebp
   11164:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   11167:	8b 45 08             	mov    0x8(%ebp),%eax
   1116a:	c1 e8 10             	shr    $0x10,%eax
   1116d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   11171:	8b 45 08             	mov    0x8(%ebp),%eax
   11174:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   11178:	8b 45 0c             	mov    0xc(%ebp),%eax
   1117b:	83 e8 01             	sub    $0x1,%eax
   1117e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   11182:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11186:	90                   	nop
   11187:	c9                   	leave  
   11188:	c3                   	ret    

00011189 <far_jump>:
{
   11189:	55                   	push   %ebp
   1118a:	89 e5                	mov    %esp,%ebp
   1118c:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   1118f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11192:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11195:	8b 45 08             	mov    0x8(%ebp),%eax
   11198:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   1119b:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1119e:	ff 28                	ljmp   *(%eax)
}
   111a0:	90                   	nop
   111a1:	c9                   	leave  
   111a2:	c3                   	ret    

000111a3 <segment_desc_set>:

/**
 * 设置段描述符
 */
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   111a3:	f3 0f 1e fb          	endbr32 
   111a7:	55                   	push   %ebp
   111a8:	89 e5                	mov    %esp,%ebp
   111aa:	83 ec 14             	sub    $0x14,%esp
   111ad:	8b 45 14             	mov    0x14(%ebp),%eax
   111b0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   111b4:	8b 45 08             	mov    0x8(%ebp),%eax
   111b7:	83 e0 f8             	and    $0xfffffff8,%eax
   111ba:	05 a0 81 01 00       	add    $0x181a0,%eax
   111bf:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 如果界限比较长，将长度单位换成4KB
    if (limit > 0xfffff)
   111c2:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   111c9:	76 0f                	jbe    111da <segment_desc_set+0x37>
    {
        attr |= 0x8000;
   111cb:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   111d1:	8b 45 10             	mov    0x10(%ebp),%eax
   111d4:	c1 e8 0c             	shr    $0xc,%eax
   111d7:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   111da:	8b 45 10             	mov    0x10(%ebp),%eax
   111dd:	89 c2                	mov    %eax,%edx
   111df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111e2:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   111e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   111e8:	89 c2                	mov    %eax,%edx
   111ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111ed:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   111f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   111f4:	c1 e8 10             	shr    $0x10,%eax
   111f7:	89 c2                	mov    %eax,%edx
   111f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111fc:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   111ff:	8b 45 10             	mov    0x10(%ebp),%eax
   11202:	c1 e8 10             	shr    $0x10,%eax
   11205:	c1 e0 08             	shl    $0x8,%eax
   11208:	66 25 00 0f          	and    $0xf00,%ax
   1120c:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   11210:	89 c2                	mov    %eax,%edx
   11212:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11215:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   11219:	8b 45 0c             	mov    0xc(%ebp),%eax
   1121c:	c1 e8 18             	shr    $0x18,%eax
   1121f:	89 c2                	mov    %eax,%edx
   11221:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11224:	88 50 07             	mov    %dl,0x7(%eax)
}
   11227:	90                   	nop
   11228:	c9                   	leave  
   11229:	c3                   	ret    

0001122a <init_gdt>:

/**
 * 初始化GDT
 */
void init_gdt(void)
{
   1122a:	f3 0f 1e fb          	endbr32 
   1122e:	55                   	push   %ebp
   1122f:	89 e5                	mov    %esp,%ebp
   11231:	83 ec 10             	sub    $0x10,%esp
    // 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   11234:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1123b:	eb 19                	jmp    11256 <init_gdt+0x2c>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   1123d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11240:	c1 e0 03             	shl    $0x3,%eax
   11243:	6a 00                	push   $0x0
   11245:	6a 00                	push   $0x0
   11247:	6a 00                	push   $0x0
   11249:	50                   	push   %eax
   1124a:	e8 54 ff ff ff       	call   111a3 <segment_desc_set>
   1124f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   11252:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11256:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1125d:	7e de                	jle    1123d <init_gdt+0x13>
    }
    // 使用平摊模型（只用了两个段：代码段和数据段）
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1125f:	68 92 40 00 00       	push   $0x4092
   11264:	6a ff                	push   $0xffffffff
   11266:	6a 00                	push   $0x0
   11268:	6a 10                	push   $0x10
   1126a:	e8 34 ff ff ff       	call   111a3 <segment_desc_set>
   1126f:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);

    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   11272:	68 9a 40 00 00       	push   $0x409a
   11277:	6a ff                	push   $0xffffffff
   11279:	6a 00                	push   $0x0
   1127b:	6a 08                	push   $0x8
   1127d:	e8 21 ff ff ff       	call   111a3 <segment_desc_set>
   11282:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11285:	b8 a0 81 01 00       	mov    $0x181a0,%eax
   1128a:	68 00 08 00 00       	push   $0x800
   1128f:	50                   	push   %eax
   11290:	e8 cc fe ff ff       	call   11161 <lgdt>
   11295:	83 c4 08             	add    $0x8,%esp
}
   11298:	90                   	nop
   11299:	c9                   	leave  
   1129a:	c3                   	ret    

0001129b <gdt_alloc_desc>:
/**
 * @description: 寻找GDT中的空闲段，分配一个GDT推荐表符
 * @return {*}
 */
int gdt_alloc_desc(void)
{
   1129b:	f3 0f 1e fb          	endbr32 
   1129f:	55                   	push   %ebp
   112a0:	89 e5                	mov    %esp,%ebp
   112a2:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&mutex);
   112a5:	83 ec 0c             	sub    $0xc,%esp
   112a8:	68 a0 89 01 00       	push   $0x189a0
   112ad:	e8 f3 0c 00 00       	call   11fa5 <mutex_lock>
   112b2:	83 c4 10             	add    $0x10,%esp
    // 跳过第0项
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   112b5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   112bc:	eb 36                	jmp    112f4 <gdt_alloc_desc+0x59>
    {
        segment_desc_t *desc = gdt_table + i;
   112be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112c1:	c1 e0 03             	shl    $0x3,%eax
   112c4:	05 a0 81 01 00       	add    $0x181a0,%eax
   112c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0)
   112cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112cf:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   112d3:	66 85 c0             	test   %ax,%ax
   112d6:	75 18                	jne    112f0 <gdt_alloc_desc+0x55>
        {
            mutex_unlock(&mutex);
   112d8:	83 ec 0c             	sub    $0xc,%esp
   112db:	68 a0 89 01 00       	push   $0x189a0
   112e0:	e8 58 0d 00 00       	call   1203d <mutex_unlock>
   112e5:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   112e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112eb:	c1 e0 03             	shl    $0x3,%eax
   112ee:	eb 22                	jmp    11312 <gdt_alloc_desc+0x77>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   112f0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   112f4:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   112fb:	7e c1                	jle    112be <gdt_alloc_desc+0x23>
        }
    }
    mutex_unlock(&mutex);
   112fd:	83 ec 0c             	sub    $0xc,%esp
   11300:	68 a0 89 01 00       	push   $0x189a0
   11305:	e8 33 0d 00 00       	call   1203d <mutex_unlock>
   1130a:	83 c4 10             	add    $0x10,%esp
    return -1;
   1130d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11312:	c9                   	leave  
   11313:	c3                   	ret    

00011314 <gdt_free_sel>:

// 释放描述符
void gdt_free_sel (int sel) {
   11314:	f3 0f 1e fb          	endbr32 
   11318:	55                   	push   %ebp
   11319:	89 e5                	mov    %esp,%ebp
   1131b:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   1131e:	83 ec 0c             	sub    $0xc,%esp
   11321:	68 a0 89 01 00       	push   $0x189a0
   11326:	e8 7a 0c 00 00       	call   11fa5 <mutex_lock>
   1132b:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   1132e:	8b 45 08             	mov    0x8(%ebp),%eax
   11331:	c1 e8 03             	shr    $0x3,%eax
   11334:	66 c7 04 c5 a5 81 01 	movw   $0x0,0x181a5(,%eax,8)
   1133b:	00 00 00 
    mutex_unlock(&mutex);
   1133e:	83 ec 0c             	sub    $0xc,%esp
   11341:	68 a0 89 01 00       	push   $0x189a0
   11346:	e8 f2 0c 00 00       	call   1203d <mutex_unlock>
   1134b:	83 c4 10             	add    $0x10,%esp
}
   1134e:	90                   	nop
   1134f:	c9                   	leave  
   11350:	c3                   	ret    

00011351 <switch_to_tss>:

/**
 * 切换至TSS，即跳转实现任务切换
 */
void switch_to_tss(uint32_t tss_selector)
{
   11351:	f3 0f 1e fb          	endbr32 
   11355:	55                   	push   %ebp
   11356:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   11358:	6a 00                	push   $0x0
   1135a:	ff 75 08             	pushl  0x8(%ebp)
   1135d:	e8 27 fe ff ff       	call   11189 <far_jump>
   11362:	83 c4 08             	add    $0x8,%esp
}
   11365:	90                   	nop
   11366:	c9                   	leave  
   11367:	c3                   	ret    

00011368 <cpu_init>:

/**
 * CPU初始化
 */
void cpu_init(void)
{
   11368:	f3 0f 1e fb          	endbr32 
   1136c:	55                   	push   %ebp
   1136d:	89 e5                	mov    %esp,%ebp
   1136f:	83 ec 08             	sub    $0x8,%esp
    // 互斥锁初始化
    mutex_init(&mutex);
   11372:	83 ec 0c             	sub    $0xc,%esp
   11375:	68 a0 89 01 00       	push   $0x189a0
   1137a:	e8 f4 0b 00 00       	call   11f73 <mutex_init>
   1137f:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   11382:	e8 a3 fe ff ff       	call   1122a <init_gdt>
}
   11387:	90                   	nop
   11388:	c9                   	leave  
   11389:	c3                   	ret    

0001138a <cli>:
{
   1138a:	55                   	push   %ebp
   1138b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   1138d:	fa                   	cli    
}
   1138e:	90                   	nop
   1138f:	5d                   	pop    %ebp
   11390:	c3                   	ret    

00011391 <sti>:
{
   11391:	55                   	push   %ebp
   11392:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   11394:	fb                   	sti    
}
   11395:	90                   	nop
   11396:	5d                   	pop    %ebp
   11397:	c3                   	ret    

00011398 <inb>:
{
   11398:	55                   	push   %ebp
   11399:	89 e5                	mov    %esp,%ebp
   1139b:	83 ec 14             	sub    $0x14,%esp
   1139e:	8b 45 08             	mov    0x8(%ebp),%eax
   113a1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]"
   113a5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   113a9:	89 c2                	mov    %eax,%edx
   113ab:	ec                   	in     (%dx),%al
   113ac:	88 45 ff             	mov    %al,-0x1(%ebp)
    return res;
   113af:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   113b3:	c9                   	leave  
   113b4:	c3                   	ret    

000113b5 <outb>:
{
   113b5:	55                   	push   %ebp
   113b6:	89 e5                	mov    %esp,%ebp
   113b8:	83 ec 08             	sub    $0x8,%esp
   113bb:	8b 45 08             	mov    0x8(%ebp),%eax
   113be:	8b 55 0c             	mov    0xc(%ebp),%edx
   113c1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   113c5:	89 d0                	mov    %edx,%eax
   113c7:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   113ca:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   113ce:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   113d2:	ee                   	out    %al,(%dx)
}
   113d3:	90                   	nop
   113d4:	c9                   	leave  
   113d5:	c3                   	ret    

000113d6 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   113d6:	55                   	push   %ebp
   113d7:	89 e5                	mov    %esp,%ebp
   113d9:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   113dc:	8b 45 08             	mov    0x8(%ebp),%eax
   113df:	c1 e8 10             	shr    $0x10,%eax
   113e2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   113e6:	8b 45 08             	mov    0x8(%ebp),%eax
   113e9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   113ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   113f0:	83 e8 01             	sub    $0x1,%eax
   113f3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   113f7:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   113fb:	90                   	nop
   113fc:	c9                   	leave  
   113fd:	c3                   	ret    

000113fe <read_cr2>:
static inline uint32_t read_cr2() {
   113fe:	55                   	push   %ebp
   113ff:	89 e5                	mov    %esp,%ebp
   11401:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   11404:	0f 20 d0             	mov    %cr2,%eax
   11407:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   1140a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1140d:	c9                   	leave  
   1140e:	c3                   	ret    

0001140f <hlt>:
static inline void hlt(void) {
   1140f:	55                   	push   %ebp
   11410:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11412:	f4                   	hlt    
}
   11413:	90                   	nop
   11414:	5d                   	pop    %ebp
   11415:	c3                   	ret    

00011416 <read_eflags>:
/**
 * @description: 读 eflags 寄存器
 * @return {*}
 */
static inline uint32_t read_eflags (void) {
   11416:	55                   	push   %ebp
   11417:	89 e5                	mov    %esp,%ebp
   11419:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax":"=a"(eflags));
   1141c:	9c                   	pushf  
   1141d:	58                   	pop    %eax
   1141e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11421:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11424:	c9                   	leave  
   11425:	c3                   	ret    

00011426 <write_eflags>:
/**
 * @description: 写 eflags 寄存器
 * @return {*}
 * @param {uint32_t} eflags
 */
static inline void write_eflags (uint32_t eflags) {
   11426:	55                   	push   %ebp
   11427:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl"::"a"(eflags));
   11429:	8b 45 08             	mov    0x8(%ebp),%eax
   1142c:	50                   	push   %eax
   1142d:	9d                   	popf   
}
   1142e:	90                   	nop
   1142f:	5d                   	pop    %ebp
   11430:	c3                   	ret    

00011431 <dump_core_regs>:
#include "cpu/irq.h"


static gate_desc_t idt_table[IDT_TABLE_NR]; // 中断描述表

static void dump_core_regs (exception_frame_t * frame) {
   11431:	f3 0f 1e fb          	endbr32 
   11435:	55                   	push   %ebp
   11436:	89 e5                	mov    %esp,%ebp
   11438:	57                   	push   %edi
   11439:	56                   	push   %esi
   1143a:	53                   	push   %ebx
   1143b:	83 ec 2c             	sub    $0x2c,%esp
    // 打印CPU寄存器相关内容
    uint32_t esp, ss;
    if (frame->cs & 0x7) {
   1143e:	8b 45 08             	mov    0x8(%ebp),%eax
   11441:	8b 40 3c             	mov    0x3c(%eax),%eax
   11444:	83 e0 07             	and    $0x7,%eax
   11447:	85 c0                	test   %eax,%eax
   11449:	74 14                	je     1145f <dump_core_regs+0x2e>
        ss = frame->ds;
   1144b:	8b 45 08             	mov    0x8(%ebp),%eax
   1144e:	8b 40 0c             	mov    0xc(%eax),%eax
   11451:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   11454:	8b 45 08             	mov    0x8(%ebp),%eax
   11457:	8b 40 1c             	mov    0x1c(%eax),%eax
   1145a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1145d:	eb 12                	jmp    11471 <dump_core_regs+0x40>
    } else {
        ss = frame->ss3;
   1145f:	8b 45 08             	mov    0x8(%ebp),%eax
   11462:	8b 40 48             	mov    0x48(%eax),%eax
   11465:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   11468:	8b 45 08             	mov    0x8(%ebp),%eax
   1146b:	8b 40 44             	mov    0x44(%eax),%eax
   1146e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   11471:	8b 45 08             	mov    0x8(%ebp),%eax
   11474:	8b 50 34             	mov    0x34(%eax),%edx
   11477:	8b 45 08             	mov    0x8(%ebp),%eax
   1147a:	8b 40 30             	mov    0x30(%eax),%eax
   1147d:	83 ec 04             	sub    $0x4,%esp
   11480:	52                   	push   %edx
   11481:	50                   	push   %eax
   11482:	68 cc 2f 01 00       	push   $0x12fcc
   11487:	e8 5c 18 00 00       	call   12ce8 <log_printf>
   1148c:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   1148f:	8b 45 08             	mov    0x8(%ebp),%eax
   11492:	8b 30                	mov    (%eax),%esi
   11494:	8b 45 08             	mov    0x8(%ebp),%eax
   11497:	8b 58 04             	mov    0x4(%eax),%ebx
   1149a:	8b 45 08             	mov    0x8(%ebp),%eax
   1149d:	8b 48 08             	mov    0x8(%eax),%ecx
   114a0:	8b 45 08             	mov    0x8(%ebp),%eax
   114a3:	8b 50 0c             	mov    0xc(%eax),%edx
   114a6:	8b 45 08             	mov    0x8(%ebp),%eax
   114a9:	8b 40 3c             	mov    0x3c(%eax),%eax
   114ac:	83 ec 04             	sub    $0x4,%esp
   114af:	56                   	push   %esi
   114b0:	53                   	push   %ebx
   114b1:	ff 75 e0             	pushl  -0x20(%ebp)
   114b4:	51                   	push   %ecx
   114b5:	52                   	push   %edx
   114b6:	50                   	push   %eax
   114b7:	68 e8 2f 01 00       	push   $0x12fe8
   114bc:	e8 27 18 00 00       	call   12ce8 <log_printf>
   114c1:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs
    );
     log_printf("EAX:0x%x\n"
   114c4:	8b 45 08             	mov    0x8(%ebp),%eax
   114c7:	8b 40 18             	mov    0x18(%eax),%eax
   114ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   114cd:	8b 45 08             	mov    0x8(%ebp),%eax
   114d0:	8b 78 14             	mov    0x14(%eax),%edi
   114d3:	8b 45 08             	mov    0x8(%ebp),%eax
   114d6:	8b 70 10             	mov    0x10(%eax),%esi
   114d9:	8b 45 08             	mov    0x8(%ebp),%eax
   114dc:	8b 58 24             	mov    0x24(%eax),%ebx
   114df:	8b 45 08             	mov    0x8(%ebp),%eax
   114e2:	8b 48 28             	mov    0x28(%eax),%ecx
   114e5:	8b 45 08             	mov    0x8(%ebp),%eax
   114e8:	8b 50 20             	mov    0x20(%eax),%edx
   114eb:	8b 45 08             	mov    0x8(%ebp),%eax
   114ee:	8b 40 2c             	mov    0x2c(%eax),%eax
   114f1:	83 ec 0c             	sub    $0xc,%esp
   114f4:	ff 75 e4             	pushl  -0x1c(%ebp)
   114f7:	ff 75 d4             	pushl  -0x2c(%ebp)
   114fa:	57                   	push   %edi
   114fb:	56                   	push   %esi
   114fc:	53                   	push   %ebx
   114fd:	51                   	push   %ecx
   114fe:	52                   	push   %edx
   114ff:	50                   	push   %eax
   11500:	68 10 30 01 00       	push   $0x13010
   11505:	e8 de 17 00 00       	call   12ce8 <log_printf>
   1150a:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   1150d:	8b 45 08             	mov    0x8(%ebp),%eax
   11510:	8b 50 40             	mov    0x40(%eax),%edx
   11513:	8b 45 08             	mov    0x8(%ebp),%eax
   11516:	8b 40 38             	mov    0x38(%eax),%eax
   11519:	83 ec 04             	sub    $0x4,%esp
   1151c:	52                   	push   %edx
   1151d:	50                   	push   %eax
   1151e:	68 59 30 01 00       	push   $0x13059
   11523:	e8 c0 17 00 00       	call   12ce8 <log_printf>
   11528:	83 c4 10             	add    $0x10,%esp
}
   1152b:	90                   	nop
   1152c:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1152f:	5b                   	pop    %ebx
   11530:	5e                   	pop    %esi
   11531:	5f                   	pop    %edi
   11532:	5d                   	pop    %ebp
   11533:	c3                   	ret    

00011534 <gate_desc_set>:

/**
 * 设置门描述符 IDT
 */
void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   11534:	f3 0f 1e fb          	endbr32 
   11538:	55                   	push   %ebp
   11539:	89 e5                	mov    %esp,%ebp
   1153b:	83 ec 08             	sub    $0x8,%esp
   1153e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11541:	8b 45 14             	mov    0x14(%ebp),%eax
   11544:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11548:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff;
   1154c:	8b 45 10             	mov    0x10(%ebp),%eax
   1154f:	89 c2                	mov    %eax,%edx
   11551:	8b 45 08             	mov    0x8(%ebp),%eax
   11554:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   11557:	8b 45 08             	mov    0x8(%ebp),%eax
   1155a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1155e:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   11562:	8b 45 08             	mov    0x8(%ebp),%eax
   11565:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   11569:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff;
   1156d:	8b 45 10             	mov    0x10(%ebp),%eax
   11570:	c1 e8 10             	shr    $0x10,%eax
   11573:	89 c2                	mov    %eax,%edx
   11575:	8b 45 08             	mov    0x8(%ebp),%eax
   11578:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1157c:	90                   	nop
   1157d:	c9                   	leave  
   1157e:	c3                   	ret    

0001157f <do_default_handler>:


static void do_default_handler (exception_frame_t * frame, const char * message) {
   1157f:	f3 0f 1e fb          	endbr32 
   11583:	55                   	push   %ebp
   11584:	89 e5                	mov    %esp,%ebp
   11586:	83 ec 08             	sub    $0x8,%esp
    log_printf("-------------------------");
   11589:	83 ec 0c             	sub    $0xc,%esp
   1158c:	68 6f 30 01 00       	push   $0x1306f
   11591:	e8 52 17 00 00       	call   12ce8 <log_printf>
   11596:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s", message);
   11599:	83 ec 08             	sub    $0x8,%esp
   1159c:	ff 75 0c             	pushl  0xc(%ebp)
   1159f:	68 89 30 01 00       	push   $0x13089
   115a4:	e8 3f 17 00 00       	call   12ce8 <log_printf>
   115a9:	83 c4 10             	add    $0x10,%esp

    // 内联汇编 hlt 让cpu停止运行
    for (;;) {hlt();}
   115ac:	e8 5e fe ff ff       	call   1140f <hlt>
   115b1:	eb f9                	jmp    115ac <do_default_handler+0x2d>

000115b3 <do_handler_unknown>:
}

void do_handler_unknown (exception_frame_t * frame) {
   115b3:	f3 0f 1e fb          	endbr32 
   115b7:	55                   	push   %ebp
   115b8:	89 e5                	mov    %esp,%ebp
   115ba:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Unknown exception.");
   115bd:	83 ec 08             	sub    $0x8,%esp
   115c0:	68 a3 30 01 00       	push   $0x130a3
   115c5:	ff 75 08             	pushl  0x8(%ebp)
   115c8:	e8 b2 ff ff ff       	call   1157f <do_default_handler>
   115cd:	83 c4 10             	add    $0x10,%esp
}
   115d0:	90                   	nop
   115d1:	c9                   	leave  
   115d2:	c3                   	ret    

000115d3 <do_handler_divider>:

void do_handler_divider(exception_frame_t * frame) {
   115d3:	f3 0f 1e fb          	endbr32 
   115d7:	55                   	push   %ebp
   115d8:	89 e5                	mov    %esp,%ebp
   115da:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Divider Error.");
   115dd:	83 ec 08             	sub    $0x8,%esp
   115e0:	68 b6 30 01 00       	push   $0x130b6
   115e5:	ff 75 08             	pushl  0x8(%ebp)
   115e8:	e8 92 ff ff ff       	call   1157f <do_default_handler>
   115ed:	83 c4 10             	add    $0x10,%esp
}
   115f0:	90                   	nop
   115f1:	c9                   	leave  
   115f2:	c3                   	ret    

000115f3 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t * frame) {
   115f3:	f3 0f 1e fb          	endbr32 
   115f7:	55                   	push   %ebp
   115f8:	89 e5                	mov    %esp,%ebp
   115fa:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   115fd:	83 ec 08             	sub    $0x8,%esp
   11600:	68 c5 30 01 00       	push   $0x130c5
   11605:	ff 75 08             	pushl  0x8(%ebp)
   11608:	e8 72 ff ff ff       	call   1157f <do_default_handler>
   1160d:	83 c4 10             	add    $0x10,%esp
}
   11610:	90                   	nop
   11611:	c9                   	leave  
   11612:	c3                   	ret    

00011613 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t * frame) {
   11613:	f3 0f 1e fb          	endbr32 
   11617:	55                   	push   %ebp
   11618:	89 e5                	mov    %esp,%ebp
   1161a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   1161d:	83 ec 08             	sub    $0x8,%esp
   11620:	68 d5 30 01 00       	push   $0x130d5
   11625:	ff 75 08             	pushl  0x8(%ebp)
   11628:	e8 52 ff ff ff       	call   1157f <do_default_handler>
   1162d:	83 c4 10             	add    $0x10,%esp
}
   11630:	90                   	nop
   11631:	c9                   	leave  
   11632:	c3                   	ret    

00011633 <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t * frame) {
   11633:	f3 0f 1e fb          	endbr32 
   11637:	55                   	push   %ebp
   11638:	89 e5                	mov    %esp,%ebp
   1163a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   1163d:	83 ec 08             	sub    $0x8,%esp
   11640:	68 e4 30 01 00       	push   $0x130e4
   11645:	ff 75 08             	pushl  0x8(%ebp)
   11648:	e8 32 ff ff ff       	call   1157f <do_default_handler>
   1164d:	83 c4 10             	add    $0x10,%esp
}
   11650:	90                   	nop
   11651:	c9                   	leave  
   11652:	c3                   	ret    

00011653 <do_handler_overflow>:

void do_handler_overflow(exception_frame_t * frame) {
   11653:	f3 0f 1e fb          	endbr32 
   11657:	55                   	push   %ebp
   11658:	89 e5                	mov    %esp,%ebp
   1165a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   1165d:	83 ec 08             	sub    $0x8,%esp
   11660:	68 f0 30 01 00       	push   $0x130f0
   11665:	ff 75 08             	pushl  0x8(%ebp)
   11668:	e8 12 ff ff ff       	call   1157f <do_default_handler>
   1166d:	83 c4 10             	add    $0x10,%esp
}
   11670:	90                   	nop
   11671:	c9                   	leave  
   11672:	c3                   	ret    

00011673 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t * frame) {
   11673:	f3 0f 1e fb          	endbr32 
   11677:	55                   	push   %ebp
   11678:	89 e5                	mov    %esp,%ebp
   1167a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   1167d:	83 ec 08             	sub    $0x8,%esp
   11680:	68 fa 30 01 00       	push   $0x130fa
   11685:	ff 75 08             	pushl  0x8(%ebp)
   11688:	e8 f2 fe ff ff       	call   1157f <do_default_handler>
   1168d:	83 c4 10             	add    $0x10,%esp
}
   11690:	90                   	nop
   11691:	c9                   	leave  
   11692:	c3                   	ret    

00011693 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t * frame) {
   11693:	f3 0f 1e fb          	endbr32 
   11697:	55                   	push   %ebp
   11698:	89 e5                	mov    %esp,%ebp
   1169a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   1169d:	83 ec 08             	sub    $0x8,%esp
   116a0:	68 10 31 01 00       	push   $0x13110
   116a5:	ff 75 08             	pushl  0x8(%ebp)
   116a8:	e8 d2 fe ff ff       	call   1157f <do_default_handler>
   116ad:	83 c4 10             	add    $0x10,%esp
}
   116b0:	90                   	nop
   116b1:	c9                   	leave  
   116b2:	c3                   	ret    

000116b3 <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t * frame) {
   116b3:	f3 0f 1e fb          	endbr32 
   116b7:	55                   	push   %ebp
   116b8:	89 e5                	mov    %esp,%ebp
   116ba:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   116bd:	83 ec 08             	sub    $0x8,%esp
   116c0:	68 20 31 01 00       	push   $0x13120
   116c5:	ff 75 08             	pushl  0x8(%ebp)
   116c8:	e8 b2 fe ff ff       	call   1157f <do_default_handler>
   116cd:	83 c4 10             	add    $0x10,%esp
}
   116d0:	90                   	nop
   116d1:	c9                   	leave  
   116d2:	c3                   	ret    

000116d3 <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t * frame) {
   116d3:	f3 0f 1e fb          	endbr32 
   116d7:	55                   	push   %ebp
   116d8:	89 e5                	mov    %esp,%ebp
   116da:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   116dd:	83 ec 08             	sub    $0x8,%esp
   116e0:	68 36 31 01 00       	push   $0x13136
   116e5:	ff 75 08             	pushl  0x8(%ebp)
   116e8:	e8 92 fe ff ff       	call   1157f <do_default_handler>
   116ed:	83 c4 10             	add    $0x10,%esp
}
   116f0:	90                   	nop
   116f1:	c9                   	leave  
   116f2:	c3                   	ret    

000116f3 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   116f3:	f3 0f 1e fb          	endbr32 
   116f7:	55                   	push   %ebp
   116f8:	89 e5                	mov    %esp,%ebp
   116fa:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   116fd:	83 ec 08             	sub    $0x8,%esp
   11700:	68 44 31 01 00       	push   $0x13144
   11705:	ff 75 08             	pushl  0x8(%ebp)
   11708:	e8 72 fe ff ff       	call   1157f <do_default_handler>
   1170d:	83 c4 10             	add    $0x10,%esp
}
   11710:	90                   	nop
   11711:	c9                   	leave  
   11712:	c3                   	ret    

00011713 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   11713:	f3 0f 1e fb          	endbr32 
   11717:	55                   	push   %ebp
   11718:	89 e5                	mov    %esp,%ebp
   1171a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   1171d:	83 ec 08             	sub    $0x8,%esp
   11720:	68 50 31 01 00       	push   $0x13150
   11725:	ff 75 08             	pushl  0x8(%ebp)
   11728:	e8 52 fe ff ff       	call   1157f <do_default_handler>
   1172d:	83 c4 10             	add    $0x10,%esp
}
   11730:	90                   	nop
   11731:	c9                   	leave  
   11732:	c3                   	ret    

00011733 <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   11733:	f3 0f 1e fb          	endbr32 
   11737:	55                   	push   %ebp
   11738:	89 e5                	mov    %esp,%ebp
   1173a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   1173d:	83 ec 08             	sub    $0x8,%esp
   11740:	68 65 31 01 00       	push   $0x13165
   11745:	ff 75 08             	pushl  0x8(%ebp)
   11748:	e8 32 fe ff ff       	call   1157f <do_default_handler>
   1174d:	83 c4 10             	add    $0x10,%esp
}
   11750:	90                   	nop
   11751:	c9                   	leave  
   11752:	c3                   	ret    

00011753 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   11753:	f3 0f 1e fb          	endbr32 
   11757:	55                   	push   %ebp
   11758:	89 e5                	mov    %esp,%ebp
   1175a:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1175d:	83 ec 0c             	sub    $0xc,%esp
   11760:	68 7c 31 01 00       	push   $0x1317c
   11765:	e8 7e 15 00 00       	call   12ce8 <log_printf>
   1176a:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   1176d:	83 ec 0c             	sub    $0xc,%esp
   11770:	68 a0 31 01 00       	push   $0x131a0
   11775:	e8 6e 15 00 00       	call   12ce8 <log_printf>
   1177a:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   1177d:	8b 45 08             	mov    0x8(%ebp),%eax
   11780:	8b 40 34             	mov    0x34(%eax),%eax
   11783:	83 e0 01             	and    $0x1,%eax
   11786:	85 c0                	test   %eax,%eax
   11788:	74 12                	je     1179c <do_handler_general_protection+0x49>
        log_printf("the exception occurred during delivery of an "
   1178a:	83 ec 0c             	sub    $0xc,%esp
   1178d:	68 cc 31 01 00       	push   $0x131cc
   11792:	e8 51 15 00 00       	call   12ce8 <log_printf>
   11797:	83 c4 10             	add    $0x10,%esp
   1179a:	eb 10                	jmp    117ac <do_handler_general_protection+0x59>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   1179c:	83 ec 0c             	sub    $0xc,%esp
   1179f:	68 48 32 01 00       	push   $0x13248
   117a4:	e8 3f 15 00 00       	call   12ce8 <log_printf>
   117a9:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   117ac:	8b 45 08             	mov    0x8(%ebp),%eax
   117af:	8b 40 34             	mov    0x34(%eax),%eax
   117b2:	83 e0 02             	and    $0x2,%eax
   117b5:	85 c0                	test   %eax,%eax
   117b7:	74 12                	je     117cb <do_handler_general_protection+0x78>
        log_printf("the index portion of the error code refers "
   117b9:	83 ec 0c             	sub    $0xc,%esp
   117bc:	68 a0 32 01 00       	push   $0x132a0
   117c1:	e8 22 15 00 00       	call   12ce8 <log_printf>
   117c6:	83 c4 10             	add    $0x10,%esp
   117c9:	eb 10                	jmp    117db <do_handler_general_protection+0x88>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   117cb:	83 ec 0c             	sub    $0xc,%esp
   117ce:	68 ec 32 01 00       	push   $0x132ec
   117d3:	e8 10 15 00 00       	call   12ce8 <log_printf>
   117d8:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   117db:	8b 45 08             	mov    0x8(%ebp),%eax
   117de:	8b 40 34             	mov    0x34(%eax),%eax
   117e1:	25 f8 ff 00 00       	and    $0xfff8,%eax
   117e6:	83 ec 08             	sub    $0x8,%esp
   117e9:	50                   	push   %eax
   117ea:	68 18 33 01 00       	push   $0x13318
   117ef:	e8 f4 14 00 00       	call   12ce8 <log_printf>
   117f4:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   117f7:	83 ec 0c             	sub    $0xc,%esp
   117fa:	ff 75 08             	pushl  0x8(%ebp)
   117fd:	e8 2f fc ff ff       	call   11431 <dump_core_regs>
   11802:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   11805:	e8 05 fc ff ff       	call   1140f <hlt>
   1180a:	eb f9                	jmp    11805 <do_handler_general_protection+0xb2>

0001180c <do_handler_page_fault>:
    }	
}

void do_handler_page_fault(exception_frame_t * frame) {
   1180c:	f3 0f 1e fb          	endbr32 
   11810:	55                   	push   %ebp
   11811:	89 e5                	mov    %esp,%ebp
   11813:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11816:	83 ec 0c             	sub    $0xc,%esp
   11819:	68 7c 31 01 00       	push   $0x1317c
   1181e:	e8 c5 14 00 00       	call   12ce8 <log_printf>
   11823:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   11826:	83 ec 0c             	sub    $0xc,%esp
   11829:	68 2c 33 01 00       	push   $0x1332c
   1182e:	e8 b5 14 00 00       	call   12ce8 <log_printf>
   11833:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   11836:	8b 45 08             	mov    0x8(%ebp),%eax
   11839:	8b 40 34             	mov    0x34(%eax),%eax
   1183c:	83 e0 01             	and    $0x1,%eax
   1183f:	85 c0                	test   %eax,%eax
   11841:	74 18                	je     1185b <do_handler_page_fault+0x4f>
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   11843:	e8 b6 fb ff ff       	call   113fe <read_cr2>
   11848:	83 ec 08             	sub    $0x8,%esp
   1184b:	50                   	push   %eax
   1184c:	68 50 33 01 00       	push   $0x13350
   11851:	e8 92 14 00 00       	call   12ce8 <log_printf>
   11856:	83 c4 10             	add    $0x10,%esp
   11859:	eb 16                	jmp    11871 <do_handler_page_fault+0x65>
    } else {
         log_printf("\tPage doesn't present 0x%x", read_cr2());
   1185b:	e8 9e fb ff ff       	call   113fe <read_cr2>
   11860:	83 ec 08             	sub    $0x8,%esp
   11863:	50                   	push   %eax
   11864:	68 78 33 01 00       	push   $0x13378
   11869:	e8 7a 14 00 00       	call   12ce8 <log_printf>
   1186e:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   11871:	8b 45 08             	mov    0x8(%ebp),%eax
   11874:	8b 40 34             	mov    0x34(%eax),%eax
   11877:	83 e0 02             	and    $0x2,%eax
   1187a:	85 c0                	test   %eax,%eax
   1187c:	74 12                	je     11890 <do_handler_page_fault+0x84>
        log_printf("\tThe access causing the fault was a read.");
   1187e:	83 ec 0c             	sub    $0xc,%esp
   11881:	68 94 33 01 00       	push   $0x13394
   11886:	e8 5d 14 00 00       	call   12ce8 <log_printf>
   1188b:	83 c4 10             	add    $0x10,%esp
   1188e:	eb 10                	jmp    118a0 <do_handler_page_fault+0x94>
    } else {
        log_printf("\tThe access causing the fault was a write.");
   11890:	83 ec 0c             	sub    $0xc,%esp
   11893:	68 c0 33 01 00       	push   $0x133c0
   11898:	e8 4b 14 00 00       	call   12ce8 <log_printf>
   1189d:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   118a0:	8b 45 08             	mov    0x8(%ebp),%eax
   118a3:	8b 40 34             	mov    0x34(%eax),%eax
   118a6:	83 e0 02             	and    $0x2,%eax
   118a9:	85 c0                	test   %eax,%eax
   118ab:	74 12                	je     118bf <do_handler_page_fault+0xb3>
        log_printf("\tA supervisor-mode access caused the fault.");
   118ad:	83 ec 0c             	sub    $0xc,%esp
   118b0:	68 ec 33 01 00       	push   $0x133ec
   118b5:	e8 2e 14 00 00       	call   12ce8 <log_printf>
   118ba:	83 c4 10             	add    $0x10,%esp
   118bd:	eb 10                	jmp    118cf <do_handler_page_fault+0xc3>
    } else {
        log_printf("\tA user-mode access caused the fault.");
   118bf:	83 ec 0c             	sub    $0xc,%esp
   118c2:	68 18 34 01 00       	push   $0x13418
   118c7:	e8 1c 14 00 00       	call   12ce8 <log_printf>
   118cc:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   118cf:	83 ec 0c             	sub    $0xc,%esp
   118d2:	ff 75 08             	pushl  0x8(%ebp)
   118d5:	e8 57 fb ff ff       	call   11431 <dump_core_regs>
   118da:	83 c4 10             	add    $0x10,%esp
    while (1) {
        hlt();
   118dd:	e8 2d fb ff ff       	call   1140f <hlt>
   118e2:	eb f9                	jmp    118dd <do_handler_page_fault+0xd1>

000118e4 <do_handler_fpu_error>:
    }
}

void do_handler_fpu_error(exception_frame_t * frame) {
   118e4:	f3 0f 1e fb          	endbr32 
   118e8:	55                   	push   %ebp
   118e9:	89 e5                	mov    %esp,%ebp
   118eb:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   118ee:	83 ec 08             	sub    $0x8,%esp
   118f1:	68 3e 34 01 00       	push   $0x1343e
   118f6:	ff 75 08             	pushl  0x8(%ebp)
   118f9:	e8 81 fc ff ff       	call   1157f <do_default_handler>
   118fe:	83 c4 10             	add    $0x10,%esp
}
   11901:	90                   	nop
   11902:	c9                   	leave  
   11903:	c3                   	ret    

00011904 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   11904:	f3 0f 1e fb          	endbr32 
   11908:	55                   	push   %ebp
   11909:	89 e5                	mov    %esp,%ebp
   1190b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   1190e:	83 ec 08             	sub    $0x8,%esp
   11911:	68 5c 34 01 00       	push   $0x1345c
   11916:	ff 75 08             	pushl  0x8(%ebp)
   11919:	e8 61 fc ff ff       	call   1157f <do_default_handler>
   1191e:	83 c4 10             	add    $0x10,%esp
}
   11921:	90                   	nop
   11922:	c9                   	leave  
   11923:	c3                   	ret    

00011924 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   11924:	f3 0f 1e fb          	endbr32 
   11928:	55                   	push   %ebp
   11929:	89 e5                	mov    %esp,%ebp
   1192b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   1192e:	83 ec 08             	sub    $0x8,%esp
   11931:	68 6d 34 01 00       	push   $0x1346d
   11936:	ff 75 08             	pushl  0x8(%ebp)
   11939:	e8 41 fc ff ff       	call   1157f <do_default_handler>
   1193e:	83 c4 10             	add    $0x10,%esp
}
   11941:	90                   	nop
   11942:	c9                   	leave  
   11943:	c3                   	ret    

00011944 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   11944:	f3 0f 1e fb          	endbr32 
   11948:	55                   	push   %ebp
   11949:	89 e5                	mov    %esp,%ebp
   1194b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   1194e:	83 ec 08             	sub    $0x8,%esp
   11951:	68 7c 34 01 00       	push   $0x1347c
   11956:	ff 75 08             	pushl  0x8(%ebp)
   11959:	e8 21 fc ff ff       	call   1157f <do_default_handler>
   1195e:	83 c4 10             	add    $0x10,%esp
}
   11961:	90                   	nop
   11962:	c9                   	leave  
   11963:	c3                   	ret    

00011964 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   11964:	f3 0f 1e fb          	endbr32 
   11968:	55                   	push   %ebp
   11969:	89 e5                	mov    %esp,%ebp
   1196b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   1196e:	83 ec 08             	sub    $0x8,%esp
   11971:	68 9b 34 01 00       	push   $0x1349b
   11976:	ff 75 08             	pushl  0x8(%ebp)
   11979:	e8 01 fc ff ff       	call   1157f <do_default_handler>
   1197e:	83 c4 10             	add    $0x10,%esp
}
   11981:	90                   	nop
   11982:	c9                   	leave  
   11983:	c3                   	ret    

00011984 <init_pic>:
static void init_pic(void) {
   11984:	f3 0f 1e fb          	endbr32 
   11988:	55                   	push   %ebp
   11989:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1198b:	6a 11                	push   $0x11
   1198d:	6a 20                	push   $0x20
   1198f:	e8 21 fa ff ff       	call   113b5 <outb>
   11994:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   11997:	6a 20                	push   $0x20
   11999:	6a 21                	push   $0x21
   1199b:	e8 15 fa ff ff       	call   113b5 <outb>
   119a0:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   119a3:	6a 04                	push   $0x4
   119a5:	6a 21                	push   $0x21
   119a7:	e8 09 fa ff ff       	call   113b5 <outb>
   119ac:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   119af:	6a 01                	push   $0x1
   119b1:	6a 21                	push   $0x21
   119b3:	e8 fd f9 ff ff       	call   113b5 <outb>
   119b8:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   119bb:	6a 11                	push   $0x11
   119bd:	68 a0 00 00 00       	push   $0xa0
   119c2:	e8 ee f9 ff ff       	call   113b5 <outb>
   119c7:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   119ca:	6a 28                	push   $0x28
   119cc:	68 a1 00 00 00       	push   $0xa1
   119d1:	e8 df f9 ff ff       	call   113b5 <outb>
   119d6:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   119d9:	6a 02                	push   $0x2
   119db:	68 a1 00 00 00       	push   $0xa1
   119e0:	e8 d0 f9 ff ff       	call   113b5 <outb>
   119e5:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   119e8:	6a 01                	push   $0x1
   119ea:	68 a1 00 00 00       	push   $0xa1
   119ef:	e8 c1 f9 ff ff       	call   113b5 <outb>
   119f4:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   119f7:	68 fb 00 00 00       	push   $0xfb
   119fc:	6a 21                	push   $0x21
   119fe:	e8 b2 f9 ff ff       	call   113b5 <outb>
   11a03:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   11a06:	68 ff 00 00 00       	push   $0xff
   11a0b:	68 a1 00 00 00       	push   $0xa1
   11a10:	e8 a0 f9 ff ff       	call   113b5 <outb>
   11a15:	83 c4 08             	add    $0x8,%esp
}
   11a18:	90                   	nop
   11a19:	c9                   	leave  
   11a1a:	c3                   	ret    

00011a1b <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   11a1b:	f3 0f 1e fb          	endbr32 
   11a1f:	55                   	push   %ebp
   11a20:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11a22:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    // 从片也可能需要发送EOI
    if (irq_num >= 8) {
   11a26:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11a2a:	7e 0f                	jle    11a3b <pic_send_eoi+0x20>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11a2c:	6a 20                	push   $0x20
   11a2e:	68 a0 00 00 00       	push   $0xa0
   11a33:	e8 7d f9 ff ff       	call   113b5 <outb>
   11a38:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11a3b:	6a 20                	push   $0x20
   11a3d:	6a 20                	push   $0x20
   11a3f:	e8 71 f9 ff ff       	call   113b5 <outb>
   11a44:	83 c4 08             	add    $0x8,%esp
}
   11a47:	90                   	nop
   11a48:	c9                   	leave  
   11a49:	c3                   	ret    

00011a4a <irq_init>:

/**
 * @brief 中断和异常初始化
 */
void irq_init(void)
{
   11a4a:	f3 0f 1e fb          	endbr32 
   11a4e:	55                   	push   %ebp
   11a4f:	89 e5                	mov    %esp,%ebp
   11a51:	83 ec 18             	sub    $0x18,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++)
   11a54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11a5b:	eb 25                	jmp    11a82 <irq_init+0x38>
    {
        // 将所有中断和异常的处理程序都设置成了默认处理程序 exception_handler_unknown
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown,
   11a5d:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   11a62:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a65:	c1 e0 03             	shl    $0x3,%eax
   11a68:	05 c0 89 01 00       	add    $0x189c0,%eax
   11a6d:	68 00 8e 00 00       	push   $0x8e00
   11a72:	52                   	push   %edx
   11a73:	6a 08                	push   $0x8
   11a75:	50                   	push   %eax
   11a76:	e8 b9 fa ff ff       	call   11534 <gate_desc_set>
   11a7b:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++)
   11a7e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11a82:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11a86:	76 d5                	jbe    11a5d <irq_init+0x13>
                      GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
    }
    // 设置异常处理接口
    // exception_handler_divider 是一个汇编语言的函数，它负责处理 #DE 异常（除法错误异常）
	irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   11a88:	83 ec 08             	sub    $0x8,%esp
   11a8b:	68 4a 00 01 00       	push   $0x1004a
   11a90:	6a 00                	push   $0x0
   11a92:	e8 65 01 00 00       	call   11bfc <irq_install>
   11a97:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   11a9a:	83 ec 08             	sub    $0x8,%esp
   11a9d:	68 69 00 01 00       	push   $0x10069
   11aa2:	6a 01                	push   $0x1
   11aa4:	e8 53 01 00 00       	call   11bfc <irq_install>
   11aa9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   11aac:	83 ec 08             	sub    $0x8,%esp
   11aaf:	68 88 00 01 00       	push   $0x10088
   11ab4:	6a 02                	push   $0x2
   11ab6:	e8 41 01 00 00       	call   11bfc <irq_install>
   11abb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   11abe:	83 ec 08             	sub    $0x8,%esp
   11ac1:	68 a7 00 01 00       	push   $0x100a7
   11ac6:	6a 03                	push   $0x3
   11ac8:	e8 2f 01 00 00       	call   11bfc <irq_install>
   11acd:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   11ad0:	83 ec 08             	sub    $0x8,%esp
   11ad3:	68 c6 00 01 00       	push   $0x100c6
   11ad8:	6a 04                	push   $0x4
   11ada:	e8 1d 01 00 00       	call   11bfc <irq_install>
   11adf:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   11ae2:	83 ec 08             	sub    $0x8,%esp
   11ae5:	68 e5 00 01 00       	push   $0x100e5
   11aea:	6a 05                	push   $0x5
   11aec:	e8 0b 01 00 00       	call   11bfc <irq_install>
   11af1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   11af4:	83 ec 08             	sub    $0x8,%esp
   11af7:	68 04 01 01 00       	push   $0x10104
   11afc:	6a 06                	push   $0x6
   11afe:	e8 f9 00 00 00       	call   11bfc <irq_install>
   11b03:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   11b06:	83 ec 08             	sub    $0x8,%esp
   11b09:	68 23 01 01 00       	push   $0x10123
   11b0e:	6a 07                	push   $0x7
   11b10:	e8 e7 00 00 00       	call   11bfc <irq_install>
   11b15:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   11b18:	83 ec 08             	sub    $0x8,%esp
   11b1b:	68 42 01 01 00       	push   $0x10142
   11b20:	6a 08                	push   $0x8
   11b22:	e8 d5 00 00 00       	call   11bfc <irq_install>
   11b27:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   11b2a:	83 ec 08             	sub    $0x8,%esp
   11b2d:	68 5f 01 01 00       	push   $0x1015f
   11b32:	6a 0a                	push   $0xa
   11b34:	e8 c3 00 00 00       	call   11bfc <irq_install>
   11b39:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   11b3c:	83 ec 08             	sub    $0x8,%esp
   11b3f:	68 7c 01 01 00       	push   $0x1017c
   11b44:	6a 0b                	push   $0xb
   11b46:	e8 b1 00 00 00       	call   11bfc <irq_install>
   11b4b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   11b4e:	83 ec 08             	sub    $0x8,%esp
   11b51:	68 99 01 01 00       	push   $0x10199
   11b56:	6a 0c                	push   $0xc
   11b58:	e8 9f 00 00 00       	call   11bfc <irq_install>
   11b5d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   11b60:	83 ec 08             	sub    $0x8,%esp
   11b63:	68 b6 01 01 00       	push   $0x101b6
   11b68:	6a 0d                	push   $0xd
   11b6a:	e8 8d 00 00 00       	call   11bfc <irq_install>
   11b6f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   11b72:	83 ec 08             	sub    $0x8,%esp
   11b75:	68 d3 01 01 00       	push   $0x101d3
   11b7a:	6a 0e                	push   $0xe
   11b7c:	e8 7b 00 00 00       	call   11bfc <irq_install>
   11b81:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   11b84:	83 ec 08             	sub    $0x8,%esp
   11b87:	68 f0 01 01 00       	push   $0x101f0
   11b8c:	6a 10                	push   $0x10
   11b8e:	e8 69 00 00 00       	call   11bfc <irq_install>
   11b93:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   11b96:	83 ec 08             	sub    $0x8,%esp
   11b99:	68 0f 02 01 00       	push   $0x1020f
   11b9e:	6a 11                	push   $0x11
   11ba0:	e8 57 00 00 00       	call   11bfc <irq_install>
   11ba5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   11ba8:	83 ec 08             	sub    $0x8,%esp
   11bab:	68 2c 02 01 00       	push   $0x1022c
   11bb0:	6a 12                	push   $0x12
   11bb2:	e8 45 00 00 00       	call   11bfc <irq_install>
   11bb7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   11bba:	83 ec 08             	sub    $0x8,%esp
   11bbd:	68 4b 02 01 00       	push   $0x1024b
   11bc2:	6a 13                	push   $0x13
   11bc4:	e8 33 00 00 00       	call   11bfc <irq_install>
   11bc9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   11bcc:	83 ec 08             	sub    $0x8,%esp
   11bcf:	68 6a 02 01 00       	push   $0x1026a
   11bd4:	6a 14                	push   $0x14
   11bd6:	e8 21 00 00 00       	call   11bfc <irq_install>
   11bdb:	83 c4 10             	add    $0x10,%esp


    lidt((uint32_t)idt_table, sizeof(idt_table));
   11bde:	b8 c0 89 01 00       	mov    $0x189c0,%eax
   11be3:	83 ec 08             	sub    $0x8,%esp
   11be6:	68 00 04 00 00       	push   $0x400
   11beb:	50                   	push   %eax
   11bec:	e8 e5 f7 ff ff       	call   113d6 <lidt>
   11bf1:	83 c4 10             	add    $0x10,%esp
    // 初始化pic 控制器
	init_pic();
   11bf4:	e8 8b fd ff ff       	call   11984 <init_pic>
}
   11bf9:	90                   	nop
   11bfa:	c9                   	leave  
   11bfb:	c3                   	ret    

00011bfc <irq_install>:
/**
 * @brief 安装中断或异常处理程序
 */
int irq_install(int irq_num, irq_handler_t handler) {
   11bfc:	f3 0f 1e fb          	endbr32 
   11c00:	55                   	push   %ebp
   11c01:	89 e5                	mov    %esp,%ebp
	if (irq_num >= IDT_TABLE_NR) {
   11c03:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11c07:	7e 07                	jle    11c10 <irq_install+0x14>
		return -1;
   11c09:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c0e:	eb 25                	jmp    11c35 <irq_install+0x39>
	}

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t) handler,
   11c10:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c13:	8b 55 08             	mov    0x8(%ebp),%edx
   11c16:	c1 e2 03             	shl    $0x3,%edx
   11c19:	81 c2 c0 89 01 00    	add    $0x189c0,%edx
   11c1f:	68 00 8e 00 00       	push   $0x8e00
   11c24:	50                   	push   %eax
   11c25:	6a 08                	push   $0x8
   11c27:	52                   	push   %edx
   11c28:	e8 07 f9 ff ff       	call   11534 <gate_desc_set>
   11c2d:	83 c4 10             	add    $0x10,%esp
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	return 0;
   11c30:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c35:	c9                   	leave  
   11c36:	c3                   	ret    

00011c37 <irq_enable>:

// 打开8259特定中断
void irq_enable(int irq_num) {
   11c37:	f3 0f 1e fb          	endbr32 
   11c3b:	55                   	push   %ebp
   11c3c:	89 e5                	mov    %esp,%ebp
   11c3e:	53                   	push   %ebx
   11c3f:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11c42:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11c46:	7e 78                	jle    11cc0 <irq_enable+0x89>
        return;
    }

    irq_num -= IRQ_PIC_START;
   11c48:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11c4c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11c50:	7f 32                	jg     11c84 <irq_enable+0x4d>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11c52:	6a 21                	push   $0x21
   11c54:	e8 3f f7 ff ff       	call   11398 <inb>
   11c59:	83 c4 04             	add    $0x4,%esp
   11c5c:	89 c2                	mov    %eax,%edx
   11c5e:	8b 45 08             	mov    0x8(%ebp),%eax
   11c61:	bb 01 00 00 00       	mov    $0x1,%ebx
   11c66:	89 c1                	mov    %eax,%ecx
   11c68:	d3 e3                	shl    %cl,%ebx
   11c6a:	89 d8                	mov    %ebx,%eax
   11c6c:	f7 d0                	not    %eax
   11c6e:	21 d0                	and    %edx,%eax
   11c70:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11c73:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11c77:	50                   	push   %eax
   11c78:	6a 21                	push   $0x21
   11c7a:	e8 36 f7 ff ff       	call   113b5 <outb>
   11c7f:	83 c4 08             	add    $0x8,%esp
   11c82:	eb 3d                	jmp    11cc1 <irq_enable+0x8a>
    } else {
        irq_num -= 8;
   11c84:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11c88:	68 a1 00 00 00       	push   $0xa1
   11c8d:	e8 06 f7 ff ff       	call   11398 <inb>
   11c92:	83 c4 04             	add    $0x4,%esp
   11c95:	89 c2                	mov    %eax,%edx
   11c97:	8b 45 08             	mov    0x8(%ebp),%eax
   11c9a:	bb 01 00 00 00       	mov    $0x1,%ebx
   11c9f:	89 c1                	mov    %eax,%ecx
   11ca1:	d3 e3                	shl    %cl,%ebx
   11ca3:	89 d8                	mov    %ebx,%eax
   11ca5:	f7 d0                	not    %eax
   11ca7:	21 d0                	and    %edx,%eax
   11ca9:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11cac:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11cb0:	50                   	push   %eax
   11cb1:	68 a1 00 00 00       	push   $0xa1
   11cb6:	e8 fa f6 ff ff       	call   113b5 <outb>
   11cbb:	83 c4 08             	add    $0x8,%esp
   11cbe:	eb 01                	jmp    11cc1 <irq_enable+0x8a>
        return;
   11cc0:	90                   	nop
    }
}
   11cc1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11cc4:	c9                   	leave  
   11cc5:	c3                   	ret    

00011cc6 <irq_disable>:
// 关闭8259特定中断
void irq_disable(int irq_num) {
   11cc6:	f3 0f 1e fb          	endbr32 
   11cca:	55                   	push   %ebp
   11ccb:	89 e5                	mov    %esp,%ebp
   11ccd:	53                   	push   %ebx
   11cce:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   11cd1:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11cd5:	7e 74                	jle    11d4b <irq_disable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   11cd7:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   11cdb:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11cdf:	7f 30                	jg     11d11 <irq_disable+0x4b>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11ce1:	6a 21                	push   $0x21
   11ce3:	e8 b0 f6 ff ff       	call   11398 <inb>
   11ce8:	83 c4 04             	add    $0x4,%esp
   11ceb:	89 c3                	mov    %eax,%ebx
   11ced:	8b 45 08             	mov    0x8(%ebp),%eax
   11cf0:	ba 01 00 00 00       	mov    $0x1,%edx
   11cf5:	89 c1                	mov    %eax,%ecx
   11cf7:	d3 e2                	shl    %cl,%edx
   11cf9:	89 d0                	mov    %edx,%eax
   11cfb:	09 d8                	or     %ebx,%eax
   11cfd:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11d00:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11d04:	50                   	push   %eax
   11d05:	6a 21                	push   $0x21
   11d07:	e8 a9 f6 ff ff       	call   113b5 <outb>
   11d0c:	83 c4 08             	add    $0x8,%esp
   11d0f:	eb 3b                	jmp    11d4c <irq_disable+0x86>
    } else {
        irq_num -= 8;
   11d11:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   11d15:	68 a1 00 00 00       	push   $0xa1
   11d1a:	e8 79 f6 ff ff       	call   11398 <inb>
   11d1f:	83 c4 04             	add    $0x4,%esp
   11d22:	89 c3                	mov    %eax,%ebx
   11d24:	8b 45 08             	mov    0x8(%ebp),%eax
   11d27:	ba 01 00 00 00       	mov    $0x1,%edx
   11d2c:	89 c1                	mov    %eax,%ecx
   11d2e:	d3 e2                	shl    %cl,%edx
   11d30:	89 d0                	mov    %edx,%eax
   11d32:	09 d8                	or     %ebx,%eax
   11d34:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11d37:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11d3b:	50                   	push   %eax
   11d3c:	68 a1 00 00 00       	push   $0xa1
   11d41:	e8 6f f6 ff ff       	call   113b5 <outb>
   11d46:	83 c4 08             	add    $0x8,%esp
   11d49:	eb 01                	jmp    11d4c <irq_disable+0x86>
        return;
   11d4b:	90                   	nop
    }
}
   11d4c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11d4f:	c9                   	leave  
   11d50:	c3                   	ret    

00011d51 <irq_disable_global>:
// 关闭全局中断
void irq_disable_global(void) {
   11d51:	f3 0f 1e fb          	endbr32 
   11d55:	55                   	push   %ebp
   11d56:	89 e5                	mov    %esp,%ebp
    cli();
   11d58:	e8 2d f6 ff ff       	call   1138a <cli>
}
   11d5d:	90                   	nop
   11d5e:	5d                   	pop    %ebp
   11d5f:	c3                   	ret    

00011d60 <irq_enable_global>:
// 开启全局中断
void irq_enable_global(void) {
   11d60:	f3 0f 1e fb          	endbr32 
   11d64:	55                   	push   %ebp
   11d65:	89 e5                	mov    %esp,%ebp
    sti();
   11d67:	e8 25 f6 ff ff       	call   11391 <sti>
}
   11d6c:	90                   	nop
   11d6d:	5d                   	pop    %ebp
   11d6e:	c3                   	ret    

00011d6f <irq_enter_protection>:
// 进入临界区保护状态
irq_state_t irq_enter_protection()
{
   11d6f:	f3 0f 1e fb          	endbr32 
   11d73:	55                   	push   %ebp
   11d74:	89 e5                	mov    %esp,%ebp
   11d76:	83 ec 10             	sub    $0x10,%esp
    // 中断的开关状态可以通过读取 EFLAGS 寄存器的标志位获取
    irq_state_t state = read_eflags();
   11d79:	e8 98 f6 ff ff       	call   11416 <read_eflags>
   11d7e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // 关中断
    irq_disable_global();
   11d81:	e8 cb ff ff ff       	call   11d51 <irq_disable_global>
    return state;
   11d86:	8b 45 fc             	mov    -0x4(%ebp),%eax

}
   11d89:	c9                   	leave  
   11d8a:	c3                   	ret    

00011d8b <irq_leave_protection>:
// 退出临界区保护状态 传入进入临界区之前的中断状态，退出临界区仍未该状态
void irq_leave_protection(irq_state_t state)
{
   11d8b:	f3 0f 1e fb          	endbr32 
   11d8f:	55                   	push   %ebp
   11d90:	89 e5                	mov    %esp,%ebp
    // 将中断的状态写到 EFLAGS 寄存器中
    write_eflags(state);
   11d92:	ff 75 08             	pushl  0x8(%ebp)
   11d95:	e8 8c f6 ff ff       	call   11426 <write_eflags>
   11d9a:	83 c4 04             	add    $0x4,%esp
}
   11d9d:	90                   	nop
   11d9e:	c9                   	leave  
   11d9f:	c3                   	ret    

00011da0 <outb>:
{
   11da0:	55                   	push   %ebp
   11da1:	89 e5                	mov    %esp,%ebp
   11da3:	83 ec 08             	sub    $0x8,%esp
   11da6:	8b 45 08             	mov    0x8(%ebp),%eax
   11da9:	8b 55 0c             	mov    0xc(%ebp),%edx
   11dac:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   11db0:	89 d0                	mov    %edx,%eax
   11db2:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   11db5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11db9:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11dbd:	ee                   	out    %al,(%dx)
}
   11dbe:	90                   	nop
   11dbf:	c9                   	leave  
   11dc0:	c3                   	ret    

00011dc1 <do_handler_timer>:
static uint32_t sys_tick;						// 系统启动后的tick数量

/**
 * 定时器中断处理函数
 */
void do_handler_timer (exception_frame_t *frame) {
   11dc1:	f3 0f 1e fb          	endbr32 
   11dc5:	55                   	push   %ebp
   11dc6:	89 e5                	mov    %esp,%ebp
   11dc8:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11dcb:	a1 c0 8d 01 00       	mov    0x18dc0,%eax
   11dd0:	83 c0 01             	add    $0x1,%eax
   11dd3:	a3 c0 8d 01 00       	mov    %eax,0x18dc0

    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   11dd8:	83 ec 0c             	sub    $0xc,%esp
   11ddb:	6a 20                	push   $0x20
   11ddd:	e8 39 fc ff ff       	call   11a1b <pic_send_eoi>
   11de2:	83 c4 10             	add    $0x10,%esp
    // 使用定时器来切换任务
    task_time_tick();
   11de5:	e8 9a f1 ff ff       	call   10f84 <task_time_tick>
}
   11dea:	90                   	nop
   11deb:	c9                   	leave  
   11dec:	c3                   	ret    

00011ded <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   11ded:	f3 0f 1e fb          	endbr32 
   11df1:	55                   	push   %ebp
   11df2:	89 e5                	mov    %esp,%ebp
   11df4:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);   // 多久产生一次时钟
   11df7:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 2023-3-18 写错了，应该是模式3或者模式2
    //outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE0);
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   11dfe:	6a 36                	push   $0x36
   11e00:	6a 43                	push   $0x43
   11e02:	e8 99 ff ff ff       	call   11da0 <outb>
   11e07:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);   // 加载低8位
   11e0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e0d:	0f b6 c0             	movzbl %al,%eax
   11e10:	50                   	push   %eax
   11e11:	6a 40                	push   $0x40
   11e13:	e8 88 ff ff ff       	call   11da0 <outb>
   11e18:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   11e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e1e:	c1 e8 08             	shr    $0x8,%eax
   11e21:	0f b6 c0             	movzbl %al,%eax
   11e24:	50                   	push   %eax
   11e25:	6a 40                	push   $0x40
   11e27:	e8 74 ff ff ff       	call   11da0 <outb>
   11e2c:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11e2f:	83 ec 08             	sub    $0x8,%esp
   11e32:	68 89 02 01 00       	push   $0x10289
   11e37:	6a 20                	push   $0x20
   11e39:	e8 be fd ff ff       	call   11bfc <irq_install>
   11e3e:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11e41:	83 ec 0c             	sub    $0xc,%esp
   11e44:	6a 20                	push   $0x20
   11e46:	e8 ec fd ff ff       	call   11c37 <irq_enable>
   11e4b:	83 c4 10             	add    $0x10,%esp
}
   11e4e:	90                   	nop
   11e4f:	c9                   	leave  
   11e50:	c3                   	ret    

00011e51 <time_init>:

/**
 * 定时器初始化
 */
void time_init (void) {
   11e51:	f3 0f 1e fb          	endbr32 
   11e55:	55                   	push   %ebp
   11e56:	89 e5                	mov    %esp,%ebp
   11e58:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11e5b:	c7 05 c0 8d 01 00 00 	movl   $0x0,0x18dc0
   11e62:	00 00 00 

    init_pit();
   11e65:	e8 83 ff ff ff       	call   11ded <init_pit>
}
   11e6a:	90                   	nop
   11e6b:	c9                   	leave  
   11e6c:	c3                   	ret    

00011e6d <kernel_init>:
static boot_info_t *init_boot_info; // 启动信息
/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   11e6d:	f3 0f 1e fb          	endbr32 
   11e71:	55                   	push   %ebp
   11e72:	89 e5                	mov    %esp,%ebp
   11e74:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   11e77:	8b 45 08             	mov    0x8(%ebp),%eax
   11e7a:	a3 c4 8d 01 00       	mov    %eax,0x18dc4
    // 初始化CPU，再重新加载
    cpu_init();
   11e7f:	e8 e4 f4 ff ff       	call   11368 <cpu_init>
    // 初始化日志
    log_init();
   11e84:	e8 e6 0d 00 00       	call   12c6f <log_init>
    memory_init(boot_info);
   11e89:	83 ec 0c             	sub    $0xc,%esp
   11e8c:	ff 75 08             	pushl  0x8(%ebp)
   11e8f:	e8 0b ea ff ff       	call   1089f <memory_init>
   11e94:	83 c4 10             	add    $0x10,%esp
    irq_init();
   11e97:	e8 ae fb ff ff       	call   11a4a <irq_init>
    time_init();
   11e9c:	e8 b0 ff ff ff       	call   11e51 <time_init>
    task_manager_init();
   11ea1:	e8 dc ed ff ff       	call   10c82 <task_manager_init>
}
   11ea6:	90                   	nop
   11ea7:	c9                   	leave  
   11ea8:	c3                   	ret    

00011ea9 <move_to_first_task>:
/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void)
{
   11ea9:	f3 0f 1e fb          	endbr32 
   11ead:	55                   	push   %ebp
   11eae:	89 e5                	mov    %esp,%ebp
   11eb0:	56                   	push   %esi
   11eb1:	53                   	push   %ebx
   11eb2:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t *curr = task_current();
   11eb5:	e8 c3 ef ff ff       	call   10e7d <task_current>
   11eba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   11ebd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11ec1:	75 19                	jne    11edc <move_to_first_task+0x33>
   11ec3:	68 b8 34 01 00       	push   $0x134b8
   11ec8:	68 38 35 01 00       	push   $0x13538
   11ecd:	6a 2e                	push   $0x2e
   11ecf:	68 c4 34 01 00       	push   $0x134c4
   11ed4:	e8 12 0b 00 00       	call   129eb <panic>
   11ed9:	83 c4 10             	add    $0x10,%esp

    tss_t *tss = &(curr->tss);
   11edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11edf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"     // SS
        "push %[esp]\n\t"    // ESP
        "push %[eflags]\n\t" // EFLAGS
        "push %[cs]\n\t"     // CS
        "push %[eip]\n\t"    // ip
        "iret\n\t" ::[ss] "r"(tss->ss),
   11ee2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ee5:	8b 40 50             	mov    0x50(%eax),%eax
        [esp] "r"(tss->esp), [eflags] "r"(tss->eflags),
   11ee8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11eeb:	8b 52 38             	mov    0x38(%edx),%edx
   11eee:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   11ef1:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs] "r"(tss->cs), [eip] "r"(tss->eip));
   11ef4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   11ef7:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   11efa:	8b 75 f0             	mov    -0x10(%ebp),%esi
   11efd:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   11f00:	50                   	push   %eax
   11f01:	52                   	push   %edx
   11f02:	51                   	push   %ecx
   11f03:	53                   	push   %ebx
   11f04:	56                   	push   %esi
   11f05:	cf                   	iret   
}
   11f06:	90                   	nop
   11f07:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11f0a:	5b                   	pop    %ebx
   11f0b:	5e                   	pop    %esi
   11f0c:	5d                   	pop    %ebp
   11f0d:	c3                   	ret    

00011f0e <init_main>:

void init_main(void)
{
   11f0e:	f3 0f 1e fb          	endbr32 
   11f12:	55                   	push   %ebp
   11f13:	89 e5                	mov    %esp,%ebp
   11f15:	83 ec 08             	sub    $0x8,%esp
    log_printf("Kernel is Running......");
   11f18:	83 ec 0c             	sub    $0xc,%esp
   11f1b:	68 ff 34 01 00       	push   $0x134ff
   11f20:	e8 c3 0d 00 00       	call   12ce8 <log_printf>
   11f25:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   11f28:	83 ec 08             	sub    $0x8,%esp
   11f2b:	68 17 35 01 00       	push   $0x13517
   11f30:	68 1d 35 01 00       	push   $0x1351d
   11f35:	e8 ae 0d 00 00       	call   12ce8 <log_printf>
   11f3a:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", -123, 123456, 0x12345, 'a');
   11f3d:	83 ec 0c             	sub    $0xc,%esp
   11f40:	6a 61                	push   $0x61
   11f42:	68 45 23 01 00       	push   $0x12345
   11f47:	68 40 e2 01 00       	push   $0x1e240
   11f4c:	6a 85                	push   $0xffffff85
   11f4e:	68 29 35 01 00       	push   $0x13529
   11f53:	e8 90 0d 00 00       	call   12ce8 <log_printf>
   11f58:	83 c4 20             	add    $0x20,%esp

    // 初始化mian任务，即为内核任务
    task_first_init();
   11f5b:	e8 f2 ed ff ff       	call   10d52 <task_first_init>
    // 跳转任务first_task
    move_to_first_task();
   11f60:	e8 44 ff ff ff       	call   11ea9 <move_to_first_task>
   11f65:	90                   	nop
   11f66:	c9                   	leave  
   11f67:	c3                   	ret    

00011f68 <list_count>:
static inline int list_count(list_t *list) {
   11f68:	55                   	push   %ebp
   11f69:	89 e5                	mov    %esp,%ebp
    return list->count;
   11f6b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f6e:	8b 40 08             	mov    0x8(%eax),%eax
}
   11f71:	5d                   	pop    %ebp
   11f72:	c3                   	ret    

00011f73 <mutex_init>:


/**
 * 锁初始化
 */
void mutex_init (mutex_t * mutex) {
   11f73:	f3 0f 1e fb          	endbr32 
   11f77:	55                   	push   %ebp
   11f78:	89 e5                	mov    %esp,%ebp
   11f7a:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11f7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11f80:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   11f87:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   11f90:	8b 45 08             	mov    0x8(%ebp),%eax
   11f93:	83 c0 08             	add    $0x8,%eax
   11f96:	83 ec 0c             	sub    $0xc,%esp
   11f99:	50                   	push   %eax
   11f9a:	e8 99 0a 00 00       	call   12a38 <list_init>
   11f9f:	83 c4 10             	add    $0x10,%esp
}
   11fa2:	90                   	nop
   11fa3:	c9                   	leave  
   11fa4:	c3                   	ret    

00011fa5 <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock (mutex_t * mutex) {
   11fa5:	f3 0f 1e fb          	endbr32 
   11fa9:	55                   	push   %ebp
   11faa:	89 e5                	mov    %esp,%ebp
   11fac:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   11faf:	e8 bb fd ff ff       	call   11d6f <irq_enter_protection>
   11fb4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   11fb7:	e8 c1 ee ff ff       	call   10e7d <task_current>
   11fbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   11fbf:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc2:	8b 40 04             	mov    0x4(%eax),%eax
   11fc5:	85 c0                	test   %eax,%eax
   11fc7:	75 14                	jne    11fdd <mutex_lock+0x38>
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   11fc9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fcc:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   11fd3:	8b 45 08             	mov    0x8(%ebp),%eax
   11fd6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11fd9:	89 10                	mov    %edx,(%eax)
   11fdb:	eb 4f                	jmp    1202c <mutex_lock+0x87>
    } else if (mutex->owner == curr) {
   11fdd:	8b 45 08             	mov    0x8(%ebp),%eax
   11fe0:	8b 00                	mov    (%eax),%eax
   11fe2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11fe5:	75 11                	jne    11ff8 <mutex_lock+0x53>
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   11fe7:	8b 45 08             	mov    0x8(%ebp),%eax
   11fea:	8b 40 04             	mov    0x4(%eax),%eax
   11fed:	8d 50 01             	lea    0x1(%eax),%edx
   11ff0:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff3:	89 50 04             	mov    %edx,0x4(%eax)
   11ff6:	eb 34                	jmp    1202c <mutex_lock+0x87>
    } else {
        // 有其它任务占用，则进入队列等待
        task_t * curr = task_current();
   11ff8:	e8 80 ee ff ff       	call   10e7d <task_current>
   11ffd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   12000:	83 ec 0c             	sub    $0xc,%esp
   12003:	ff 75 ec             	pushl  -0x14(%ebp)
   12006:	e8 45 ee ff ff       	call   10e50 <task_set_block>
   1200b:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   1200e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12011:	8d 50 7c             	lea    0x7c(%eax),%edx
   12014:	8b 45 08             	mov    0x8(%ebp),%eax
   12017:	83 c0 08             	add    $0x8,%eax
   1201a:	83 ec 08             	sub    $0x8,%esp
   1201d:	52                   	push   %edx
   1201e:	50                   	push   %eax
   1201f:	e8 a0 0a 00 00       	call   12ac4 <list_insert_last>
   12024:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12027:	e8 0b ef ff ff       	call   10f37 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   1202c:	83 ec 0c             	sub    $0xc,%esp
   1202f:	ff 75 f4             	pushl  -0xc(%ebp)
   12032:	e8 54 fd ff ff       	call   11d8b <irq_leave_protection>
   12037:	83 c4 10             	add    $0x10,%esp
}
   1203a:	90                   	nop
   1203b:	c9                   	leave  
   1203c:	c3                   	ret    

0001203d <mutex_unlock>:

/**
 * 释放锁：只有上锁进程才能解锁，不论上锁几次，解锁则全部解锁
 */
void mutex_unlock (mutex_t * mutex) {
   1203d:	f3 0f 1e fb          	endbr32 
   12041:	55                   	push   %ebp
   12042:	89 e5                	mov    %esp,%ebp
   12044:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   12047:	e8 23 fd ff ff       	call   11d6f <irq_enter_protection>
   1204c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t * curr = task_current();
   1204f:	e8 29 ee ff ff       	call   10e7d <task_current>
   12054:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   12057:	8b 45 08             	mov    0x8(%ebp),%eax
   1205a:	8b 00                	mov    (%eax),%eax
   1205c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1205f:	0f 85 88 00 00 00    	jne    120ed <mutex_unlock+0xb0>
        if (--mutex->locked_count == 0) {
   12065:	8b 45 08             	mov    0x8(%ebp),%eax
   12068:	8b 40 04             	mov    0x4(%eax),%eax
   1206b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1206e:	8b 45 08             	mov    0x8(%ebp),%eax
   12071:	89 50 04             	mov    %edx,0x4(%eax)
   12074:	8b 45 08             	mov    0x8(%ebp),%eax
   12077:	8b 40 04             	mov    0x4(%eax),%eax
   1207a:	85 c0                	test   %eax,%eax
   1207c:	75 6f                	jne    120ed <mutex_unlock+0xb0>
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   1207e:	8b 45 08             	mov    0x8(%ebp),%eax
   12081:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list)) {
   12087:	8b 45 08             	mov    0x8(%ebp),%eax
   1208a:	83 c0 08             	add    $0x8,%eax
   1208d:	83 ec 0c             	sub    $0xc,%esp
   12090:	50                   	push   %eax
   12091:	e8 d2 fe ff ff       	call   11f68 <list_count>
   12096:	83 c4 10             	add    $0x10,%esp
   12099:	85 c0                	test   %eax,%eax
   1209b:	74 50                	je     120ed <mutex_unlock+0xb0>
                list_node_t * task_node = list_remove_first(&mutex->wait_list);
   1209d:	8b 45 08             	mov    0x8(%ebp),%eax
   120a0:	83 c0 08             	add    $0x8,%eax
   120a3:	83 ec 0c             	sub    $0xc,%esp
   120a6:	50                   	push   %eax
   120a7:	e8 80 0a 00 00       	call   12b2c <list_remove_first>
   120ac:	83 c4 10             	add    $0x10,%esp
   120af:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   120b2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120b6:	74 08                	je     120c0 <mutex_unlock+0x83>
   120b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   120bb:	83 e8 7c             	sub    $0x7c,%eax
   120be:	eb 05                	jmp    120c5 <mutex_unlock+0x88>
   120c0:	b8 00 00 00 00       	mov    $0x0,%eax
   120c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   120c8:	83 ec 0c             	sub    $0xc,%esp
   120cb:	ff 75 e8             	pushl  -0x18(%ebp)
   120ce:	e8 43 ed ff ff       	call   10e16 <task_set_ready>
   120d3:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   120d6:	8b 45 08             	mov    0x8(%ebp),%eax
   120d9:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   120e0:	8b 45 08             	mov    0x8(%ebp),%eax
   120e3:	8b 55 e8             	mov    -0x18(%ebp),%edx
   120e6:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   120e8:	e8 4a ee ff ff       	call   10f37 <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   120ed:	83 ec 0c             	sub    $0xc,%esp
   120f0:	ff 75 f4             	pushl  -0xc(%ebp)
   120f3:	e8 93 fc ff ff       	call   11d8b <irq_leave_protection>
   120f8:	83 c4 10             	add    $0x10,%esp
   120fb:	90                   	nop
   120fc:	c9                   	leave  
   120fd:	c3                   	ret    

000120fe <list_count>:
static inline int list_count(list_t *list) {
   120fe:	55                   	push   %ebp
   120ff:	89 e5                	mov    %esp,%ebp
    return list->count;
   12101:	8b 45 08             	mov    0x8(%ebp),%eax
   12104:	8b 40 08             	mov    0x8(%eax),%eax
}
   12107:	5d                   	pop    %ebp
   12108:	c3                   	ret    

00012109 <sem_init>:

/**
 * 信号量初始化
 */
void sem_init(sem_t *sem, int init_count)
{
   12109:	f3 0f 1e fb          	endbr32 
   1210d:	55                   	push   %ebp
   1210e:	89 e5                	mov    %esp,%ebp
   12110:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12113:	8b 45 08             	mov    0x8(%ebp),%eax
   12116:	8b 55 0c             	mov    0xc(%ebp),%edx
   12119:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1211b:	8b 45 08             	mov    0x8(%ebp),%eax
   1211e:	83 c0 04             	add    $0x4,%eax
   12121:	83 ec 0c             	sub    $0xc,%esp
   12124:	50                   	push   %eax
   12125:	e8 0e 09 00 00       	call   12a38 <list_init>
   1212a:	83 c4 10             	add    $0x10,%esp
}
   1212d:	90                   	nop
   1212e:	c9                   	leave  
   1212f:	c3                   	ret    

00012130 <sem_wait>:
 * @description: 进程申请信号量，无信号量则进入等待队列
 * @return {*}
 * @param {sem_t} *sem  待申请的信号量
 */
void sem_wait(sem_t *sem)
{
   12130:	f3 0f 1e fb          	endbr32 
   12134:	55                   	push   %ebp
   12135:	89 e5                	mov    %esp,%ebp
   12137:	83 ec 18             	sub    $0x18,%esp
    // 该信号量可能会被多个进程同时访问，需要设置临界资源保护
    irq_state_t state = irq_enter_protection();
   1213a:	e8 30 fc ff ff       	call   11d6f <irq_enter_protection>
   1213f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 首先判断信号量计数是否为 0
    if (sem->count > 0)
   12142:	8b 45 08             	mov    0x8(%ebp),%eax
   12145:	8b 00                	mov    (%eax),%eax
   12147:	85 c0                	test   %eax,%eax
   12149:	7e 0f                	jle    1215a <sem_wait+0x2a>
    {
        sem->count--; // 不为 0 则拿走一个信号量 继续执行进程
   1214b:	8b 45 08             	mov    0x8(%ebp),%eax
   1214e:	8b 00                	mov    (%eax),%eax
   12150:	8d 50 ff             	lea    -0x1(%eax),%edx
   12153:	8b 45 08             	mov    0x8(%ebp),%eax
   12156:	89 10                	mov    %edx,(%eax)
   12158:	eb 34                	jmp    1218e <sem_wait+0x5e>
    }
    else // 为 0 则当前进程移出继续队列 进入等待队列的队尾进行等待
    {
        task_t *curr = task_current();
   1215a:	e8 1e ed ff ff       	call   10e7d <task_current>
   1215f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   12162:	83 ec 0c             	sub    $0xc,%esp
   12165:	ff 75 f0             	pushl  -0x10(%ebp)
   12168:	e8 e3 ec ff ff       	call   10e50 <task_set_block>
   1216d:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   12170:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12173:	8d 50 7c             	lea    0x7c(%eax),%edx
   12176:	8b 45 08             	mov    0x8(%ebp),%eax
   12179:	83 c0 04             	add    $0x4,%eax
   1217c:	83 ec 08             	sub    $0x8,%esp
   1217f:	52                   	push   %edx
   12180:	50                   	push   %eax
   12181:	e8 3e 09 00 00       	call   12ac4 <list_insert_last>
   12186:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12189:	e8 a9 ed ff ff       	call   10f37 <task_dispatch>
    }
    irq_leave_protection(state);
   1218e:	83 ec 0c             	sub    $0xc,%esp
   12191:	ff 75 f4             	pushl  -0xc(%ebp)
   12194:	e8 f2 fb ff ff       	call   11d8b <irq_leave_protection>
   12199:	83 c4 10             	add    $0x10,%esp
}
   1219c:	90                   	nop
   1219d:	c9                   	leave  
   1219e:	c3                   	ret    

0001219f <sem_notify>:
 * @description: 系统释放信号量，有等待进程则移植就绪队列
 * @return {*}
 * @param {sem_t} *sem 待释放的信号量
 */
void sem_notify(sem_t *sem)
{
   1219f:	f3 0f 1e fb          	endbr32 
   121a3:	55                   	push   %ebp
   121a4:	89 e5                	mov    %esp,%ebp
   121a6:	83 ec 18             	sub    $0x18,%esp
    // 该信号量可能会被多个进程同时访问，需要设置临界资源保护
    irq_state_t state = irq_enter_protection();
   121a9:	e8 c1 fb ff ff       	call   11d6f <irq_enter_protection>
   121ae:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list)) // 等待队列中有进程
   121b1:	8b 45 08             	mov    0x8(%ebp),%eax
   121b4:	83 c0 04             	add    $0x4,%eax
   121b7:	83 ec 0c             	sub    $0xc,%esp
   121ba:	50                   	push   %eax
   121bb:	e8 3e ff ff ff       	call   120fe <list_count>
   121c0:	83 c4 10             	add    $0x10,%esp
   121c3:	85 c0                	test   %eax,%eax
   121c5:	74 40                	je     12207 <sem_notify+0x68>
    {
        // 将等待队列的第一个进程放入就绪队列中
        list_node_t *node = list_remove_first(&sem->wait_list);
   121c7:	8b 45 08             	mov    0x8(%ebp),%eax
   121ca:	83 c0 04             	add    $0x4,%eax
   121cd:	83 ec 0c             	sub    $0xc,%esp
   121d0:	50                   	push   %eax
   121d1:	e8 56 09 00 00       	call   12b2c <list_remove_first>
   121d6:	83 c4 10             	add    $0x10,%esp
   121d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   121dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   121e0:	74 08                	je     121ea <sem_notify+0x4b>
   121e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121e5:	83 e8 7c             	sub    $0x7c,%eax
   121e8:	eb 05                	jmp    121ef <sem_notify+0x50>
   121ea:	b8 00 00 00 00       	mov    $0x0,%eax
   121ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   121f2:	83 ec 0c             	sub    $0xc,%esp
   121f5:	ff 75 ec             	pushl  -0x14(%ebp)
   121f8:	e8 19 ec ff ff       	call   10e16 <task_set_ready>
   121fd:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12200:	e8 32 ed ff ff       	call   10f37 <task_dispatch>
   12205:	eb 0d                	jmp    12214 <sem_notify+0x75>
    }
    else // 等待队列中无进程则可用信号量++
    {
        sem->count++;
   12207:	8b 45 08             	mov    0x8(%ebp),%eax
   1220a:	8b 00                	mov    (%eax),%eax
   1220c:	8d 50 01             	lea    0x1(%eax),%edx
   1220f:	8b 45 08             	mov    0x8(%ebp),%eax
   12212:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);
   12214:	83 ec 0c             	sub    $0xc,%esp
   12217:	ff 75 f4             	pushl  -0xc(%ebp)
   1221a:	e8 6c fb ff ff       	call   11d8b <irq_leave_protection>
   1221f:	83 c4 10             	add    $0x10,%esp
}
   12222:	90                   	nop
   12223:	c9                   	leave  
   12224:	c3                   	ret    

00012225 <sem_count>:

int sem_count(sem_t *sem)
{
   12225:	f3 0f 1e fb          	endbr32 
   12229:	55                   	push   %ebp
   1222a:	89 e5                	mov    %esp,%ebp
   1222c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1222f:	e8 3b fb ff ff       	call   11d6f <irq_enter_protection>
   12234:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   12237:	8b 45 08             	mov    0x8(%ebp),%eax
   1223a:	8b 00                	mov    (%eax),%eax
   1223c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   1223f:	83 ec 0c             	sub    $0xc,%esp
   12242:	ff 75 f4             	pushl  -0xc(%ebp)
   12245:	e8 41 fb ff ff       	call   11d8b <irq_leave_protection>
   1224a:	83 c4 10             	add    $0x10,%esp
    return count;
   1224d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12250:	c9                   	leave  
   12251:	c3                   	ret    

00012252 <bitmap_byte_count>:
#include "tools/klib.h"

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count (int bit_count) {
   12252:	f3 0f 1e fb          	endbr32 
   12256:	55                   	push   %ebp
   12257:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         // 向上取整
   12259:	8b 45 08             	mov    0x8(%ebp),%eax
   1225c:	83 c0 07             	add    $0x7,%eax
   1225f:	8d 50 07             	lea    0x7(%eax),%edx
   12262:	85 c0                	test   %eax,%eax
   12264:	0f 48 c2             	cmovs  %edx,%eax
   12267:	c1 f8 03             	sar    $0x3,%eax
}
   1226a:	5d                   	pop    %ebp
   1226b:	c3                   	ret    

0001226c <bitmap_init>:
 * @param {bitmap_t *} bitmap   位图
 * @param {uint8_t *} bits      位图每一项的位数
 * @param {int} count           位图总的位数位数
 * @param {int} init_bit        位图初始状态（全0 or 全1）
 */
void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   1226c:	f3 0f 1e fb          	endbr32 
   12270:	55                   	push   %ebp
   12271:	89 e5                	mov    %esp,%ebp
   12273:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   12276:	8b 45 08             	mov    0x8(%ebp),%eax
   12279:	8b 55 10             	mov    0x10(%ebp),%edx
   1227c:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->bits = bits;
   1227f:	8b 45 08             	mov    0x8(%ebp),%eax
   12282:	8b 55 0c             	mov    0xc(%ebp),%edx
   12285:	89 10                	mov    %edx,(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   12287:	8b 45 08             	mov    0x8(%ebp),%eax
   1228a:	8b 40 04             	mov    0x4(%eax),%eax
   1228d:	50                   	push   %eax
   1228e:	e8 bf ff ff ff       	call   12252 <bitmap_byte_count>
   12293:	83 c4 04             	add    $0x4,%esp
   12296:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 设置全为0 or 全为1
    kernel_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   12299:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1229d:	74 07                	je     122a6 <bitmap_init+0x3a>
   1229f:	ba ff 00 00 00       	mov    $0xff,%edx
   122a4:	eb 05                	jmp    122ab <bitmap_init+0x3f>
   122a6:	ba 00 00 00 00       	mov    $0x0,%edx
   122ab:	8b 45 08             	mov    0x8(%ebp),%eax
   122ae:	8b 00                	mov    (%eax),%eax
   122b0:	83 ec 04             	sub    $0x4,%esp
   122b3:	ff 75 f4             	pushl  -0xc(%ebp)
   122b6:	52                   	push   %edx
   122b7:	50                   	push   %eax
   122b8:	e8 cc 03 00 00       	call   12689 <kernel_memset>
   122bd:	83 c4 10             	add    $0x10,%esp
}
   122c0:	90                   	nop
   122c1:	c9                   	leave  
   122c2:	c3                   	ret    

000122c3 <bitmap_set_bit>:
/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   122c3:	f3 0f 1e fb          	endbr32 
   122c7:	55                   	push   %ebp
   122c8:	89 e5                	mov    %esp,%ebp
   122ca:	56                   	push   %esi
   122cb:	53                   	push   %ebx
   122cc:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   122cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122d6:	e9 a0 00 00 00       	jmp    1237b <bitmap_set_bit+0xb8>
        // 可以考虑进行一定程序的优化!!
        if (bit) {
   122db:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   122df:	74 4a                	je     1232b <bitmap_set_bit+0x68>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   122e1:	8b 45 08             	mov    0x8(%ebp),%eax
   122e4:	8b 10                	mov    (%eax),%edx
   122e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   122e9:	8d 48 07             	lea    0x7(%eax),%ecx
   122ec:	85 c0                	test   %eax,%eax
   122ee:	0f 48 c1             	cmovs  %ecx,%eax
   122f1:	c1 f8 03             	sar    $0x3,%eax
   122f4:	89 c3                	mov    %eax,%ebx
   122f6:	89 d8                	mov    %ebx,%eax
   122f8:	01 d0                	add    %edx,%eax
   122fa:	0f b6 00             	movzbl (%eax),%eax
   122fd:	89 c6                	mov    %eax,%esi
   122ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   12302:	99                   	cltd   
   12303:	c1 ea 1d             	shr    $0x1d,%edx
   12306:	01 d0                	add    %edx,%eax
   12308:	83 e0 07             	and    $0x7,%eax
   1230b:	29 d0                	sub    %edx,%eax
   1230d:	ba 01 00 00 00       	mov    $0x1,%edx
   12312:	89 c1                	mov    %eax,%ecx
   12314:	d3 e2                	shl    %cl,%edx
   12316:	89 d0                	mov    %edx,%eax
   12318:	89 f1                	mov    %esi,%ecx
   1231a:	09 c1                	or     %eax,%ecx
   1231c:	8b 45 08             	mov    0x8(%ebp),%eax
   1231f:	8b 00                	mov    (%eax),%eax
   12321:	89 da                	mov    %ebx,%edx
   12323:	01 d0                	add    %edx,%eax
   12325:	89 ca                	mov    %ecx,%edx
   12327:	88 10                	mov    %dl,(%eax)
   12329:	eb 48                	jmp    12373 <bitmap_set_bit+0xb0>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1232b:	8b 45 08             	mov    0x8(%ebp),%eax
   1232e:	8b 10                	mov    (%eax),%edx
   12330:	8b 45 0c             	mov    0xc(%ebp),%eax
   12333:	8d 48 07             	lea    0x7(%eax),%ecx
   12336:	85 c0                	test   %eax,%eax
   12338:	0f 48 c1             	cmovs  %ecx,%eax
   1233b:	c1 f8 03             	sar    $0x3,%eax
   1233e:	89 c3                	mov    %eax,%ebx
   12340:	89 d8                	mov    %ebx,%eax
   12342:	01 d0                	add    %edx,%eax
   12344:	0f b6 00             	movzbl (%eax),%eax
   12347:	89 c6                	mov    %eax,%esi
   12349:	8b 45 0c             	mov    0xc(%ebp),%eax
   1234c:	99                   	cltd   
   1234d:	c1 ea 1d             	shr    $0x1d,%edx
   12350:	01 d0                	add    %edx,%eax
   12352:	83 e0 07             	and    $0x7,%eax
   12355:	29 d0                	sub    %edx,%eax
   12357:	ba 01 00 00 00       	mov    $0x1,%edx
   1235c:	89 c1                	mov    %eax,%ecx
   1235e:	d3 e2                	shl    %cl,%edx
   12360:	89 d0                	mov    %edx,%eax
   12362:	f7 d0                	not    %eax
   12364:	89 f2                	mov    %esi,%edx
   12366:	21 c2                	and    %eax,%edx
   12368:	8b 45 08             	mov    0x8(%ebp),%eax
   1236b:	8b 00                	mov    (%eax),%eax
   1236d:	89 d9                	mov    %ebx,%ecx
   1236f:	01 c8                	add    %ecx,%eax
   12371:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   12373:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12377:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1237b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1237e:	3b 45 10             	cmp    0x10(%ebp),%eax
   12381:	7d 0f                	jge    12392 <bitmap_set_bit+0xcf>
   12383:	8b 45 08             	mov    0x8(%ebp),%eax
   12386:	8b 40 04             	mov    0x4(%eax),%eax
   12389:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1238c:	0f 8c 49 ff ff ff    	jl     122db <bitmap_set_bit+0x18>
        }
    }
} 
   12392:	90                   	nop
   12393:	83 c4 10             	add    $0x10,%esp
   12396:	5b                   	pop    %ebx
   12397:	5e                   	pop    %esi
   12398:	5d                   	pop    %ebp
   12399:	c3                   	ret    

0001239a <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit (bitmap_t * bitmap, int index) {
   1239a:	f3 0f 1e fb          	endbr32 
   1239e:	55                   	push   %ebp
   1239f:	89 e5                	mov    %esp,%ebp
   123a1:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   123a2:	8b 45 08             	mov    0x8(%ebp),%eax
   123a5:	8b 10                	mov    (%eax),%edx
   123a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   123aa:	8d 48 07             	lea    0x7(%eax),%ecx
   123ad:	85 c0                	test   %eax,%eax
   123af:	0f 48 c1             	cmovs  %ecx,%eax
   123b2:	c1 f8 03             	sar    $0x3,%eax
   123b5:	01 d0                	add    %edx,%eax
   123b7:	0f b6 00             	movzbl (%eax),%eax
   123ba:	0f b6 d8             	movzbl %al,%ebx
   123bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   123c0:	99                   	cltd   
   123c1:	c1 ea 1d             	shr    $0x1d,%edx
   123c4:	01 d0                	add    %edx,%eax
   123c6:	83 e0 07             	and    $0x7,%eax
   123c9:	29 d0                	sub    %edx,%eax
   123cb:	89 c1                	mov    %eax,%ecx
   123cd:	d3 fb                	sar    %cl,%ebx
   123cf:	89 d8                	mov    %ebx,%eax
   123d1:	83 e0 01             	and    $0x1,%eax
}
   123d4:	5b                   	pop    %ebx
   123d5:	5d                   	pop    %ebp
   123d6:	c3                   	ret    

000123d7 <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set (bitmap_t * bitmap, int index) {
   123d7:	f3 0f 1e fb          	endbr32 
   123db:	55                   	push   %ebp
   123dc:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   123de:	ff 75 0c             	pushl  0xc(%ebp)
   123e1:	ff 75 08             	pushl  0x8(%ebp)
   123e4:	e8 b1 ff ff ff       	call   1239a <bitmap_get_bit>
   123e9:	83 c4 08             	add    $0x8,%esp
   123ec:	85 c0                	test   %eax,%eax
   123ee:	0f 95 c0             	setne  %al
   123f1:	0f b6 c0             	movzbl %al,%eax
}
   123f4:	c9                   	leave  
   123f5:	c3                   	ret    

000123f6 <bitmap_alloc_nbits>:

/**
 * @brief 连续分配count个指定比特位，返回起始索引
 */
int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   123f6:	f3 0f 1e fb          	endbr32 
   123fa:	55                   	push   %ebp
   123fb:	89 e5                	mov    %esp,%ebp
   123fd:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   12400:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   12407:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   1240e:	e9 86 00 00 00       	jmp    12499 <bitmap_alloc_nbits+0xa3>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   12413:	ff 75 fc             	pushl  -0x4(%ebp)
   12416:	ff 75 08             	pushl  0x8(%ebp)
   12419:	e8 7c ff ff ff       	call   1239a <bitmap_get_bit>
   1241e:	83 c4 08             	add    $0x8,%esp
   12421:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12424:	74 06                	je     1242c <bitmap_alloc_nbits+0x36>
            // 不同，继续寻找起始的bit
            search_idx++;
   12426:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   1242a:	eb 6d                	jmp    12499 <bitmap_alloc_nbits+0xa3>
        }

        // 记录起始索引
        ok_idx = search_idx;
   1242c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1242f:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   12432:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12439:	eb 27                	jmp    12462 <bitmap_alloc_nbits+0x6c>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   1243b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1243e:	8d 50 01             	lea    0x1(%eax),%edx
   12441:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12444:	50                   	push   %eax
   12445:	ff 75 08             	pushl  0x8(%ebp)
   12448:	e8 4d ff ff ff       	call   1239a <bitmap_get_bit>
   1244d:	83 c4 08             	add    $0x8,%esp
   12450:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12453:	74 09                	je     1245e <bitmap_alloc_nbits+0x68>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   12455:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1245c:	eb 17                	jmp    12475 <bitmap_alloc_nbits+0x7f>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   1245e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12462:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12465:	3b 45 10             	cmp    0x10(%ebp),%eax
   12468:	7d 0b                	jge    12475 <bitmap_alloc_nbits+0x7f>
   1246a:	8b 45 08             	mov    0x8(%ebp),%eax
   1246d:	8b 40 04             	mov    0x4(%eax),%eax
   12470:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12473:	7c c6                	jl     1243b <bitmap_alloc_nbits+0x45>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   12475:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12478:	3b 45 10             	cmp    0x10(%ebp),%eax
   1247b:	7c 1c                	jl     12499 <bitmap_alloc_nbits+0xa3>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   1247d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12480:	f7 d0                	not    %eax
   12482:	50                   	push   %eax
   12483:	ff 75 10             	pushl  0x10(%ebp)
   12486:	ff 75 f8             	pushl  -0x8(%ebp)
   12489:	ff 75 08             	pushl  0x8(%ebp)
   1248c:	e8 32 fe ff ff       	call   122c3 <bitmap_set_bit>
   12491:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   12494:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12497:	eb 14                	jmp    124ad <bitmap_alloc_nbits+0xb7>
    while (search_idx < bitmap->bit_count) {
   12499:	8b 45 08             	mov    0x8(%ebp),%eax
   1249c:	8b 40 04             	mov    0x4(%eax),%eax
   1249f:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   124a2:	0f 8c 6b ff ff ff    	jl     12413 <bitmap_alloc_nbits+0x1d>
        }
    }

    return -1;
   124a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   124ad:	c9                   	leave  
   124ae:	c3                   	ret    

000124af <hlt>:
static inline void hlt(void) {
   124af:	55                   	push   %ebp
   124b0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   124b2:	f4                   	hlt    
}
   124b3:	90                   	nop
   124b4:	5d                   	pop    %ebp
   124b5:	c3                   	ret    

000124b6 <kernel_strcpy>:
#include "tools/log.h"
#include "common/cpu_instr.h"

/* 将 src 字符串复制到 dest 字符串中 */
void kernel_strcpy(char *dest, const char *src)
{
   124b6:	f3 0f 1e fb          	endbr32 
   124ba:	55                   	push   %ebp
   124bb:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   124bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124c1:	74 3b                	je     124fe <kernel_strcpy+0x48>
   124c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   124c7:	74 35                	je     124fe <kernel_strcpy+0x48>
    {
        return;
    }
    while (*dest && *src)
   124c9:	eb 17                	jmp    124e2 <kernel_strcpy+0x2c>
    {
        *dest++ = *src++;
   124cb:	8b 55 0c             	mov    0xc(%ebp),%edx
   124ce:	8d 42 01             	lea    0x1(%edx),%eax
   124d1:	89 45 0c             	mov    %eax,0xc(%ebp)
   124d4:	8b 45 08             	mov    0x8(%ebp),%eax
   124d7:	8d 48 01             	lea    0x1(%eax),%ecx
   124da:	89 4d 08             	mov    %ecx,0x8(%ebp)
   124dd:	0f b6 12             	movzbl (%edx),%edx
   124e0:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   124e2:	8b 45 08             	mov    0x8(%ebp),%eax
   124e5:	0f b6 00             	movzbl (%eax),%eax
   124e8:	84 c0                	test   %al,%al
   124ea:	74 0a                	je     124f6 <kernel_strcpy+0x40>
   124ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   124ef:	0f b6 00             	movzbl (%eax),%eax
   124f2:	84 c0                	test   %al,%al
   124f4:	75 d5                	jne    124cb <kernel_strcpy+0x15>
    }
    *dest = '\0';
   124f6:	8b 45 08             	mov    0x8(%ebp),%eax
   124f9:	c6 00 00             	movb   $0x0,(%eax)
   124fc:	eb 01                	jmp    124ff <kernel_strcpy+0x49>
        return;
   124fe:	90                   	nop
}
   124ff:	5d                   	pop    %ebp
   12500:	c3                   	ret    

00012501 <kernel_strncpy>:
/* 将 src 字符串中的 size 个字符复制到 dest 字符串中 */
void kernel_strncpy(char *dest, const char *src, int size)
{
   12501:	f3 0f 1e fb          	endbr32 
   12505:	55                   	push   %ebp
   12506:	89 e5                	mov    %esp,%ebp
   12508:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   1250b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1250f:	74 61                	je     12572 <kernel_strncpy+0x71>
   12511:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12515:	74 5b                	je     12572 <kernel_strncpy+0x71>
   12517:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1251b:	74 55                	je     12572 <kernel_strncpy+0x71>
    {
        return;
    }

    char *d = dest;
   1251d:	8b 45 08             	mov    0x8(%ebp),%eax
   12520:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   12523:	8b 45 0c             	mov    0xc(%ebp),%eax
   12526:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   12529:	eb 17                	jmp    12542 <kernel_strncpy+0x41>
    {
        *d++ = *s++;
   1252b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1252e:	8d 42 01             	lea    0x1(%edx),%eax
   12531:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12534:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12537:	8d 48 01             	lea    0x1(%eax),%ecx
   1253a:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1253d:	0f b6 12             	movzbl (%edx),%edx
   12540:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   12542:	8b 45 10             	mov    0x10(%ebp),%eax
   12545:	8d 50 ff             	lea    -0x1(%eax),%edx
   12548:	89 55 10             	mov    %edx,0x10(%ebp)
   1254b:	85 c0                	test   %eax,%eax
   1254d:	7e 0a                	jle    12559 <kernel_strncpy+0x58>
   1254f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12552:	0f b6 00             	movzbl (%eax),%eax
   12555:	84 c0                	test   %al,%al
   12557:	75 d2                	jne    1252b <kernel_strncpy+0x2a>
    }
    if (size == 0)
   12559:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1255d:	75 0b                	jne    1256a <kernel_strncpy+0x69>
    {
        *(d - 1) = '\0';
   1255f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12562:	83 e8 01             	sub    $0x1,%eax
   12565:	c6 00 00             	movb   $0x0,(%eax)
   12568:	eb 09                	jmp    12573 <kernel_strncpy+0x72>
    }
    else
    {
        *d = '\0';
   1256a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1256d:	c6 00 00             	movb   $0x0,(%eax)
   12570:	eb 01                	jmp    12573 <kernel_strncpy+0x72>
        return;
   12572:	90                   	nop
    }
}
   12573:	c9                   	leave  
   12574:	c3                   	ret    

00012575 <kernel_strlen>:
/* 计算字符串 str 的长度（不包括 null 字符） */
int kernel_strlen(const char *str)
{
   12575:	f3 0f 1e fb          	endbr32 
   12579:	55                   	push   %ebp
   1257a:	89 e5                	mov    %esp,%ebp
   1257c:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0)
   1257f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12583:	75 07                	jne    1258c <kernel_strlen+0x17>
    {
        return 0;
   12585:	b8 00 00 00 00       	mov    $0x0,%eax
   1258a:	eb 26                	jmp    125b2 <kernel_strlen+0x3d>
    }

    const char *c = str;
   1258c:	8b 45 08             	mov    0x8(%ebp),%eax
   1258f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   12592:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   12599:	eb 04                	jmp    1259f <kernel_strlen+0x2a>
    {
        len++;
   1259b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   1259f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125a2:	8d 50 01             	lea    0x1(%eax),%edx
   125a5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   125a8:	0f b6 00             	movzbl (%eax),%eax
   125ab:	84 c0                	test   %al,%al
   125ad:	75 ec                	jne    1259b <kernel_strlen+0x26>
    }

    return len;
   125af:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   125b2:	c9                   	leave  
   125b3:	c3                   	ret    

000125b4 <kernel_strncmp>:

/* 比较两个字符串 s1 和 s2 的前 size 个字符 , 如果某一字符串提前比较完成，也算相同*/
int kernel_strncmp(const char *s1, const char *s2, int size)
{
   125b4:	f3 0f 1e fb          	endbr32 
   125b8:	55                   	push   %ebp
   125b9:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   125bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125bf:	74 06                	je     125c7 <kernel_strncmp+0x13>
   125c1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125c5:	75 13                	jne    125da <kernel_strncmp+0x26>
    {
        return -1;
   125c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   125cc:	eb 66                	jmp    12634 <kernel_strncmp+0x80>
    }

    // 2023-3-18 这里size没有用到
    while (*s1 && *s2 && (*s1 == *s2) && size)
    {
        s1++;
   125ce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   125d2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   125d6:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   125da:	8b 45 08             	mov    0x8(%ebp),%eax
   125dd:	0f b6 00             	movzbl (%eax),%eax
   125e0:	84 c0                	test   %al,%al
   125e2:	74 20                	je     12604 <kernel_strncmp+0x50>
   125e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   125e7:	0f b6 00             	movzbl (%eax),%eax
   125ea:	84 c0                	test   %al,%al
   125ec:	74 16                	je     12604 <kernel_strncmp+0x50>
   125ee:	8b 45 08             	mov    0x8(%ebp),%eax
   125f1:	0f b6 10             	movzbl (%eax),%edx
   125f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f7:	0f b6 00             	movzbl (%eax),%eax
   125fa:	38 c2                	cmp    %al,%dl
   125fc:	75 06                	jne    12604 <kernel_strncmp+0x50>
   125fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12602:	75 ca                	jne    125ce <kernel_strncmp+0x1a>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   12604:	8b 45 08             	mov    0x8(%ebp),%eax
   12607:	0f b6 00             	movzbl (%eax),%eax
   1260a:	84 c0                	test   %al,%al
   1260c:	74 21                	je     1262f <kernel_strncmp+0x7b>
   1260e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12611:	0f b6 00             	movzbl (%eax),%eax
   12614:	84 c0                	test   %al,%al
   12616:	74 17                	je     1262f <kernel_strncmp+0x7b>
   12618:	8b 45 08             	mov    0x8(%ebp),%eax
   1261b:	0f b6 10             	movzbl (%eax),%edx
   1261e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12621:	0f b6 00             	movzbl (%eax),%eax
   12624:	38 c2                	cmp    %al,%dl
   12626:	74 07                	je     1262f <kernel_strncmp+0x7b>
   12628:	b8 01 00 00 00       	mov    $0x1,%eax
   1262d:	eb 05                	jmp    12634 <kernel_strncmp+0x80>
   1262f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12634:	5d                   	pop    %ebp
   12635:	c3                   	ret    

00012636 <kernel_memcpy>:
/* 将 src 指向的内存块中的 size 个字节复制到 dest 指向的内存块中 */
void kernel_memcpy(void *dest, void *src, int size)
{
   12636:	f3 0f 1e fb          	endbr32 
   1263a:	55                   	push   %ebp
   1263b:	89 e5                	mov    %esp,%ebp
   1263d:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   12640:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12644:	74 40                	je     12686 <kernel_memcpy+0x50>
   12646:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1264a:	74 3a                	je     12686 <kernel_memcpy+0x50>
   1264c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12650:	74 34                	je     12686 <kernel_memcpy+0x50>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   12652:	8b 45 0c             	mov    0xc(%ebp),%eax
   12655:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   12658:	8b 45 08             	mov    0x8(%ebp),%eax
   1265b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   1265e:	eb 17                	jmp    12677 <kernel_memcpy+0x41>
    {
        *d++ = *s++;
   12660:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12663:	8d 42 01             	lea    0x1(%edx),%eax
   12666:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12669:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1266c:	8d 48 01             	lea    0x1(%eax),%ecx
   1266f:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12672:	0f b6 12             	movzbl (%edx),%edx
   12675:	88 10                	mov    %dl,(%eax)
    while (size--)
   12677:	8b 45 10             	mov    0x10(%ebp),%eax
   1267a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1267d:	89 55 10             	mov    %edx,0x10(%ebp)
   12680:	85 c0                	test   %eax,%eax
   12682:	75 dc                	jne    12660 <kernel_memcpy+0x2a>
   12684:	eb 01                	jmp    12687 <kernel_memcpy+0x51>
        return;
   12686:	90                   	nop
    }
}
   12687:	c9                   	leave  
   12688:	c3                   	ret    

00012689 <kernel_memset>:
/* 将 dest 指向的内存块中的前 size 个字节设置为值 v */
void kernel_memset(void *dest, uint8_t v, int size)
{
   12689:	f3 0f 1e fb          	endbr32 
   1268d:	55                   	push   %ebp
   1268e:	89 e5                	mov    %esp,%ebp
   12690:	83 ec 14             	sub    $0x14,%esp
   12693:	8b 45 0c             	mov    0xc(%ebp),%eax
   12696:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   12699:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1269d:	74 2c                	je     126cb <kernel_memset+0x42>
   1269f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126a3:	74 26                	je     126cb <kernel_memset+0x42>
    {
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   126a5:	8b 45 08             	mov    0x8(%ebp),%eax
   126a8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   126ab:	eb 0f                	jmp    126bc <kernel_memset+0x33>
    {
        *d++ = v;
   126ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126b0:	8d 50 01             	lea    0x1(%eax),%edx
   126b3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   126b6:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   126ba:	88 10                	mov    %dl,(%eax)
    while (size--)
   126bc:	8b 45 10             	mov    0x10(%ebp),%eax
   126bf:	8d 50 ff             	lea    -0x1(%eax),%edx
   126c2:	89 55 10             	mov    %edx,0x10(%ebp)
   126c5:	85 c0                	test   %eax,%eax
   126c7:	75 e4                	jne    126ad <kernel_memset+0x24>
   126c9:	eb 01                	jmp    126cc <kernel_memset+0x43>
        return;
   126cb:	90                   	nop
    }
}
   126cc:	c9                   	leave  
   126cd:	c3                   	ret    

000126ce <kernel_memcmp>:
/* 比较 d1 和 d2 指向的内存块中的前 size 个字节 */
int kernel_memcmp(void *d1, void *d2, int size)
{
   126ce:	f3 0f 1e fb          	endbr32 
   126d2:	55                   	push   %ebp
   126d3:	89 e5                	mov    %esp,%ebp
   126d5:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   126d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126dc:	74 06                	je     126e4 <kernel_memcmp+0x16>
   126de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126e2:	75 07                	jne    126eb <kernel_memcmp+0x1d>
    {
        return 1;
   126e4:	b8 01 00 00 00       	mov    $0x1,%eax
   126e9:	eb 43                	jmp    1272e <kernel_memcmp+0x60>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   126eb:	8b 45 08             	mov    0x8(%ebp),%eax
   126ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   126f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   126f4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   126f7:	eb 23                	jmp    1271c <kernel_memcmp+0x4e>
    {
        if (*p_d1++ != *p_d2++)
   126f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126fc:	8d 50 01             	lea    0x1(%eax),%edx
   126ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12702:	0f b6 08             	movzbl (%eax),%ecx
   12705:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12708:	8d 50 01             	lea    0x1(%eax),%edx
   1270b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1270e:	0f b6 00             	movzbl (%eax),%eax
   12711:	38 c1                	cmp    %al,%cl
   12713:	74 07                	je     1271c <kernel_memcmp+0x4e>
        {
            return 1;
   12715:	b8 01 00 00 00       	mov    $0x1,%eax
   1271a:	eb 12                	jmp    1272e <kernel_memcmp+0x60>
    while (size--)
   1271c:	8b 45 10             	mov    0x10(%ebp),%eax
   1271f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12722:	89 55 10             	mov    %edx,0x10(%ebp)
   12725:	85 c0                	test   %eax,%eax
   12727:	75 d0                	jne    126f9 <kernel_memcmp+0x2b>
        }
    }

    return 0;
   12729:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1272e:	c9                   	leave  
   1272f:	c3                   	ret    

00012730 <kernel_vsprintf>:
 * 格式化字符串
 * "Version:%s", "1.0.10"
 * 将可变参数列表 vl 中的内容根据 fmt 指定的格式进行格式化，并将结果存储在 buffer 中
 */
void kernel_vsprintf(char *buffer, const char *fmt, va_list vl)
{
   12730:	f3 0f 1e fb          	endbr32 
   12734:	55                   	push   %ebp
   12735:	89 e5                	mov    %esp,%ebp
   12737:	83 ec 28             	sub    $0x28,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   1273a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    char *curr = buffer;
   12741:	8b 45 08             	mov    0x8(%ebp),%eax
   12744:	89 45 f0             	mov    %eax,-0x10(%ebp)

    /**首先，使用后缀自增运算符 ++ 将 fmt 指针向后移动一位，指向下一个字符。
     * 然后，将 fmt 指针所指向的字符赋值给变量 ch。由于 *fmt++ 的优先级比 = 高，因此这个表达式先执行了 *fmt，然后再执行 fmt++。
     * 如果 ch 的值为 0，也就是遇到了字符串的结束符，那么整个循环就会终止。否则，循环会继续执行，读取下一个字符。
     */
    while ((ch = *fmt++))
   12747:	e9 17 01 00 00       	jmp    12863 <kernel_vsprintf+0x133>
    {
        if (state == NORMAL)
   1274c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12750:	75 26                	jne    12778 <kernel_vsprintf+0x48>
        {
            if (ch == '%')
   12752:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   12756:	75 0c                	jne    12764 <kernel_vsprintf+0x34>
            {
                state = READ_FMT;
   12758:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1275f:	e9 ff 00 00 00       	jmp    12863 <kernel_vsprintf+0x133>
            }
            else
            {
                *curr++ = ch;
   12764:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12767:	8d 50 01             	lea    0x1(%eax),%edx
   1276a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1276d:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12771:	88 10                	mov    %dl,(%eax)
   12773:	e9 eb 00 00 00       	jmp    12863 <kernel_vsprintf+0x133>
            }
        }
        else
        {
            if (ch == 's')
   12778:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   1277c:	75 47                	jne    127c5 <kernel_vsprintf+0x95>
            {
                const char *str = va_arg(vl, char *);
   1277e:	8b 45 10             	mov    0x10(%ebp),%eax
   12781:	8d 50 04             	lea    0x4(%eax),%edx
   12784:	89 55 10             	mov    %edx,0x10(%ebp)
   12787:	8b 00                	mov    (%eax),%eax
   12789:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   1278c:	ff 75 ec             	pushl  -0x14(%ebp)
   1278f:	e8 e1 fd ff ff       	call   12575 <kernel_strlen>
   12794:	83 c4 04             	add    $0x4,%esp
   12797:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--)
   1279a:	eb 17                	jmp    127b3 <kernel_vsprintf+0x83>
                {
                    *curr++ = *str++;
   1279c:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1279f:	8d 42 01             	lea    0x1(%edx),%eax
   127a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
   127a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   127a8:	8d 48 01             	lea    0x1(%eax),%ecx
   127ab:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   127ae:	0f b6 12             	movzbl (%edx),%edx
   127b1:	88 10                	mov    %dl,(%eax)
                while (len--)
   127b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   127b6:	8d 50 ff             	lea    -0x1(%eax),%edx
   127b9:	89 55 e8             	mov    %edx,-0x18(%ebp)
   127bc:	85 c0                	test   %eax,%eax
   127be:	75 dc                	jne    1279c <kernel_vsprintf+0x6c>
   127c0:	e9 97 00 00 00       	jmp    1285c <kernel_vsprintf+0x12c>
                }
            }
            else if (ch == 'd')
   127c5:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   127c9:	75 34                	jne    127ff <kernel_vsprintf+0xcf>
            {
                int num = va_arg(vl, int);
   127cb:	8b 45 10             	mov    0x10(%ebp),%eax
   127ce:	8d 50 04             	lea    0x4(%eax),%edx
   127d1:	89 55 10             	mov    %edx,0x10(%ebp)
   127d4:	8b 00                	mov    (%eax),%eax
   127d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 10);
   127d9:	83 ec 04             	sub    $0x4,%esp
   127dc:	6a 0a                	push   $0xa
   127de:	ff 75 dc             	pushl  -0x24(%ebp)
   127e1:	ff 75 f0             	pushl  -0x10(%ebp)
   127e4:	e8 97 00 00 00       	call   12880 <kernel_itoa>
   127e9:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);
   127ec:	83 ec 0c             	sub    $0xc,%esp
   127ef:	ff 75 f0             	pushl  -0x10(%ebp)
   127f2:	e8 7e fd ff ff       	call   12575 <kernel_strlen>
   127f7:	83 c4 10             	add    $0x10,%esp
   127fa:	01 45 f0             	add    %eax,-0x10(%ebp)
   127fd:	eb 5d                	jmp    1285c <kernel_vsprintf+0x12c>
            }
            else if (ch == 'x')
   127ff:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   12803:	75 34                	jne    12839 <kernel_vsprintf+0x109>
            {
                int num = va_arg(vl, int);
   12805:	8b 45 10             	mov    0x10(%ebp),%eax
   12808:	8d 50 04             	lea    0x4(%eax),%edx
   1280b:	89 55 10             	mov    %edx,0x10(%ebp)
   1280e:	8b 00                	mov    (%eax),%eax
   12810:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 16);
   12813:	83 ec 04             	sub    $0x4,%esp
   12816:	6a 10                	push   $0x10
   12818:	ff 75 e0             	pushl  -0x20(%ebp)
   1281b:	ff 75 f0             	pushl  -0x10(%ebp)
   1281e:	e8 5d 00 00 00       	call   12880 <kernel_itoa>
   12823:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);
   12826:	83 ec 0c             	sub    $0xc,%esp
   12829:	ff 75 f0             	pushl  -0x10(%ebp)
   1282c:	e8 44 fd ff ff       	call   12575 <kernel_strlen>
   12831:	83 c4 10             	add    $0x10,%esp
   12834:	01 45 f0             	add    %eax,-0x10(%ebp)
   12837:	eb 23                	jmp    1285c <kernel_vsprintf+0x12c>
            }
            else if (ch == 'c')
   12839:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   1283d:	75 1d                	jne    1285c <kernel_vsprintf+0x12c>
            {
                char c = va_arg(vl, int);
   1283f:	8b 45 10             	mov    0x10(%ebp),%eax
   12842:	8d 50 04             	lea    0x4(%eax),%edx
   12845:	89 55 10             	mov    %edx,0x10(%ebp)
   12848:	8b 00                	mov    (%eax),%eax
   1284a:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *curr++ = c;
   1284d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12850:	8d 50 01             	lea    0x1(%eax),%edx
   12853:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12856:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1285a:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   1285c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while ((ch = *fmt++))
   12863:	8b 45 0c             	mov    0xc(%ebp),%eax
   12866:	8d 50 01             	lea    0x1(%eax),%edx
   12869:	89 55 0c             	mov    %edx,0xc(%ebp)
   1286c:	0f b6 00             	movzbl (%eax),%eax
   1286f:	88 45 e7             	mov    %al,-0x19(%ebp)
   12872:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   12876:	0f 85 d0 fe ff ff    	jne    1274c <kernel_vsprintf+0x1c>
        }
    }
}
   1287c:	90                   	nop
   1287d:	90                   	nop
   1287e:	c9                   	leave  
   1287f:	c3                   	ret    

00012880 <kernel_itoa>:
/* 将int 转换为 char*（ASCII） 其中 base表示进制数 */
void kernel_itoa(char * buf, int num, int base) {
   12880:	f3 0f 1e fb          	endbr32 
   12884:	55                   	push   %ebp
   12885:	89 e5                	mov    %esp,%ebp
   12887:	53                   	push   %ebx
   12888:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   1288b:	8b 45 08             	mov    0x8(%ebp),%eax
   1288e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   12891:	8b 45 0c             	mov    0xc(%ebp),%eax
   12894:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   12897:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1289b:	74 1d                	je     128ba <kernel_itoa+0x3a>
   1289d:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   128a1:	74 17                	je     128ba <kernel_itoa+0x3a>
   128a3:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   128a7:	74 11                	je     128ba <kernel_itoa+0x3a>
   128a9:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   128ad:	74 0b                	je     128ba <kernel_itoa+0x3a>
        *p = '\0';
   128af:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128b2:	c6 00 00             	movb   $0x0,(%eax)
        return;
   128b5:	e9 03 01 00 00       	jmp    129bd <kernel_itoa+0x13d>
    }

    // 只支持十进制负数
    int signed_num = 0;
   128ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   128c1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128c5:	79 19                	jns    128e0 <kernel_itoa+0x60>
   128c7:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   128cb:	75 13                	jne    128e0 <kernel_itoa+0x60>
        *p++ = '-';
   128cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128d0:	8d 50 01             	lea    0x1(%eax),%edx
   128d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   128d6:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   128d9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   128e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   128e4:	74 3b                	je     12921 <kernel_itoa+0xa1>
        do {
            char ch = num2ch[num % base + 15];
   128e6:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   128ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   128ef:	99                   	cltd   
   128f0:	f7 7d 10             	idivl  0x10(%ebp)
   128f3:	89 d0                	mov    %edx,%eax
   128f5:	83 c0 0f             	add    $0xf,%eax
   128f8:	01 c8                	add    %ecx,%eax
   128fa:	0f b6 00             	movzbl (%eax),%eax
   128fd:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   12900:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12903:	8d 50 01             	lea    0x1(%eax),%edx
   12906:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12909:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1290d:	88 10                	mov    %dl,(%eax)
            num /= base;
   1290f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12912:	99                   	cltd   
   12913:	f7 7d 10             	idivl  0x10(%ebp)
   12916:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   12919:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1291d:	75 c7                	jne    128e6 <kernel_itoa+0x66>
   1291f:	eb 4b                	jmp    1296c <kernel_itoa+0xec>
    } else {
        uint32_t u_num = (uint32_t)num;
   12921:	8b 45 0c             	mov    0xc(%ebp),%eax
   12924:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   12927:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   1292d:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12930:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12933:	ba 00 00 00 00       	mov    $0x0,%edx
   12938:	f7 f3                	div    %ebx
   1293a:	89 d0                	mov    %edx,%eax
   1293c:	83 c0 0f             	add    $0xf,%eax
   1293f:	01 c8                	add    %ecx,%eax
   12941:	0f b6 00             	movzbl (%eax),%eax
   12944:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12947:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1294a:	8d 50 01             	lea    0x1(%eax),%edx
   1294d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12950:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12954:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12956:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12959:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1295c:	ba 00 00 00 00       	mov    $0x0,%edx
   12961:	f7 f3                	div    %ebx
   12963:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12966:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1296a:	75 bb                	jne    12927 <kernel_itoa+0xa7>
    }
    *p-- = '\0';
   1296c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1296f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12972:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12975:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   12978:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1297c:	74 08                	je     12986 <kernel_itoa+0x106>
   1297e:	8b 45 08             	mov    0x8(%ebp),%eax
   12981:	83 c0 01             	add    $0x1,%eax
   12984:	eb 03                	jmp    12989 <kernel_itoa+0x109>
   12986:	8b 45 08             	mov    0x8(%ebp),%eax
   12989:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   1298c:	eb 27                	jmp    129b5 <kernel_itoa+0x135>
        char ch = *start;
   1298e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12991:	0f b6 00             	movzbl (%eax),%eax
   12994:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   12997:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1299a:	0f b6 10             	movzbl (%eax),%edx
   1299d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   129a0:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   129a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129a5:	8d 50 ff             	lea    -0x1(%eax),%edx
   129a8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   129ab:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   129af:	88 10                	mov    %dl,(%eax)
        start++;
   129b1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   129b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   129b8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   129bb:	72 d1                	jb     1298e <kernel_itoa+0x10e>
    }
}
   129bd:	83 c4 20             	add    $0x20,%esp
   129c0:	5b                   	pop    %ebx
   129c1:	5d                   	pop    %ebp
   129c2:	c3                   	ret    

000129c3 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   129c3:	f3 0f 1e fb          	endbr32 
   129c7:	55                   	push   %ebp
   129c8:	89 e5                	mov    %esp,%ebp
   129ca:	83 ec 18             	sub    $0x18,%esp
    va_list vl;
    va_start(vl, fmt);
   129cd:	8d 45 10             	lea    0x10(%ebp),%eax
   129d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_vsprintf(buffer, fmt, vl);
   129d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   129d6:	83 ec 04             	sub    $0x4,%esp
   129d9:	50                   	push   %eax
   129da:	ff 75 0c             	pushl  0xc(%ebp)
   129dd:	ff 75 08             	pushl  0x8(%ebp)
   129e0:	e8 4b fd ff ff       	call   12730 <kernel_vsprintf>
   129e5:	83 c4 10             	add    $0x10,%esp
    va_end(vl);
}
   129e8:	90                   	nop
   129e9:	c9                   	leave  
   129ea:	c3                   	ret    

000129eb <panic>:

void panic (const char * file, int line, const char * func, const char * cond) {
   129eb:	f3 0f 1e fb          	endbr32 
   129ef:	55                   	push   %ebp
   129f0:	89 e5                	mov    %esp,%ebp
   129f2:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   129f5:	83 ec 08             	sub    $0x8,%esp
   129f8:	ff 75 14             	pushl  0x14(%ebp)
   129fb:	68 4c 35 01 00       	push   $0x1354c
   12a00:	e8 e3 02 00 00       	call   12ce8 <log_printf>
   12a05:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   12a08:	ff 75 10             	pushl  0x10(%ebp)
   12a0b:	ff 75 0c             	pushl  0xc(%ebp)
   12a0e:	ff 75 08             	pushl  0x8(%ebp)
   12a11:	68 5e 35 01 00       	push   $0x1355e
   12a16:	e8 cd 02 00 00       	call   12ce8 <log_printf>
   12a1b:	83 c4 10             	add    $0x10,%esp

    for (;;) {
        hlt();
   12a1e:	e8 8c fa ff ff       	call   124af <hlt>
   12a23:	eb f9                	jmp    12a1e <panic+0x33>

00012a25 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   12a25:	55                   	push   %ebp
   12a26:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12a28:	8b 45 08             	mov    0x8(%ebp),%eax
   12a2b:	8b 40 08             	mov    0x8(%eax),%eax
   12a2e:	85 c0                	test   %eax,%eax
   12a30:	0f 94 c0             	sete   %al
   12a33:	0f b6 c0             	movzbl %al,%eax
}
   12a36:	5d                   	pop    %ebp
   12a37:	c3                   	ret    

00012a38 <list_init>:
#include "tools/list.h"
/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list) {
   12a38:	f3 0f 1e fb          	endbr32 
   12a3c:	55                   	push   %ebp
   12a3d:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12a3f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a42:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12a49:	8b 45 08             	mov    0x8(%ebp),%eax
   12a4c:	8b 50 04             	mov    0x4(%eax),%edx
   12a4f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a52:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   12a54:	8b 45 08             	mov    0x8(%ebp),%eax
   12a57:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12a5e:	90                   	nop
   12a5f:	5d                   	pop    %ebp
   12a60:	c3                   	ret    

00012a61 <list_insert_first>:
/**
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node) {
   12a61:	f3 0f 1e fb          	endbr32 
   12a65:	55                   	push   %ebp
   12a66:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   12a68:	8b 45 08             	mov    0x8(%ebp),%eax
   12a6b:	8b 10                	mov    (%eax),%edx
   12a6d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a70:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   12a73:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a76:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list)) {
   12a7c:	ff 75 08             	pushl  0x8(%ebp)
   12a7f:	e8 a1 ff ff ff       	call   12a25 <list_is_empty>
   12a84:	83 c4 04             	add    $0x4,%esp
   12a87:	85 c0                	test   %eax,%eax
   12a89:	74 15                	je     12aa0 <list_insert_first+0x3f>
        list->last = list->first = node;
   12a8b:	8b 45 08             	mov    0x8(%ebp),%eax
   12a8e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a91:	89 10                	mov    %edx,(%eax)
   12a93:	8b 45 08             	mov    0x8(%ebp),%eax
   12a96:	8b 10                	mov    (%eax),%edx
   12a98:	8b 45 08             	mov    0x8(%ebp),%eax
   12a9b:	89 50 04             	mov    %edx,0x4(%eax)
   12a9e:	eb 12                	jmp    12ab2 <list_insert_first+0x51>
    } else {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   12aa0:	8b 45 08             	mov    0x8(%ebp),%eax
   12aa3:	8b 00                	mov    (%eax),%eax
   12aa5:	8b 55 0c             	mov    0xc(%ebp),%edx
   12aa8:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   12aaa:	8b 45 08             	mov    0x8(%ebp),%eax
   12aad:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ab0:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12ab2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ab5:	8b 40 08             	mov    0x8(%eax),%eax
   12ab8:	8d 50 01             	lea    0x1(%eax),%edx
   12abb:	8b 45 08             	mov    0x8(%ebp),%eax
   12abe:	89 50 08             	mov    %edx,0x8(%eax)
}
   12ac1:	90                   	nop
   12ac2:	c9                   	leave  
   12ac3:	c3                   	ret    

00012ac4 <list_insert_last>:
/**
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node) {
   12ac4:	f3 0f 1e fb          	endbr32 
   12ac8:	55                   	push   %ebp
   12ac9:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   12acb:	8b 45 08             	mov    0x8(%ebp),%eax
   12ace:	8b 50 04             	mov    0x4(%eax),%edx
   12ad1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ad4:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   12ad6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ad9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list)) {
   12ae0:	ff 75 08             	pushl  0x8(%ebp)
   12ae3:	e8 3d ff ff ff       	call   12a25 <list_is_empty>
   12ae8:	83 c4 04             	add    $0x4,%esp
   12aeb:	85 c0                	test   %eax,%eax
   12aed:	74 16                	je     12b05 <list_insert_last+0x41>
        list->first = list->last = node;
   12aef:	8b 45 08             	mov    0x8(%ebp),%eax
   12af2:	8b 55 0c             	mov    0xc(%ebp),%edx
   12af5:	89 50 04             	mov    %edx,0x4(%eax)
   12af8:	8b 45 08             	mov    0x8(%ebp),%eax
   12afb:	8b 50 04             	mov    0x4(%eax),%edx
   12afe:	8b 45 08             	mov    0x8(%ebp),%eax
   12b01:	89 10                	mov    %edx,(%eax)
   12b03:	eb 15                	jmp    12b1a <list_insert_last+0x56>
    } else {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   12b05:	8b 45 08             	mov    0x8(%ebp),%eax
   12b08:	8b 40 04             	mov    0x4(%eax),%eax
   12b0b:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b0e:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   12b11:	8b 45 08             	mov    0x8(%ebp),%eax
   12b14:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b17:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12b1a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b1d:	8b 40 08             	mov    0x8(%eax),%eax
   12b20:	8d 50 01             	lea    0x1(%eax),%edx
   12b23:	8b 45 08             	mov    0x8(%ebp),%eax
   12b26:	89 50 08             	mov    %edx,0x8(%eax)
}
   12b29:	90                   	nop
   12b2a:	c9                   	leave  
   12b2b:	c3                   	ret    

00012b2c <list_remove_first>:
/**
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
   12b2c:	f3 0f 1e fb          	endbr32 
   12b30:	55                   	push   %ebp
   12b31:	89 e5                	mov    %esp,%ebp
   12b33:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list)) {
   12b36:	ff 75 08             	pushl  0x8(%ebp)
   12b39:	e8 e7 fe ff ff       	call   12a25 <list_is_empty>
   12b3e:	83 c4 04             	add    $0x4,%esp
   12b41:	85 c0                	test   %eax,%eax
   12b43:	74 07                	je     12b4c <list_remove_first+0x20>
        return (list_node_t*)0;
   12b45:	b8 00 00 00 00       	mov    $0x0,%eax
   12b4a:	eb 5a                	jmp    12ba6 <list_remove_first+0x7a>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   12b4c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4f:	8b 00                	mov    (%eax),%eax
   12b51:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   12b54:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b57:	8b 50 04             	mov    0x4(%eax),%edx
   12b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5d:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   12b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b62:	8b 00                	mov    (%eax),%eax
   12b64:	85 c0                	test   %eax,%eax
   12b66:	75 0c                	jne    12b74 <list_remove_first+0x48>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   12b68:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b72:	eb 0c                	jmp    12b80 <list_remove_first+0x54>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   12b74:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b77:	8b 40 04             	mov    0x4(%eax),%eax
   12b7a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   12b80:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b83:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   12b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b8c:	8b 10                	mov    (%eax),%edx
   12b8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12b91:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   12b94:	8b 45 08             	mov    0x8(%ebp),%eax
   12b97:	8b 40 08             	mov    0x8(%eax),%eax
   12b9a:	8d 50 ff             	lea    -0x1(%eax),%edx
   12b9d:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba0:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   12ba3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12ba6:	c9                   	leave  
   12ba7:	c3                   	ret    

00012ba8 <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   12ba8:	f3 0f 1e fb          	endbr32 
   12bac:	55                   	push   %ebp
   12bad:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   12baf:	8b 45 08             	mov    0x8(%ebp),%eax
   12bb2:	8b 00                	mov    (%eax),%eax
   12bb4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12bb7:	75 0b                	jne    12bc4 <list_remove+0x1c>
        list->first = remove_node->next;
   12bb9:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bbc:	8b 50 04             	mov    0x4(%eax),%edx
   12bbf:	8b 45 08             	mov    0x8(%ebp),%eax
   12bc2:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   12bc4:	8b 45 08             	mov    0x8(%ebp),%eax
   12bc7:	8b 40 04             	mov    0x4(%eax),%eax
   12bca:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12bcd:	75 0b                	jne    12bda <list_remove+0x32>
        list->last = remove_node->pre;
   12bcf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bd2:	8b 10                	mov    (%eax),%edx
   12bd4:	8b 45 08             	mov    0x8(%ebp),%eax
   12bd7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   12bda:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bdd:	8b 00                	mov    (%eax),%eax
   12bdf:	85 c0                	test   %eax,%eax
   12be1:	74 0e                	je     12bf1 <list_remove+0x49>
        remove_node->pre->next = remove_node->next;
   12be3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12be6:	8b 00                	mov    (%eax),%eax
   12be8:	8b 55 0c             	mov    0xc(%ebp),%edx
   12beb:	8b 52 04             	mov    0x4(%edx),%edx
   12bee:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   12bf1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bf4:	8b 40 04             	mov    0x4(%eax),%eax
   12bf7:	85 c0                	test   %eax,%eax
   12bf9:	74 0d                	je     12c08 <list_remove+0x60>
        remove_node->next->pre = remove_node->pre;
   12bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bfe:	8b 40 04             	mov    0x4(%eax),%eax
   12c01:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c04:	8b 12                	mov    (%edx),%edx
   12c06:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   12c08:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c0b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c12:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c15:	8b 50 04             	mov    0x4(%eax),%edx
   12c18:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c1b:	89 10                	mov    %edx,(%eax)
    --list->count;
   12c1d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c20:	8b 40 08             	mov    0x8(%eax),%eax
   12c23:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c26:	8b 45 08             	mov    0x8(%ebp),%eax
   12c29:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   12c2c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c2f:	5d                   	pop    %ebp
   12c30:	c3                   	ret    

00012c31 <inb>:
{
   12c31:	55                   	push   %ebp
   12c32:	89 e5                	mov    %esp,%ebp
   12c34:	83 ec 14             	sub    $0x14,%esp
   12c37:	8b 45 08             	mov    0x8(%ebp),%eax
   12c3a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]"
   12c3e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12c42:	89 c2                	mov    %eax,%edx
   12c44:	ec                   	in     (%dx),%al
   12c45:	88 45 ff             	mov    %al,-0x1(%ebp)
    return res;
   12c48:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12c4c:	c9                   	leave  
   12c4d:	c3                   	ret    

00012c4e <outb>:
{
   12c4e:	55                   	push   %ebp
   12c4f:	89 e5                	mov    %esp,%ebp
   12c51:	83 ec 08             	sub    $0x8,%esp
   12c54:	8b 45 08             	mov    0x8(%ebp),%eax
   12c57:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c5a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12c5e:	89 d0                	mov    %edx,%eax
   12c60:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   12c63:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12c67:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12c6b:	ee                   	out    %al,(%dx)
}
   12c6c:	90                   	nop
   12c6d:	c9                   	leave  
   12c6e:	c3                   	ret    

00012c6f <log_init>:

/**
 * @brief 初始化日志输出
 */
void log_init(void)
{
   12c6f:	f3 0f 1e fb          	endbr32 
   12c73:	55                   	push   %ebp
   12c74:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00); // Disable all interrupts
   12c76:	6a 00                	push   $0x0
   12c78:	68 f9 03 00 00       	push   $0x3f9
   12c7d:	e8 cc ff ff ff       	call   12c4e <outb>
   12c82:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80); // Enable DLAB (set baud rate divisor)
   12c85:	68 80 00 00 00       	push   $0x80
   12c8a:	68 fb 03 00 00       	push   $0x3fb
   12c8f:	e8 ba ff ff ff       	call   12c4e <outb>
   12c94:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x03); // Set divisor to 3 (lo byte) 38400 baud
   12c97:	6a 03                	push   $0x3
   12c99:	68 f8 03 00 00       	push   $0x3f8
   12c9e:	e8 ab ff ff ff       	call   12c4e <outb>
   12ca3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00); //                  (hi byte)
   12ca6:	6a 00                	push   $0x0
   12ca8:	68 f9 03 00 00       	push   $0x3f9
   12cad:	e8 9c ff ff ff       	call   12c4e <outb>
   12cb2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03); // 8 bits, no parity, one stop bit
   12cb5:	6a 03                	push   $0x3
   12cb7:	68 fb 03 00 00       	push   $0x3fb
   12cbc:	e8 8d ff ff ff       	call   12c4e <outb>
   12cc1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xC7); // Enable FIFO, clear them, with 14-byte threshold
   12cc4:	68 c7 00 00 00       	push   $0xc7
   12cc9:	68 fa 03 00 00       	push   $0x3fa
   12cce:	e8 7b ff ff ff       	call   12c4e <outb>
   12cd3:	83 c4 08             	add    $0x8,%esp

    // If serial is not faulty set it in normal operation mode
    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)
    outb(COM1_PORT + 4, 0x0F);
   12cd6:	6a 0f                	push   $0xf
   12cd8:	68 fc 03 00 00       	push   $0x3fc
   12cdd:	e8 6c ff ff ff       	call   12c4e <outb>
   12ce2:	83 c4 08             	add    $0x8,%esp
}
   12ce5:	90                   	nop
   12ce6:	c9                   	leave  
   12ce7:	c3                   	ret    

00012ce8 <log_printf>:

/**
 * @brief 日志打印:自定义printf函数 fmt 为格式化指针 ...为可变参数
 */
void log_printf(const char * fmt, ...) {
   12ce8:	f3 0f 1e fb          	endbr32 
   12cec:	55                   	push   %ebp
   12ced:	89 e5                	mov    %esp,%ebp
   12cef:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12cf5:	83 ec 04             	sub    $0x4,%esp
   12cf8:	68 80 00 00 00       	push   $0x80
   12cfd:	6a 00                	push   $0x0
   12cff:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12d05:	50                   	push   %eax
   12d06:	e8 7e f9 ff ff       	call   12689 <kernel_memset>
   12d0b:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   12d0e:	8d 45 0c             	lea    0xc(%ebp),%eax
   12d11:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   12d17:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12d1d:	83 ec 04             	sub    $0x4,%esp
   12d20:	50                   	push   %eax
   12d21:	ff 75 08             	pushl  0x8(%ebp)
   12d24:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12d2a:	50                   	push   %eax
   12d2b:	e8 00 fa ff ff       	call   12730 <kernel_vsprintf>
   12d30:	83 c4 10             	add    $0x10,%esp

    // 显示，如果发送速度太慢，会造成这里关中断太长时间
    // 所以，这里这样做不是好办法
    // irq_state_t state = irq_enter_protection();
    // 使用互斥锁
    mutex_lock(&mutex);
   12d33:	83 ec 0c             	sub    $0xc,%esp
   12d36:	68 c8 8d 01 00       	push   $0x18dc8
   12d3b:	e8 65 f2 ff ff       	call   11fa5 <mutex_lock>
   12d40:	83 c4 10             	add    $0x10,%esp
    
    const char * p = str_buf;    
   12d43:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   12d4c:	eb 3b                	jmp    12d89 <log_printf+0xa1>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   12d4e:	90                   	nop
   12d4f:	83 ec 0c             	sub    $0xc,%esp
   12d52:	68 fd 03 00 00       	push   $0x3fd
   12d57:	e8 d5 fe ff ff       	call   12c31 <inb>
   12d5c:	83 c4 10             	add    $0x10,%esp
   12d5f:	0f b6 c0             	movzbl %al,%eax
   12d62:	83 e0 40             	and    $0x40,%eax
   12d65:	85 c0                	test   %eax,%eax
   12d67:	74 e6                	je     12d4f <log_printf+0x67>
        outb(COM1_PORT, *p++);
   12d69:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d6c:	8d 50 01             	lea    0x1(%eax),%edx
   12d6f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12d72:	0f b6 00             	movzbl (%eax),%eax
   12d75:	0f b6 c0             	movzbl %al,%eax
   12d78:	83 ec 08             	sub    $0x8,%esp
   12d7b:	50                   	push   %eax
   12d7c:	68 f8 03 00 00       	push   $0x3f8
   12d81:	e8 c8 fe ff ff       	call   12c4e <outb>
   12d86:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   12d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d8c:	0f b6 00             	movzbl (%eax),%eax
   12d8f:	84 c0                	test   %al,%al
   12d91:	75 bb                	jne    12d4e <log_printf+0x66>
    }

    outb(COM1_PORT, '\r');
   12d93:	83 ec 08             	sub    $0x8,%esp
   12d96:	6a 0d                	push   $0xd
   12d98:	68 f8 03 00 00       	push   $0x3f8
   12d9d:	e8 ac fe ff ff       	call   12c4e <outb>
   12da2:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12da5:	83 ec 08             	sub    $0x8,%esp
   12da8:	6a 0a                	push   $0xa
   12daa:	68 f8 03 00 00       	push   $0x3f8
   12daf:	e8 9a fe ff ff       	call   12c4e <outb>
   12db4:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&mutex);
   12db7:	83 ec 0c             	sub    $0xc,%esp
   12dba:	68 c8 8d 01 00       	push   $0x18dc8
   12dbf:	e8 79 f2 ff ff       	call   1203d <mutex_unlock>
   12dc4:	83 c4 10             	add    $0x10,%esp
}
   12dc7:	90                   	nop
   12dc8:	c9                   	leave  
   12dc9:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
    jmp first_task_main
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
 * @LastEditTime: 2023-05-10 15:41:10
 */
#include "core/task.h"
#include "tools/log.h"

int first_task_main (void) {
80000010:	f3 0f 1e fb          	endbr32 
80000014:	55                   	push   %ebp
80000015:	89 e5                	mov    %esp,%ebp
80000017:	83 ec 08             	sub    $0x8,%esp
    for (;;) {
        log_printf("first task.");
8000001a:	83 ec 0c             	sub    $0xc,%esp
8000001d:	68 9c 35 01 00       	push   $0x1359c
80000022:	e8 c1 2c 01 80       	call   12ce8 <log_printf>
80000027:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
8000002a:	83 ec 0c             	sub    $0xc,%esp
8000002d:	68 e8 03 00 00       	push   $0x3e8
80000032:	e8 bc 10 01 80       	call   110f3 <sys_sleep>
80000037:	83 c4 10             	add    $0x10,%esp
        log_printf("first task.");
8000003a:	eb de                	jmp    8000001a <first_task_main+0xa>
