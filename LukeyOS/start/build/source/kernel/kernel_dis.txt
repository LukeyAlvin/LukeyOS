
/home/alvin/workspace/LukeyOS/LukeyOS/start/build/source/kernel/kernel.elf:     file format elf32-i386
/home/alvin/workspace/LukeyOS/LukeyOS/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00004cd9 memsz 0x00004cd9 flags r-x
    LOAD off    0x00006000 vaddr 0x00015000 paddr 0x00015000 align 2**12
         filesz 0x00000044 memsz 0x0000d020 flags rw-
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x00022020 align 2**12
         filesz 0x0000038e memsz 0x0000038e flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040eb  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000bd9  00014100  00014100  00005100  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00015000  00015000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000c020  00016000  00016000  00006044  2**12
                  ALLOC
  4 .first_task   0000038e  80000000  00022020  00007000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   000038ad  00000000  00000000  0000738e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000094cc  00000000  00000000  0000ac3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001fca  00000000  00000000  00014107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000240  00000000  00000000  000160d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00001cfb  00000000  00000000  00016318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges 00000060  00000000  00000000  00018013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .comment      0000002b  00000000  00000000  00018073  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001918  00000000  00000000  000180a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00014100 l    d  .rodata	00000000 .rodata
00015000 l    d  .data	00000000 .data
00016000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102e8 l     F .text	00000017 up2
000102ff l     F .text	0000000d down2
0001030c l     F .text	0000000c write_cr3
00010318 l     F .text	00000014 pde_index
0001032c l     F .text	00000027 pde_paddr
00010353 l     F .text	00000010 pte_index
00010363 l     F .text	00000027 pte_paddr
0001038a l     F .text	0000000f get_pte_perm
00010399 l     F .text	00000011 mmu_set_page_dir
00016000 l     O .bss	00000028 paddr_alloc
00017000 l     O .bss	00001000 kernel_page_dir
000103aa l     F .text	00000014 current_page_dir
000103be l     F .text	0000005c addr_alloc_init
0001041a l     F .text	0000006b addr_alloc_page
00010485 l     F .text	00000066 addr_free_page
000104eb l     F .text	0000006a show_mem_info
00010555 l     F .text	00000040 total_mem_size
000142c0 l     O .rodata	00000012 __func__.2002
00015000 l     O .data	00000040 kernel_map.2014
000142d4 l     O .rodata	00000011 __func__.2063
000142e8 l     O .rodata	00000013 __func__.2069
000142fc l     O .rodata	0000000c __func__.2127
00014308 l     O .rodata	00000009 __func__.2135
00000000 l    df *ABS*	00000000 syscall.c
00014320 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00011008 l     F .text	0000001b list_node_init
00011023 l     F .text	0000000b list_node_next
0001102e l     F .text	0000000b list_count
00011039 l     F .text	0000000a list_first
00011043 l     F .text	0000000c write_cr3
0001104f l     F .text	00000007 hlt
00011056 l     F .text	0000000c write_tr
00011062 l     F .text	00000011 mmu_set_page_dir
00018000 l     O .bss	000001b8 task_manager
000181c0 l     O .bss	00001000 idle_task_stack
000191c0 l     O .bss	00006200 task_table
0001f3c0 l     O .bss	00000014 task_table_mutex
00011073 l     F .text	0000018e tss_init
0001148a l     F .text	0000000e idle_task_entry
00014668 l     O .rodata	00000010 __func__.2654
00011661 l     F .text	00000047 task_next_run
000118ef l     F .text	00000070 alloc_task
0001195f l     F .text	00000037 free_task
00011b85 l     F .text	0000012d load_phdr
00014678 l     O .rodata	0000000a __func__.2732
00011cb2 l     F .text	00000220 load_elf_file
00011ed2 l     F .text	00000119 copy_args
00014684 l     O .rodata	0000000a __func__.2767
00000000 l    df *ABS*	00000000 cpu.c
0001217b l     F .text	00000028 lgdt
000121a3 l     F .text	0000001a far_jump
0001f3e0 l     O .bss	00000800 gdt_table
0001fbe0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
000123c2 l     F .text	00000007 cli
000123c9 l     F .text	00000007 sti
000123d0 l     F .text	0000001d inb
000123ed l     F .text	00000021 outb
0001240e l     F .text	00000028 lidt
00012436 l     F .text	00000011 read_cr2
00012447 l     F .text	00000007 hlt
0001244e l     F .text	00000010 read_eflags
0001245e l     F .text	0000000b write_eflags
0001fc00 l     O .bss	00000400 idt_table
00012469 l     F .text	00000103 dump_core_regs
000125b7 l     F .text	00000034 do_default_handler
000129bc l     F .text	00000097 init_pic
00000000 l    df *ABS*	00000000 time.c
00012dd8 l     F .text	00000021 outb
00020000 l     O .bss	00000004 sys_tick
00012e25 l     F .text	00000064 init_pit
00000000 l    df *ABS*	00000000 file.c
00012ea5 l     F .text	0000001d inb
00012ec2 l     F .text	0000001f inw
00012ee1 l     F .text	00000021 outb
00020004 l     O .bss	00000004 temp_pos
00012f02 l     F .text	00000134 read_disk
00000000 l    df *ABS*	00000000 init.c
00020008 l     O .bss	00000004 init_boot_info
00014bf8 l     O .rodata	00000013 __func__.2012
00000000 l    df *ABS*	00000000 mutex.c
0001320e l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000133a4 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00013755 l     F .text	00000007 hlt
00015040 l     O .data	00000004 num2ch.1728
00000000 l    df *ABS*	00000000 list.c
00013d46 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00013f52 l     F .text	0000001d inb
00013f6f l     F .text	00000021 outb
0002000c l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000fe l     F .first_task	0000004c sys_call
00013640 g     F .text	0000003d bitmap_get_bit
000138dc g     F .text	00000053 kernel_memcpy
0001310b g     F .text	0000000a sys_close
000115ee g     F .text	0000000e task_current
80000217 g     F .first_task	0000001f yield
00012d98 g     F .text	0000000f irq_enable_global
00013de5 g     F .text	00000068 list_insert_last
00010e19 g     F .text	00000135 sys_sbrk
0001216d g     F .text	0000000e sys_yield
00011864 g     F .text	0000006e sys_msleep
0001274b g     F .text	00000020 do_handler_segment_not_present
00011587 g     F .text	0000003a task_set_ready
0001367d g     F .text	0000001f bitmap_is_set
0001392f g     F .text	00000045 kernel_memset
000130e3 g     F .text	00000028 sys_lseek
0001026a g       .text	00000000 exception_handler_virtual_exception
00010f6c g     F .text	0000009c do_handler_syscall
00013c91 g     F .text	00000031 strings_count
000123a0 g     F .text	00000022 cpu_init
00013f90 g     F .text	00000079 log_init
000119fb g     F .text	0000018a sys_fork
000131d2 g     F .text	0000003c init_main
0001020f g       .text	00000000 exception_handler_alignment_check
0001234c g     F .text	0000003d gdt_free_sel
0001375c g     F .text	0000004b kernel_strcpy
00015000 g       .data	00000000 s_data
800001e6 g     F .first_task	00000031 execve
8000017c g     F .first_task	0000001f getpid
00012c6f g     F .text	0000008f irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
0001268b g     F .text	00000020 do_handler_overflow
0001293c g     F .text	00000020 do_handler_alignment_check
00010649 g     F .text	000000a4 memory_create_map
00013073 g     F .text	00000043 sys_read
000101b6 g       .text	00000000 exception_handler_general_protection
0001278b g     F .text	000000b9 do_handler_general_protection
000134cb g     F .text	0000002d sem_count
80000010 g     F .first_task	000000ee first_task_main
0001260b g     F .text	00000020 do_handler_divider
00013569 g     F .text	000000d7 bitmap_set_bit
0001270b g     F .text	00000020 do_handler_double_fault
00012844 g     F .text	000000d8 do_handler_page_fault
80000319 g     F .first_task	00000025 isatty
00010142 g       .text	00000000 exception_handler_double_fault
00012a53 g     F .text	0000002f pic_send_eoi
0001147c g     F .text	0000000e task_first_task
00010000 g       .text	00000000 s_text
0001078d g     F .text	00000089 memory_create_uvm
000133d6 g     F .text	0000006f sem_wait
00010903 g     F .text	00000026 memory_alloc_page_for
00012df9 g     F .text	0000002c do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00013123 g     F .text	0000000e sys_fstat
0001299c g     F .text	00000020 do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
800002e8 g     F .first_task	00000031 lseek
00020020 g     O .bss	00002000 stack
00010947 g     F .text	0000009d memory_free_page
00022020 g       *ABS*	00000000 s_first_task
00011996 g     F .text	00000065 task_uninit
00010816 g     F .text	000000ed memory_alloc_for_page_dir
000100e5 g       .text	00000000 exception_handler_bound_range
00013445 g     F .text	00000086 sem_notify
00010c97 g     F .text	00000087 memory_copy_uvm_data
000126cb g     F .text	00000020 do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
0001291c g     F .text	00000020 do_handler_fpu_error
00011498 g     F .text	000000ef task_first_init
0001295c g     F .text	00000020 do_handler_machine_check
80000292 g     F .first_task	00000031 write
00013036 g     F .text	0000003d sys_open
0001262b g     F .text	00000020 do_handler_Debug
8000033e g     F .first_task	0000002b fstat
00013115 g     F .text	0000000e sys_isatty
00013d82 g     F .text	00000063 list_insert_first
00011840 g     F .text	00000024 task_set_wakeup
0001264b g     F .text	00000020 do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
000137a7 g     F .text	00000074 kernel_strncpy
00012d89 g     F .text	0000000f irq_disable_global
000115fc g     F .text	00000065 sys_sched_yield
000130b6 g     F .text	0000002d sys_write
000223ae g       *ABS*	00000000 mem_free_start
00013131 g     F .text	0000003c kernel_init
000133af g     F .text	00000027 sem_init
00010000 g       .text	00000000 _start
000139d6 g     F .text	00000150 kernel_vsprintf
00013cc2 g     F .text	0000004a get_file_name
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
00022020 g       .bss	00000000 e_data
80000261 g     F .first_task	00000031 read
0001324b g     F .text	00000098 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
0001272b g     F .text	00000020 do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
000223ae g       *ABS*	00000000 e_first_task
000117fb g     F .text	00000045 task_set_sleep
00013d0c g     F .text	0000003a panic
00010289 g       .text	00000000 exception_handler_timer
00012c34 g     F .text	0000003b irq_install
00012244 g     F .text	0000008f init_gdt
800001c6 g     F .first_task	00000020 fork
00012da7 g     F .text	0000001c irq_enter_protection
00013219 g     F .text	00000032 mutex_init
00012cfe g     F .text	0000008b irq_disable
80000369 g     F .first_task	00000025 sbrk
0001024b g       .text	00000000 exception_handler_smd_exception
000109e4 g     F .text	00000113 memory_destroy_uvm
000134f8 g     F .text	0000001a bitmap_byte_count
000126eb g     F .text	00000020 do_handler_device_unavailable
000116a8 g     F .text	0000004d task_dispatch
00010af7 g     F .text	00000157 memory_copy_uvm
0001316d g     F .text	00000065 move_to_first_task
00012389 g     F .text	00000017 switch_to_tss
00013974 g     F .text	00000062 kernel_memcmp
000106ed g     F .text	000000a0 create_kernel_table
00013d59 g     F .text	00000029 list_init
0001297c g     F .text	00000020 do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
000115c1 g     F .text	0000002d task_set_block
000125eb g     F .text	00000020 do_handler_unknown
00010929 g     F .text	0000001e memory_alloc_page
000101f0 g       .text	00000000 exception_handler_fpu_error
00011feb g     F .text	00000182 sys_execv
00010f4e g     F .text	0000001e sys_printmsg
00011232 g     F .text	00000023 task_switch_from_to
00012a82 g     F .text	000001b2 irq_init
000132e3 g     F .text	000000c1 mutex_unlock
00012dc3 g     F .text	00000015 irq_leave_protection
8000019b g     F .first_task	0000002b print_msg
0001381b g     F .text	0000003f kernel_strlen
000121bd g     F .text	00000087 segment_desc_set
000126ab g     F .text	00000020 do_handler_bound_range
000102bd g       .text	00000000 exception_handler_syscall
00013e4d g     F .text	0000007c list_remove_first
00014cd9 g       .rodata	00000000 e_text
0001385a g     F .text	00000082 kernel_strncmp
00013512 g     F .text	00000057 bitmap_init
0001017c g       .text	00000000 exception_handler_segment_not_present
00010088 g       .text	00000000 exception_handler_NMI
0001369c g     F .text	000000b9 bitmap_alloc_nbits
00011391 g     F .text	000000eb task_manager_init
00011201 g     F .text	00000031 task_start
00010069 g       .text	00000000 exception_handler_Debug
000116f5 g     F .text	00000106 task_time_tick
00010d1e g     F .text	000000fb memory_init
00010c4e g     F .text	00000049 memory_get_paddr
0001276b g     F .text	00000020 do_handler_stack_segment_fault
0001266b g     F .text	00000020 do_handler_breakpoint
00014009 g     F .text	000000e2 log_printf
00011255 g     F .text	0000013c task_init
80000236 g     F .first_task	0000002b open
00013c69 g     F .text	00000028 kernel_sprintf
000118d2 g     F .text	0000001d sys_getpid
000122d3 g     F .text	00000079 gdt_alloc_desc
00013b26 g     F .text	00000143 kernel_itoa
00013ec9 g     F .text	00000089 list_remove
0001256c g     F .text	0000004b gate_desc_set
8000014a g     F .first_task	00000032 msleep
800002c3 g     F .first_task	00000025 close
00010595 g     F .text	000000b4 find_pte
00012e89 g     F .text	0000001c time_init



Disassembly of section .text:

00010000 <_start>:
	.extern kernel_init
	
	# void start(boot_info_f *boot_info)
_start:
	// 取出 boot_info 参数
	push %ebp
   10000:	55                   	push   %ebp
	mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
	mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
	# 等价于 mov 4(%exp), %eax

	// 传给 kernel_init
	# kernel_init(boot_info)
	push %eax
   10006:	50                   	push   %eax
	call kernel_init
   10007:	e8 25 31 00 00       	call   13131 <kernel_init>

    // 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 20 20 02 00       	mov    $0x22020,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10026:	e9 a7 31 00 00       	jmp    131d2 <init_main>

0001002b <exception_handler_unknown>:
		// 跳过压入的异常号和错误码
		add $(2*4), %esp
		iret
.endm
// 未知异常
exception_handler unknown, -1, 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 af 25 00 00       	call   125eb <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
// 除零异常
exception_handler divider, 0, 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 b0 25 00 00       	call   1260b <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 b1 25 00 00       	call   1262b <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 b2 25 00 00       	call   1264b <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 b3 25 00 00       	call   1266b <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 b4 25 00 00       	call   1268b <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 b5 25 00 00       	call   126ab <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 b6 25 00 00       	call   126cb <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 b7 25 00 00       	call   126eb <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 ba 25 00 00       	call   1270b <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 bd 25 00 00       	call   1272b <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 c0 25 00 00       	call   1274b <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 c3 25 00 00       	call   1276b <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 c6 25 00 00       	call   1278b <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 62 26 00 00       	call   12844 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 1b 27 00 00       	call   1291c <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 1e 27 00 00       	call   1293c <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 1f 27 00 00       	call   1295c <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 20 27 00 00       	call   1297c <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 21 27 00 00       	call   1299c <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_timer>:
// 硬件中断
exception_handler timer, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha  
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 5f 2b 00 00       	call   12df9 <do_handler_timer>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa   
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret   

000102a8 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
	.text
	.global simple_switch
simple_switch:
	movl 4(%esp), %eax   // 取from->stack
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102b0:	55                   	push   %ebp
	push %ebx
   102b1:	53                   	push   %ebx
	push %esi
   102b2:	56                   	push   %esi
	push %edi
   102b3:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102b4:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102b6:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102b8:	5f                   	pop    %edi
	pop %esi
   102b9:	5e                   	pop    %esi
	pop %ebx
   102ba:	5b                   	pop    %ebx
	pop %ebp
   102bb:	5d                   	pop    %ebp
  	ret
   102bc:	c3                   	ret    

000102bd <exception_handler_syscall>:
    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
	// 保存前一任务的状态
	// 使用pusha指令保存通用寄存器eax、ecx、edx、ebx、esp、ebp、esi和edi的值
	pusha
   102bd:	60                   	pusha  
	// 使用push指令将段寄存器ds、es、fs、gs和标志寄存器eflags的值压入栈中，以保护它们的状态
	push %ds
   102be:	1e                   	push   %ds
	push %es
   102bf:	06                   	push   %es
	push %fs
   102c0:	0f a0                	push   %fs
	push %gs
   102c2:	0f a8                	push   %gs
	pushf
   102c4:	9c                   	pushf  

	// 将内核段寄存器ds、es、fs和gs的值设置为内核数据段的选择子，以确保在系统调用处理程序中使用内核数据段
	mov $(KERNEL_SELECTOR_DS), %eax
   102c5:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   102ca:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   102cc:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   102ce:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   102d0:	8e e8                	mov    %eax,%gs

    // 调用处理函数
    mov %esp, %eax
   102d2:	89 e0                	mov    %esp,%eax
    push %eax
   102d4:	50                   	push   %eax
	call do_handler_syscall		// 使用call指令调用系统调用处理函数do_handler_syscall，以处理系统调用请求
   102d5:	e8 92 0c 00 00       	call   10f6c <do_handler_syscall>
	add $4, %esp				// 将栈顶指针恢复到正确的位置
   102da:	83 c4 04             	add    $0x4,%esp

    // 再切换回来
	popf
   102dd:	9d                   	popf   
	pop %gs
   102de:	0f a9                	pop    %gs
	pop %fs
   102e0:	0f a1                	pop    %fs
	pop %es
   102e2:	07                   	pop    %es
	pop %ds
   102e3:	1f                   	pop    %ds
	popa
   102e4:	61                   	popa   
	// 5个参数，加上5*4，不加会导致返回时ss取不出来，最后返回出现问题
   102e5:	ca 14 00             	lret   $0x14

000102e8 <up2>:
/**
 * 例如，如果 size 是 1000，bound 是 256，那么对 size 进行向上对齐后，
 * 它的值将变为 1280，即最接近 1000 且是 256 的倍数的数。
*/
// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   102e8:	55                   	push   %ebp
   102e9:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102eb:	8b 55 08             	mov    0x8(%ebp),%edx
   102ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f1:	01 d0                	add    %edx,%eax
   102f3:	8d 50 ff             	lea    -0x1(%eax),%edx
   102f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f9:	f7 d8                	neg    %eax
   102fb:	21 d0                	and    %edx,%eax
}
   102fd:	5d                   	pop    %ebp
   102fe:	c3                   	ret    

000102ff <down2>:
/**
 * 例如，如果 size 是 1000，bound 是 256，那么对 size 进行向下对齐后，
 * 它的值将变为 768，即最接近 1000 且是 256 的倍数的数。
*/
// 向下对齐到页边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   102ff:	55                   	push   %ebp
   10300:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   10302:	8b 45 0c             	mov    0xc(%ebp),%eax
   10305:	f7 d8                	neg    %eax
   10307:	23 45 08             	and    0x8(%ebp),%eax
}
   1030a:	5d                   	pop    %ebp
   1030b:	c3                   	ret    

0001030c <write_cr3>:
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

// 写入 CR3 指令,CR3 在项目中用于存储页目录表的物理地址。
static inline void write_cr3(uint32_t v) {
   1030c:	55                   	push   %ebp
   1030d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1030f:	8b 45 08             	mov    0x8(%ebp),%eax
   10312:	0f 22 d8             	mov    %eax,%cr3
}
   10315:	90                   	nop
   10316:	5d                   	pop    %ebp
   10317:	c3                   	ret    

00010318 <pde_index>:

/**
 * @brief 返获取页目录项的索引：将虚拟地址的高 10 位作为页目录项的索引。
 */
static inline uint32_t pde_index(uint32_t vaddr)
{
   10318:	55                   	push   %ebp
   10319:	89 e5                	mov    %esp,%ebp
   1031b:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   1031e:	8b 45 08             	mov    0x8(%ebp),%eax
   10321:	c1 e8 16             	shr    $0x16,%eax
   10324:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10327:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1032a:	c9                   	leave  
   1032b:	c3                   	ret    

0001032c <pde_paddr>:

/**
 * @brief 获取页目录项中的物理地址
 */
static inline uint32_t pde_paddr(pde_t *pde)
{
   1032c:	55                   	push   %ebp
   1032d:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   1032f:	8b 45 08             	mov    0x8(%ebp),%eax
   10332:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10336:	c0 ea 04             	shr    $0x4,%dl
   10339:	0f b6 d2             	movzbl %dl,%edx
   1033c:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10340:	c1 e1 04             	shl    $0x4,%ecx
   10343:	09 ca                	or     %ecx,%edx
   10345:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10349:	c1 e0 0c             	shl    $0xc,%eax
   1034c:	09 d0                	or     %edx,%eax
   1034e:	c1 e0 0c             	shl    $0xc,%eax
}
   10351:	5d                   	pop    %ebp
   10352:	c3                   	ret    

00010353 <pte_index>:

/**
 * @brief 获取页表项的索引：将虚拟地址的中间 10 位作为页表项的索引。
 */
static inline int pte_index(uint32_t vaddr)
{
   10353:	55                   	push   %ebp
   10354:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF; // 取中间10位
   10356:	8b 45 08             	mov    0x8(%ebp),%eax
   10359:	c1 e8 0c             	shr    $0xc,%eax
   1035c:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   10361:	5d                   	pop    %ebp
   10362:	c3                   	ret    

00010363 <pte_paddr>:

/**
 * @brief 获取页表项中的物理地址
 */
static inline uint32_t pte_paddr(pte_t *pte)
{
   10363:	55                   	push   %ebp
   10364:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10366:	8b 45 08             	mov    0x8(%ebp),%eax
   10369:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1036d:	c0 ea 04             	shr    $0x4,%dl
   10370:	0f b6 d2             	movzbl %dl,%edx
   10373:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10377:	c1 e1 04             	shl    $0x4,%ecx
   1037a:	09 ca                	or     %ecx,%edx
   1037c:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10380:	c1 e0 0c             	shl    $0xc,%eax
   10383:	09 d0                	or     %edx,%eax
   10385:	c1 e0 0c             	shl    $0xc,%eax
}
   10388:	5d                   	pop    %ebp
   10389:	c3                   	ret    

0001038a <get_pte_perm>:

/**
 * @brief 获取页表项中的权限位
 */
static inline uint32_t get_pte_perm(pte_t *pte)
{
   1038a:	55                   	push   %ebp
   1038b:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF); // 2023年2月19 同学发现有问题，改了下
   1038d:	8b 45 08             	mov    0x8(%ebp),%eax
   10390:	8b 00                	mov    (%eax),%eax
   10392:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   10397:	5d                   	pop    %ebp
   10398:	c3                   	ret    

00010399 <mmu_set_page_dir>:
/**
 * @brief 设置页目录表的物理地址
 * @param paddr 页目录表的物理地址
 */
static inline void mmu_set_page_dir(uint32_t paddr)
{
   10399:	55                   	push   %ebp
   1039a:	89 e5                	mov    %esp,%ebp
    // 将该物理地址写入控制寄存器CR3中，从而更新页目录表的物理地址
    write_cr3(paddr);
   1039c:	ff 75 08             	pushl  0x8(%ebp)
   1039f:	e8 68 ff ff ff       	call   1030c <write_cr3>
   103a4:	83 c4 04             	add    $0x4,%esp
}
   103a7:	90                   	nop
   103a8:	c9                   	leave  
   103a9:	c3                   	ret    

000103aa <current_page_dir>:
static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE))); // 内核页目录表

/**
 * @brief 获取当前页表地址
 */
static pde_t * current_page_dir (void) {
   103aa:	f3 0f 1e fb          	endbr32 
   103ae:	55                   	push   %ebp
   103af:	89 e5                	mov    %esp,%ebp
   103b1:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103b4:	e8 35 12 00 00       	call   115ee <task_current>
   103b9:	8b 40 1c             	mov    0x1c(%eax),%eax
}
   103bc:	c9                   	leave  
   103bd:	c3                   	ret    

000103be <addr_alloc_init>:
 * @param {uint32_t} start          所管理内存的起始地址
 * @param {uint32_t} size           所管理内存的大小
 * @param {uint32_t} page_size      所管理内存的每一页的大小
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start, uint32_t size, uint32_t page_size)
{
   103be:	f3 0f 1e fb          	endbr32 
   103c2:	55                   	push   %ebp
   103c3:	89 e5                	mov    %esp,%ebp
   103c5:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103c8:	8b 45 08             	mov    0x8(%ebp),%eax
   103cb:	83 ec 0c             	sub    $0xc,%esp
   103ce:	50                   	push   %eax
   103cf:	e8 45 2e 00 00       	call   13219 <mutex_init>
   103d4:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103d7:	8b 45 08             	mov    0x8(%ebp),%eax
   103da:	8b 55 10             	mov    0x10(%ebp),%edx
   103dd:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   103e0:	8b 45 08             	mov    0x8(%ebp),%eax
   103e3:	8b 55 14             	mov    0x14(%ebp),%edx
   103e6:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   103e9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ec:	8b 55 18             	mov    0x18(%ebp),%edx
   103ef:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   103f2:	8b 45 08             	mov    0x8(%ebp),%eax
   103f5:	8b 40 24             	mov    0x24(%eax),%eax
   103f8:	ba 00 00 00 00       	mov    $0x0,%edx
   103fd:	f7 75 18             	divl   0x18(%ebp)
   10400:	89 c2                	mov    %eax,%edx
   10402:	8b 45 08             	mov    0x8(%ebp),%eax
   10405:	83 c0 14             	add    $0x14,%eax
   10408:	6a 00                	push   $0x0
   1040a:	52                   	push   %edx
   1040b:	ff 75 0c             	pushl  0xc(%ebp)
   1040e:	50                   	push   %eax
   1040f:	e8 fe 30 00 00       	call   13512 <bitmap_init>
   10414:	83 c4 10             	add    $0x10,%esp
}
   10417:	90                   	nop
   10418:	c9                   	leave  
   10419:	c3                   	ret    

0001041a <addr_alloc_page>:
 * @return {*}  返回分配好内存的基地址
 * @param {addr_alloc_t *} alloc    地址分配器的结构
 * @param {int} page_count          分配的页数
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   1041a:	f3 0f 1e fb          	endbr32 
   1041e:	55                   	push   %ebp
   1041f:	89 e5                	mov    %esp,%ebp
   10421:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10424:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1042b:	8b 45 08             	mov    0x8(%ebp),%eax
   1042e:	83 ec 0c             	sub    $0xc,%esp
   10431:	50                   	push   %eax
   10432:	e8 14 2e 00 00       	call   1324b <mutex_lock>
   10437:	83 c4 10             	add    $0x10,%esp
    // 连续分配若干指定比特位，返回起始索引 page_index 一页就是一个bit位
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1043a:	8b 45 08             	mov    0x8(%ebp),%eax
   1043d:	83 c0 14             	add    $0x14,%eax
   10440:	83 ec 04             	sub    $0x4,%esp
   10443:	ff 75 0c             	pushl  0xc(%ebp)
   10446:	6a 00                	push   $0x0
   10448:	50                   	push   %eax
   10449:	e8 4e 32 00 00       	call   1369c <bitmap_alloc_nbits>
   1044e:	83 c4 10             	add    $0x10,%esp
   10451:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   10454:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10458:	78 17                	js     10471 <addr_alloc_page+0x57>
    {
        // 例如，如果起始地址S是0x1000，页大小P是0x1000，分配的页索引i是2，则分配的起始地址为：addr = 0x1000 + 2 * 0x1000 = 0x3000
        addr = alloc->start + page_index * alloc->page_size;
   1045a:	8b 45 08             	mov    0x8(%ebp),%eax
   1045d:	8b 50 20             	mov    0x20(%eax),%edx
   10460:	8b 45 08             	mov    0x8(%ebp),%eax
   10463:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10466:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10469:	0f af c1             	imul   %ecx,%eax
   1046c:	01 d0                	add    %edx,%eax
   1046e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   10471:	8b 45 08             	mov    0x8(%ebp),%eax
   10474:	83 ec 0c             	sub    $0xc,%esp
   10477:	50                   	push   %eax
   10478:	e8 66 2e 00 00       	call   132e3 <mutex_unlock>
   1047d:	83 c4 10             	add    $0x10,%esp
    return addr;
   10480:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10483:	c9                   	leave  
   10484:	c3                   	ret    

00010485 <addr_free_page>:
 * @param {addr_alloc_t *} alloc    地址分配器的结构
 * @param {uint32_t} addr   即将释放的内存块的基地址
 * @param {int} page_count  释放的页数
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   10485:	f3 0f 1e fb          	endbr32 
   10489:	55                   	push   %ebp
   1048a:	89 e5                	mov    %esp,%ebp
   1048c:	53                   	push   %ebx
   1048d:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   10490:	8b 45 08             	mov    0x8(%ebp),%eax
   10493:	83 ec 0c             	sub    $0xc,%esp
   10496:	50                   	push   %eax
   10497:	e8 af 2d 00 00       	call   1324b <mutex_lock>
   1049c:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   1049f:	8b 45 08             	mov    0x8(%ebp),%eax
   104a2:	8b 40 20             	mov    0x20(%eax),%eax
   104a5:	8b 55 0c             	mov    0xc(%ebp),%edx
   104a8:	89 d1                	mov    %edx,%ecx
   104aa:	29 c1                	sub    %eax,%ecx
   104ac:	8b 45 08             	mov    0x8(%ebp),%eax
   104af:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104b2:	89 c8                	mov    %ecx,%eax
   104b4:	ba 00 00 00 00       	mov    $0x0,%edx
   104b9:	f7 f3                	div    %ebx
   104bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104c1:	8b 55 08             	mov    0x8(%ebp),%edx
   104c4:	83 c2 14             	add    $0x14,%edx
   104c7:	6a 00                	push   $0x0
   104c9:	ff 75 10             	pushl  0x10(%ebp)
   104cc:	50                   	push   %eax
   104cd:	52                   	push   %edx
   104ce:	e8 96 30 00 00       	call   13569 <bitmap_set_bit>
   104d3:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   104d6:	8b 45 08             	mov    0x8(%ebp),%eax
   104d9:	83 ec 0c             	sub    $0xc,%esp
   104dc:	50                   	push   %eax
   104dd:	e8 01 2e 00 00       	call   132e3 <mutex_unlock>
   104e2:	83 c4 10             	add    $0x10,%esp
}
   104e5:	90                   	nop
   104e6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104e9:	c9                   	leave  
   104ea:	c3                   	ret    

000104eb <show_mem_info>:
 * @description: 将系统可用的物理内存区域信息输出到终端，方便用户查看和分析系统内存使用情况。
 * @return {*}
 * @param {boot_info_t} *boot_info 描述每一块可用内存的信息
 */
static void show_mem_info(boot_info_t *boot_info)
{
   104eb:	f3 0f 1e fb          	endbr32 
   104ef:	55                   	push   %ebp
   104f0:	89 e5                	mov    %esp,%ebp
   104f2:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104f5:	83 ec 0c             	sub    $0xc,%esp
   104f8:	68 00 41 01 00       	push   $0x14100
   104fd:	e8 07 3b 00 00       	call   14009 <log_printf>
   10502:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10505:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1050c:	eb 29                	jmp    10537 <show_mem_info+0x4c>
    {
        log_printf("[%d]: 0x%x - 0x%x", i,
   1050e:	8b 45 08             	mov    0x8(%ebp),%eax
   10511:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10514:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10518:	8b 45 08             	mov    0x8(%ebp),%eax
   1051b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   1051e:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10521:	52                   	push   %edx
   10522:	50                   	push   %eax
   10523:	ff 75 f4             	pushl  -0xc(%ebp)
   10526:	68 0c 41 01 00       	push   $0x1410c
   1052b:	e8 d9 3a 00 00       	call   14009 <log_printf>
   10530:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10533:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10537:	8b 45 08             	mov    0x8(%ebp),%eax
   1053a:	8b 40 50             	mov    0x50(%eax),%eax
   1053d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10540:	7c cc                	jl     1050e <show_mem_info+0x23>
                   boot_info->ram_region_cfg[i].start,
                   boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   10542:	83 ec 0c             	sub    $0xc,%esp
   10545:	68 1e 41 01 00       	push   $0x1411e
   1054a:	e8 ba 3a 00 00       	call   14009 <log_printf>
   1054f:	83 c4 10             	add    $0x10,%esp
}
   10552:	90                   	nop
   10553:	c9                   	leave  
   10554:	c3                   	ret    

00010555 <total_mem_size>:

/**
 * @brief 获取可用的总的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   10555:	f3 0f 1e fb          	endbr32 
   10559:	55                   	push   %ebp
   1055a:	89 e5                	mov    %esp,%ebp
   1055c:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   1055f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10566:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1056d:	eb 16                	jmp    10585 <total_mem_size+0x30>
    {
        mem_size += boot_info->ram_region_cfg[i].size;
   1056f:	8b 45 08             	mov    0x8(%ebp),%eax
   10572:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10575:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10579:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1057c:	01 d0                	add    %edx,%eax
   1057e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10581:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10585:	8b 45 08             	mov    0x8(%ebp),%eax
   10588:	8b 40 50             	mov    0x50(%eax),%eax
   1058b:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1058e:	7c df                	jl     1056f <total_mem_size+0x1a>
    }
    return mem_size;
   10590:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10593:	c9                   	leave  
   10594:	c3                   	ret    

00010595 <find_pte>:
 * @param {pde_t *} page_dir    指向页面目录的指针
 * @param {uint32_t} vaddr      需要查找的虚拟地址；
 * @param {int} alloc           指示是否需要在必要时分配新的页表
 */
pte_t *find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   10595:	f3 0f 1e fb          	endbr32 
   10599:	55                   	push   %ebp
   1059a:	89 e5                	mov    %esp,%ebp
   1059c:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table;
    // 获取页目录项的索引：将虚拟地址的高 10 位作为页目录项的索引。
    pde_t *pde = page_dir + pde_index(vaddr);
   1059f:	ff 75 0c             	pushl  0xc(%ebp)
   105a2:	e8 71 fd ff ff       	call   10318 <pde_index>
   105a7:	83 c4 04             	add    $0x4,%esp
   105aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105b1:	8b 45 08             	mov    0x8(%ebp),%eax
   105b4:	01 d0                	add    %edx,%eax
   105b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   105b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105bc:	0f b6 00             	movzbl (%eax),%eax
   105bf:	83 e0 01             	and    $0x1,%eax
   105c2:	84 c0                	test   %al,%al
   105c4:	74 10                	je     105d6 <find_pte+0x41>
    {
        // 获取页目录项中存储的页表物理地址
        page_table = (pte_t *)pde_paddr(pde);
   105c6:	ff 75 f0             	pushl  -0x10(%ebp)
   105c9:	e8 5e fd ff ff       	call   1032c <pde_paddr>
   105ce:	83 c4 04             	add    $0x4,%esp
   105d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105d4:	eb 57                	jmp    1062d <find_pte+0x98>
    }
    else
    {
        // 如果不存在，则考虑分配一个
        if (alloc == 0)
   105d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105da:	75 07                	jne    105e3 <find_pte+0x4e>
        {
            return (pte_t *)0;
   105dc:	b8 00 00 00 00       	mov    $0x0,%eax
   105e1:	eb 64                	jmp    10647 <find_pte+0xb2>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   105e3:	83 ec 08             	sub    $0x8,%esp
   105e6:	6a 01                	push   $0x1
   105e8:	68 00 60 01 00       	push   $0x16000
   105ed:	e8 28 fe ff ff       	call   1041a <addr_alloc_page>
   105f2:	83 c4 10             	add    $0x10,%esp
   105f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0)
   105f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   105fc:	75 07                	jne    10605 <find_pte+0x70>
        {
            return (pte_t *)0;
   105fe:	b8 00 00 00 00       	mov    $0x0,%eax
   10603:	eb 42                	jmp    10647 <find_pte+0xb2>
        }

        // pde建立pte之间的关系
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U; // 设置为用户可读写，将被pte中设置所覆盖
   10605:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10608:	83 c8 07             	or     $0x7,%eax
   1060b:	89 c2                	mov    %eax,%edx
   1060d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10610:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        // kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   10612:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10615:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   10618:	83 ec 04             	sub    $0x4,%esp
   1061b:	68 00 10 00 00       	push   $0x1000
   10620:	6a 00                	push   $0x0
   10622:	ff 75 f4             	pushl  -0xc(%ebp)
   10625:	e8 05 33 00 00       	call   1392f <kernel_memset>
   1062a:	83 c4 10             	add    $0x10,%esp
    }
    // 取出pte表项
    return page_table + pte_index(vaddr);
   1062d:	83 ec 0c             	sub    $0xc,%esp
   10630:	ff 75 0c             	pushl  0xc(%ebp)
   10633:	e8 1b fd ff ff       	call   10353 <pte_index>
   10638:	83 c4 10             	add    $0x10,%esp
   1063b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10642:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10645:	01 d0                	add    %edx,%eax
}
   10647:	c9                   	leave  
   10648:	c3                   	ret    

00010649 <memory_create_map>:
 * @param {uint32_t} paddr      物理地址的起始地址
 * @param {int} count           要映射的物理页的数量
 * @param {uint32_t} perm       要设置的页面权限
 */
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   10649:	f3 0f 1e fb          	endbr32 
   1064d:	55                   	push   %ebp
   1064e:	89 e5                	mov    %esp,%ebp
   10650:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++)
   10653:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1065a:	eb 7e                	jmp    106da <memory_create_map+0x91>
    {
        // log_printf("create map: vaddr-0x%x paddr-0x%x, perm: 0x%x", vaddr, paddr, perm);
        // 查找与给定虚拟地址 vaddr 对应的页表条目（PTE）
        pte_t *pte = find_pte(page_dir, vaddr, 1);
   1065c:	83 ec 04             	sub    $0x4,%esp
   1065f:	6a 01                	push   $0x1
   10661:	ff 75 0c             	pushl  0xc(%ebp)
   10664:	ff 75 08             	pushl  0x8(%ebp)
   10667:	e8 29 ff ff ff       	call   10595 <find_pte>
   1066c:	83 c4 10             	add    $0x10,%esp
   1066f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   10672:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10676:	75 17                	jne    1068f <memory_create_map+0x46>
        {
            log_printf("create pte failed. pte == 0");
   10678:	83 ec 0c             	sub    $0xc,%esp
   1067b:	68 20 41 01 00       	push   $0x14120
   10680:	e8 84 39 00 00       	call   14009 <log_printf>
   10685:	83 c4 10             	add    $0x10,%esp
            return -1;
   10688:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1068d:	eb 5c                	jmp    106eb <memory_create_map+0xa2>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1068f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10692:	0f b6 00             	movzbl (%eax),%eax
   10695:	83 e0 01             	and    $0x1,%eax
   10698:	84 c0                	test   %al,%al
   1069a:	74 1c                	je     106b8 <memory_create_map+0x6f>
   1069c:	68 3c 41 01 00       	push   $0x1413c
   106a1:	68 c0 42 01 00       	push   $0x142c0
   106a6:	68 ba 00 00 00       	push   $0xba
   106ab:	68 50 41 01 00       	push   $0x14150
   106b0:	e8 57 36 00 00       	call   13d0c <panic>
   106b5:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106b8:	8b 45 10             	mov    0x10(%ebp),%eax
   106bb:	0b 45 18             	or     0x18(%ebp),%eax
   106be:	83 c8 01             	or     $0x1,%eax
   106c1:	89 c2                	mov    %eax,%edx
   106c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106c6:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106c8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106cf:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++)
   106d6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106da:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106dd:	3b 45 14             	cmp    0x14(%ebp),%eax
   106e0:	0f 8c 76 ff ff ff    	jl     1065c <memory_create_map+0x13>
    }

    return 0;
   106e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106eb:	c9                   	leave  
   106ec:	c3                   	ret    

000106ed <create_kernel_table>:

/**
 * @brief 创建内核的地址映射表
 */
void create_kernel_table(void)
{
   106ed:	f3 0f 1e fb          	endbr32 
   106f1:	55                   	push   %ebp
   106f2:	89 e5                	mov    %esp,%ebp
   106f4:	83 ec 28             	sub    $0x28,%esp
        // 扩展存储空间一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END,     (void *)MEM_EXT_START, PTE_W},
    };

    // 计算出每个内存区域需要映射的页数和每个页的虚拟地址和物理地址之间的映射关系。
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   106f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106fe:	eb 7d                	jmp    1077d <create_kernel_table+0x90>
    {
        memory_map_t *map = kernel_map + i;
   10700:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10703:	c1 e0 04             	shl    $0x4,%eax
   10706:	05 00 50 01 00       	add    $0x15000,%eax
   1070b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1070e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10711:	8b 00                	mov    (%eax),%eax
   10713:	68 00 10 00 00       	push   $0x1000
   10718:	50                   	push   %eax
   10719:	e8 e1 fb ff ff       	call   102ff <down2>
   1071e:	83 c4 08             	add    $0x8,%esp
   10721:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10724:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10727:	8b 40 04             	mov    0x4(%eax),%eax
   1072a:	68 00 10 00 00       	push   $0x1000
   1072f:	50                   	push   %eax
   10730:	e8 b3 fb ff ff       	call   102e8 <up2>
   10735:	83 c4 08             	add    $0x8,%esp
   10738:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1073b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1073e:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10741:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   10747:	85 c0                	test   %eax,%eax
   10749:	0f 48 c2             	cmovs  %edx,%eax
   1074c:	c1 f8 0c             	sar    $0xc,%eax
   1074f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // log_printf("%dth area :  vstart:%d, vend:%d, page_count:%d", i, vstart, vend, page_count);
        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10752:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10755:	8b 50 0c             	mov    0xc(%eax),%edx
   10758:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1075b:	8b 40 08             	mov    0x8(%eax),%eax
   1075e:	89 c1                	mov    %eax,%ecx
   10760:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10763:	83 ec 0c             	sub    $0xc,%esp
   10766:	52                   	push   %edx
   10767:	ff 75 e4             	pushl  -0x1c(%ebp)
   1076a:	51                   	push   %ecx
   1076b:	50                   	push   %eax
   1076c:	68 00 70 01 00       	push   $0x17000
   10771:	e8 d3 fe ff ff       	call   10649 <memory_create_map>
   10776:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   10779:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1077d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10780:	83 f8 03             	cmp    $0x3,%eax
   10783:	0f 86 77 ff ff ff    	jbe    10700 <create_kernel_table+0x13>
    }
}
   10789:	90                   	nop
   1078a:	90                   	nop
   1078b:	c9                   	leave  
   1078c:	c3                   	ret    

0001078d <memory_create_uvm>:
/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm(void)
{
   1078d:	f3 0f 1e fb          	endbr32 
   10791:	55                   	push   %ebp
   10792:	89 e5                	mov    %esp,%ebp
   10794:	83 ec 18             	sub    $0x18,%esp
    pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10797:	83 ec 08             	sub    $0x8,%esp
   1079a:	6a 01                	push   $0x1
   1079c:	68 00 60 01 00       	push   $0x16000
   107a1:	e8 74 fc ff ff       	call   1041a <addr_alloc_page>
   107a6:	83 c4 10             	add    $0x10,%esp
   107a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0)
   107ac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107b0:	75 07                	jne    107b9 <memory_create_uvm+0x2c>
    {
        return 0;
   107b2:	b8 00 00 00 00       	mov    $0x0,%eax
   107b7:	eb 5b                	jmp    10814 <memory_create_uvm+0x87>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107b9:	83 ec 04             	sub    $0x4,%esp
   107bc:	68 00 10 00 00       	push   $0x1000
   107c1:	6a 00                	push   $0x0
   107c3:	ff 75 f0             	pushl  -0x10(%ebp)
   107c6:	e8 64 31 00 00       	call   1392f <kernel_memset>
   107cb:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107ce:	83 ec 0c             	sub    $0xc,%esp
   107d1:	68 00 00 00 80       	push   $0x80000000
   107d6:	e8 3d fb ff ff       	call   10318 <pde_index>
   107db:	83 c4 10             	add    $0x10,%esp
   107de:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++)
   107e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107e8:	eb 1f                	jmp    10809 <memory_create_uvm+0x7c>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   107ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107f7:	01 c2                	add    %eax,%edx
   107f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107fc:	8b 04 85 00 70 01 00 	mov    0x17000(,%eax,4),%eax
   10803:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++)
   10805:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10809:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1080f:	77 d9                	ja     107ea <memory_create_uvm+0x5d>
    }

    return (uint32_t)page_dir;
   10811:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10814:	c9                   	leave  
   10815:	c3                   	ret    

00010816 <memory_alloc_for_page_dir>:
 * @param {uint32_t} page_dir   页目录的地址
 * @param {uint32_t} vaddr      虚拟地址的起始地址
 * @param {uint32_t} size       需要分配的虚拟地址空间大小
 * @param {int} perm            映射的权限
 */
uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   10816:	f3 0f 1e fb          	endbr32 
   1081a:	55                   	push   %ebp
   1081b:	89 e5                	mov    %esp,%ebp
   1081d:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10820:	8b 45 0c             	mov    0xc(%ebp),%eax
   10823:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10826:	68 00 10 00 00       	push   $0x1000
   1082b:	ff 75 10             	pushl  0x10(%ebp)
   1082e:	e8 b5 fa ff ff       	call   102e8 <up2>
   10833:	83 c4 08             	add    $0x8,%esp
   10836:	c1 e8 0c             	shr    $0xc,%eax
   10839:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   1083c:	68 00 10 00 00       	push   $0x1000
   10841:	ff 75 0c             	pushl  0xc(%ebp)
   10844:	e8 b6 fa ff ff       	call   102ff <down2>
   10849:	83 c4 08             	add    $0x8,%esp
   1084c:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++) {
   1084f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10856:	e9 95 00 00 00       	jmp    108f0 <memory_alloc_for_page_dir+0xda>
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   1085b:	83 ec 08             	sub    $0x8,%esp
   1085e:	6a 01                	push   $0x1
   10860:	68 00 60 01 00       	push   $0x16000
   10865:	e8 b0 fb ff ff       	call   1041a <addr_alloc_page>
   1086a:	83 c4 10             	add    $0x10,%esp
   1086d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10870:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10874:	75 17                	jne    1088d <memory_alloc_for_page_dir+0x77>
            log_printf("mem alloc failed. no memory");
   10876:	83 ec 0c             	sub    $0xc,%esp
   10879:	68 98 41 01 00       	push   $0x14198
   1087e:	e8 86 37 00 00       	call   14009 <log_printf>
   10883:	83 c4 10             	add    $0x10,%esp
            return 0;
   10886:	b8 00 00 00 00       	mov    $0x0,%eax
   1088b:	eb 74                	jmp    10901 <memory_alloc_for_page_dir+0xeb>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   1088d:	8b 55 14             	mov    0x14(%ebp),%edx
   10890:	8b 45 08             	mov    0x8(%ebp),%eax
   10893:	83 ec 0c             	sub    $0xc,%esp
   10896:	52                   	push   %edx
   10897:	6a 01                	push   $0x1
   10899:	ff 75 e8             	pushl  -0x18(%ebp)
   1089c:	ff 75 f4             	pushl  -0xc(%ebp)
   1089f:	50                   	push   %eax
   108a0:	e8 a4 fd ff ff       	call   10649 <memory_create_map>
   108a5:	83 c4 20             	add    $0x20,%esp
   108a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   108ab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   108af:	79 34                	jns    108e5 <memory_alloc_for_page_dir+0xcf>
            log_printf("create memory map failed. err = %d", err);
   108b1:	83 ec 08             	sub    $0x8,%esp
   108b4:	ff 75 e4             	pushl  -0x1c(%ebp)
   108b7:	68 b4 41 01 00       	push   $0x141b4
   108bc:	e8 48 37 00 00       	call   14009 <log_printf>
   108c1:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&paddr_alloc, vaddr, i + 1);
   108c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108c7:	83 c0 01             	add    $0x1,%eax
   108ca:	83 ec 04             	sub    $0x4,%esp
   108cd:	50                   	push   %eax
   108ce:	ff 75 0c             	pushl  0xc(%ebp)
   108d1:	68 00 60 01 00       	push   $0x16000
   108d6:	e8 aa fb ff ff       	call   10485 <addr_free_page>
   108db:	83 c4 10             	add    $0x10,%esp
            return -1;  
   108de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   108e3:	eb 1c                	jmp    10901 <memory_alloc_for_page_dir+0xeb>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   108e5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   108ec:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   108f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108f3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   108f6:	0f 8c 5f ff ff ff    	jl     1085b <memory_alloc_for_page_dir+0x45>
    }

    return 0;
   108fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10901:	c9                   	leave  
   10902:	c3                   	ret    

00010903 <memory_alloc_page_for>:
/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for (uint32_t addr, uint32_t size, int perm) {
   10903:	f3 0f 1e fb          	endbr32 
   10907:	55                   	push   %ebp
   10908:	89 e5                	mov    %esp,%ebp
   1090a:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   1090d:	e8 dc 0c 00 00       	call   115ee <task_current>
   10912:	8b 40 1c             	mov    0x1c(%eax),%eax
   10915:	ff 75 10             	pushl  0x10(%ebp)
   10918:	ff 75 0c             	pushl  0xc(%ebp)
   1091b:	ff 75 08             	pushl  0x8(%ebp)
   1091e:	50                   	push   %eax
   1091f:	e8 f2 fe ff ff       	call   10816 <memory_alloc_for_page_dir>
   10924:	83 c4 10             	add    $0x10,%esp
}
   10927:	c9                   	leave  
   10928:	c3                   	ret    

00010929 <memory_alloc_page>:

/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page (void) {
   10929:	f3 0f 1e fb          	endbr32 
   1092d:	55                   	push   %ebp
   1092e:	89 e5                	mov    %esp,%ebp
   10930:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   10933:	83 ec 08             	sub    $0x8,%esp
   10936:	6a 01                	push   $0x1
   10938:	68 00 60 01 00       	push   $0x16000
   1093d:	e8 d8 fa ff ff       	call   1041a <addr_alloc_page>
   10942:	83 c4 10             	add    $0x10,%esp
}
   10945:	c9                   	leave  
   10946:	c3                   	ret    

00010947 <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page (uint32_t addr) {
   10947:	f3 0f 1e fb          	endbr32 
   1094b:	55                   	push   %ebp
   1094c:	89 e5                	mov    %esp,%ebp
   1094e:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE) {
   10951:	8b 45 08             	mov    0x8(%ebp),%eax
   10954:	85 c0                	test   %eax,%eax
   10956:	78 17                	js     1096f <memory_free_page+0x28>
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   10958:	83 ec 04             	sub    $0x4,%esp
   1095b:	6a 01                	push   $0x1
   1095d:	ff 75 08             	pushl  0x8(%ebp)
   10960:	68 00 60 01 00       	push   $0x16000
   10965:	e8 1b fb ff ff       	call   10485 <addr_free_page>
   1096a:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   1096d:	eb 72                	jmp    109e1 <memory_free_page+0x9a>
        pte_t * pte = find_pte(current_page_dir(), addr, 0);
   1096f:	e8 36 fa ff ff       	call   103aa <current_page_dir>
   10974:	83 ec 04             	sub    $0x4,%esp
   10977:	6a 00                	push   $0x0
   10979:	ff 75 08             	pushl  0x8(%ebp)
   1097c:	50                   	push   %eax
   1097d:	e8 13 fc ff ff       	call   10595 <find_pte>
   10982:	83 c4 10             	add    $0x10,%esp
   10985:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10988:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1098c:	75 0d                	jne    1099b <memory_free_page+0x54>
   1098e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10991:	0f b6 00             	movzbl (%eax),%eax
   10994:	83 e0 01             	and    $0x1,%eax
   10997:	84 c0                	test   %al,%al
   10999:	75 1c                	jne    109b7 <memory_free_page+0x70>
   1099b:	68 d8 41 01 00       	push   $0x141d8
   109a0:	68 d4 42 01 00       	push   $0x142d4
   109a5:	68 3c 01 00 00       	push   $0x13c
   109aa:	68 50 41 01 00       	push   $0x14150
   109af:	e8 58 33 00 00       	call   13d0c <panic>
   109b4:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   109b7:	83 ec 0c             	sub    $0xc,%esp
   109ba:	ff 75 f4             	pushl  -0xc(%ebp)
   109bd:	e8 a1 f9 ff ff       	call   10363 <pte_paddr>
   109c2:	83 c4 10             	add    $0x10,%esp
   109c5:	83 ec 04             	sub    $0x4,%esp
   109c8:	6a 01                	push   $0x1
   109ca:	50                   	push   %eax
   109cb:	68 00 60 01 00       	push   $0x16000
   109d0:	e8 b0 fa ff ff       	call   10485 <addr_free_page>
   109d5:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   109d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   109db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   109e1:	90                   	nop
   109e2:	c9                   	leave  
   109e3:	c3                   	ret    

000109e4 <memory_destroy_uvm>:


/**
 * @brief 销毁用户空间内存
 */
void memory_destroy_uvm (uint32_t page_dir) {
   109e4:	f3 0f 1e fb          	endbr32 
   109e8:	55                   	push   %ebp
   109e9:	89 e5                	mov    %esp,%ebp
   109eb:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   109ee:	68 00 00 00 80       	push   $0x80000000
   109f3:	e8 20 f9 ff ff       	call   10318 <pde_index>
   109f8:	83 c4 04             	add    $0x4,%esp
   109fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   109fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a01:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10a08:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0b:	01 d0                	add    %edx,%eax
   10a0d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   10a10:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10a14:	75 1c                	jne    10a32 <memory_destroy_uvm+0x4e>
   10a16:	68 fc 41 01 00       	push   $0x141fc
   10a1b:	68 e8 42 01 00       	push   $0x142e8
   10a20:	68 4e 01 00 00       	push   $0x14e
   10a25:	68 50 41 01 00       	push   $0x14150
   10a2a:	e8 dd 32 00 00       	call   13d0c <panic>
   10a2f:	83 c4 10             	add    $0x10,%esp

    // 释放页表中对应的各项，不包含映射的内核页面
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10a32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a35:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10a38:	e9 95 00 00 00       	jmp    10ad2 <memory_destroy_uvm+0xee>
        if (!pde->present) {
   10a3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a40:	0f b6 00             	movzbl (%eax),%eax
   10a43:	83 e0 01             	and    $0x1,%eax
   10a46:	84 c0                	test   %al,%al
   10a48:	74 7f                	je     10ac9 <memory_destroy_uvm+0xe5>
            continue;
        }

        // 释放页表对应的物理页 + 页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   10a4a:	83 ec 0c             	sub    $0xc,%esp
   10a4d:	ff 75 f4             	pushl  -0xc(%ebp)
   10a50:	e8 d7 f8 ff ff       	call   1032c <pde_paddr>
   10a55:	83 c4 10             	add    $0x10,%esp
   10a58:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10a5b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10a62:	eb 39                	jmp    10a9d <memory_destroy_uvm+0xb9>
            if (!pte->present) {
   10a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a67:	0f b6 00             	movzbl (%eax),%eax
   10a6a:	83 e0 01             	and    $0x1,%eax
   10a6d:	84 c0                	test   %al,%al
   10a6f:	74 23                	je     10a94 <memory_destroy_uvm+0xb0>
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10a71:	83 ec 0c             	sub    $0xc,%esp
   10a74:	ff 75 ec             	pushl  -0x14(%ebp)
   10a77:	e8 e7 f8 ff ff       	call   10363 <pte_paddr>
   10a7c:	83 c4 10             	add    $0x10,%esp
   10a7f:	83 ec 04             	sub    $0x4,%esp
   10a82:	6a 01                	push   $0x1
   10a84:	50                   	push   %eax
   10a85:	68 00 60 01 00       	push   $0x16000
   10a8a:	e8 f6 f9 ff ff       	call   10485 <addr_free_page>
   10a8f:	83 c4 10             	add    $0x10,%esp
   10a92:	eb 01                	jmp    10a95 <memory_destroy_uvm+0xb1>
                continue;
   10a94:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10a95:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a99:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a9d:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10aa4:	7e be                	jle    10a64 <memory_destroy_uvm+0x80>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   10aa6:	83 ec 0c             	sub    $0xc,%esp
   10aa9:	ff 75 f4             	pushl  -0xc(%ebp)
   10aac:	e8 7b f8 ff ff       	call   1032c <pde_paddr>
   10ab1:	83 c4 10             	add    $0x10,%esp
   10ab4:	83 ec 04             	sub    $0x4,%esp
   10ab7:	6a 01                	push   $0x1
   10ab9:	50                   	push   %eax
   10aba:	68 00 60 01 00       	push   $0x16000
   10abf:	e8 c1 f9 ff ff       	call   10485 <addr_free_page>
   10ac4:	83 c4 10             	add    $0x10,%esp
   10ac7:	eb 01                	jmp    10aca <memory_destroy_uvm+0xe6>
            continue;
   10ac9:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10aca:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10ace:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10ad2:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10ad9:	0f 8e 5e ff ff ff    	jle    10a3d <memory_destroy_uvm+0x59>
    }

    // 页目录表
    addr_free_page(&paddr_alloc, page_dir, 1);
   10adf:	83 ec 04             	sub    $0x4,%esp
   10ae2:	6a 01                	push   $0x1
   10ae4:	ff 75 08             	pushl  0x8(%ebp)
   10ae7:	68 00 60 01 00       	push   $0x16000
   10aec:	e8 94 f9 ff ff       	call   10485 <addr_free_page>
   10af1:	83 c4 10             	add    $0x10,%esp
}
   10af4:	90                   	nop
   10af5:	c9                   	leave  
   10af6:	c3                   	ret    

00010af7 <memory_copy_uvm>:

/**
 * @brief 复制页表及其所有的内存空间
 */
uint32_t memory_copy_uvm (uint32_t page_dir) {
   10af7:	f3 0f 1e fb          	endbr32 
   10afb:	55                   	push   %ebp
   10afc:	89 e5                	mov    %esp,%ebp
   10afe:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   10b01:	e8 87 fc ff ff       	call   1078d <memory_create_uvm>
   10b06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0) {
   10b09:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10b0d:	0f 84 19 01 00 00    	je     10c2c <memory_copy_uvm+0x135>
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10b13:	83 ec 0c             	sub    $0xc,%esp
   10b16:	68 00 00 00 80       	push   $0x80000000
   10b1b:	e8 f8 f7 ff ff       	call   10318 <pde_index>
   10b20:	83 c4 10             	add    $0x10,%esp
   10b23:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   10b26:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10b29:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10b30:	8b 45 08             	mov    0x8(%ebp),%eax
   10b33:	01 d0                	add    %edx,%eax
   10b35:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10b38:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10b3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10b3e:	e9 d7 00 00 00       	jmp    10c1a <memory_copy_uvm+0x123>
        if (!pde->present) {
   10b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b46:	0f b6 00             	movzbl (%eax),%eax
   10b49:	83 e0 01             	and    $0x1,%eax
   10b4c:	84 c0                	test   %al,%al
   10b4e:	0f 84 bd 00 00 00    	je     10c11 <memory_copy_uvm+0x11a>
            continue;
        }

        // 遍历页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   10b54:	83 ec 0c             	sub    $0xc,%esp
   10b57:	ff 75 f4             	pushl  -0xc(%ebp)
   10b5a:	e8 cd f7 ff ff       	call   1032c <pde_paddr>
   10b5f:	83 c4 10             	add    $0x10,%esp
   10b62:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10b65:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   10b6c:	e9 91 00 00 00       	jmp    10c02 <memory_copy_uvm+0x10b>
            if (!pte->present) {
   10b71:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10b74:	0f b6 00             	movzbl (%eax),%eax
   10b77:	83 e0 01             	and    $0x1,%eax
   10b7a:	84 c0                	test   %al,%al
   10b7c:	74 7b                	je     10bf9 <memory_copy_uvm+0x102>
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   10b7e:	83 ec 08             	sub    $0x8,%esp
   10b81:	6a 01                	push   $0x1
   10b83:	68 00 60 01 00       	push   $0x16000
   10b88:	e8 8d f8 ff ff       	call   1041a <addr_alloc_page>
   10b8d:	83 c4 10             	add    $0x10,%esp
   10b90:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0) {
   10b93:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   10b97:	0f 84 92 00 00 00    	je     10c2f <memory_copy_uvm+0x138>
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   10b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ba0:	c1 e0 16             	shl    $0x16,%eax
   10ba3:	89 c2                	mov    %eax,%edx
   10ba5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10ba8:	c1 e0 0c             	shl    $0xc,%eax
   10bab:	09 d0                	or     %edx,%eax
   10bad:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   10bb0:	83 ec 0c             	sub    $0xc,%esp
   10bb3:	ff 75 ec             	pushl  -0x14(%ebp)
   10bb6:	e8 cf f7 ff ff       	call   1038a <get_pte_perm>
   10bbb:	83 c4 10             	add    $0x10,%esp
   10bbe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10bc1:	83 ec 0c             	sub    $0xc,%esp
   10bc4:	50                   	push   %eax
   10bc5:	6a 01                	push   $0x1
   10bc7:	ff 75 dc             	pushl  -0x24(%ebp)
   10bca:	ff 75 d8             	pushl  -0x28(%ebp)
   10bcd:	52                   	push   %edx
   10bce:	e8 76 fa ff ff       	call   10649 <memory_create_map>
   10bd3:	83 c4 20             	add    $0x20,%esp
   10bd6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   10bd9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10bdd:	78 53                	js     10c32 <memory_copy_uvm+0x13b>
                goto copy_uvm_failed;
            }

            // 复制内容。
            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10bdf:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10be2:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10be5:	83 ec 04             	sub    $0x4,%esp
   10be8:	68 00 10 00 00       	push   $0x1000
   10bed:	52                   	push   %edx
   10bee:	50                   	push   %eax
   10bef:	e8 e8 2c 00 00       	call   138dc <kernel_memcpy>
   10bf4:	83 c4 10             	add    $0x10,%esp
   10bf7:	eb 01                	jmp    10bfa <memory_copy_uvm+0x103>
                continue;
   10bf9:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10bfa:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10bfe:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10c02:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10c09:	0f 8e 62 ff ff ff    	jle    10b71 <memory_copy_uvm+0x7a>
   10c0f:	eb 01                	jmp    10c12 <memory_copy_uvm+0x11b>
            continue;
   10c11:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10c12:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c16:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10c1a:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10c21:	0f 8e 1c ff ff ff    	jle    10b43 <memory_copy_uvm+0x4c>
        }
    }
    return to_page_dir;
   10c27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10c2a:	eb 20                	jmp    10c4c <memory_copy_uvm+0x155>
        goto copy_uvm_failed;
   10c2c:	90                   	nop
   10c2d:	eb 04                	jmp    10c33 <memory_copy_uvm+0x13c>
                goto copy_uvm_failed;
   10c2f:	90                   	nop
   10c30:	eb 01                	jmp    10c33 <memory_copy_uvm+0x13c>
                goto copy_uvm_failed;
   10c32:	90                   	nop

copy_uvm_failed:
    if (to_page_dir) {
   10c33:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10c37:	74 0e                	je     10c47 <memory_copy_uvm+0x150>
        memory_destroy_uvm(to_page_dir);
   10c39:	83 ec 0c             	sub    $0xc,%esp
   10c3c:	ff 75 e4             	pushl  -0x1c(%ebp)
   10c3f:	e8 a0 fd ff ff       	call   109e4 <memory_destroy_uvm>
   10c44:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10c47:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10c4c:	c9                   	leave  
   10c4d:	c3                   	ret    

00010c4e <memory_get_paddr>:
/**
 * @brief 获取指定虚拟地址的物理地址
 * 如果转换失败，返回0。
 */
uint32_t memory_get_paddr (uint32_t page_dir, uint32_t vaddr) {
   10c4e:	f3 0f 1e fb          	endbr32 
   10c52:	55                   	push   %ebp
   10c53:	89 e5                	mov    %esp,%ebp
   10c55:	83 ec 18             	sub    $0x18,%esp
    pte_t * pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10c58:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5b:	83 ec 04             	sub    $0x4,%esp
   10c5e:	6a 00                	push   $0x0
   10c60:	ff 75 0c             	pushl  0xc(%ebp)
   10c63:	50                   	push   %eax
   10c64:	e8 2c f9 ff ff       	call   10595 <find_pte>
   10c69:	83 c4 10             	add    $0x10,%esp
   10c6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0) {
   10c6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10c73:	75 07                	jne    10c7c <memory_get_paddr+0x2e>
        return 0;
   10c75:	b8 00 00 00 00       	mov    $0x0,%eax
   10c7a:	eb 19                	jmp    10c95 <memory_get_paddr+0x47>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10c7c:	83 ec 0c             	sub    $0xc,%esp
   10c7f:	ff 75 f4             	pushl  -0xc(%ebp)
   10c82:	e8 dc f6 ff ff       	call   10363 <pte_paddr>
   10c87:	83 c4 10             	add    $0x10,%esp
   10c8a:	8b 55 0c             	mov    0xc(%ebp),%edx
   10c8d:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
   10c93:	01 d0                	add    %edx,%eax
}
   10c95:	c9                   	leave  
   10c96:	c3                   	ret    

00010c97 <memory_copy_uvm_data>:

/**
 * @brief 在不同的进程空间中拷贝字符串
 * page_dir为目标页表，当前仍为老页表
 */
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size) {
   10c97:	f3 0f 1e fb          	endbr32 
   10c9b:	55                   	push   %ebp
   10c9c:	89 e5                	mov    %esp,%ebp
   10c9e:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while(size > 0){
   10ca1:	eb 6e                	jmp    10d11 <memory_copy_uvm_data+0x7a>
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10ca3:	83 ec 08             	sub    $0x8,%esp
   10ca6:	ff 75 08             	pushl  0x8(%ebp)
   10ca9:	ff 75 0c             	pushl  0xc(%ebp)
   10cac:	e8 9d ff ff ff       	call   10c4e <memory_get_paddr>
   10cb1:	83 c4 10             	add    $0x10,%esp
   10cb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0) {
   10cb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10cbb:	75 07                	jne    10cc4 <memory_copy_uvm_data+0x2d>
            return -1;
   10cbd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10cc2:	eb 58                	jmp    10d1c <memory_copy_uvm_data+0x85>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10cc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10cc7:	25 ff 0f 00 00       	and    $0xfff,%eax
   10ccc:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10ccf:	b8 00 10 00 00       	mov    $0x1000,%eax
   10cd4:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10cd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size) {
   10cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cdd:	3b 45 14             	cmp    0x14(%ebp),%eax
   10ce0:	76 06                	jbe    10ce8 <memory_copy_uvm_data+0x51>
            curr_size = size;       // 如果比较大，超过页边界，则只拷贝此页内的
   10ce2:	8b 45 14             	mov    0x14(%ebp),%eax
   10ce5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10ce8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10ceb:	8b 55 10             	mov    0x10(%ebp),%edx
   10cee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10cf1:	83 ec 04             	sub    $0x4,%esp
   10cf4:	51                   	push   %ecx
   10cf5:	52                   	push   %edx
   10cf6:	50                   	push   %eax
   10cf7:	e8 e0 2b 00 00       	call   138dc <kernel_memcpy>
   10cfc:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10cff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d02:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10d05:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d08:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d0e:	01 45 10             	add    %eax,0x10(%ebp)
    while(size > 0){
   10d11:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10d15:	75 8c                	jne    10ca3 <memory_copy_uvm_data+0xc>
  }

  return 0;
   10d17:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10d1c:	c9                   	leave  
   10d1d:	c3                   	ret    

00010d1e <memory_init>:
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init(boot_info_t *boot_info)
{
   10d1e:	f3 0f 1e fb          	endbr32 
   10d22:	55                   	push   %ebp
   10d23:	89 e5                	mov    %esp,%ebp
   10d25:	83 ec 18             	sub    $0x18,%esp

    // 1MB内存空间起始，在链接脚本中定义 /kernel/kernel.lds
    extern uint8_t *mem_free_start;
    // 在内核数据后面放物理页位图
    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10d28:	c7 45 f4 ae 23 02 00 	movl   $0x223ae,-0xc(%ebp)

    log_printf("mem init.");
   10d2f:	83 ec 0c             	sub    $0xc,%esp
   10d32:	68 0a 42 01 00       	push   $0x1420a
   10d37:	e8 cd 32 00 00       	call   14009 <log_printf>
   10d3c:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10d3f:	83 ec 0c             	sub    $0xc,%esp
   10d42:	ff 75 08             	pushl  0x8(%ebp)
   10d45:	e8 a1 f7 ff ff       	call   104eb <show_mem_info>
   10d4a:	83 c4 10             	add    $0x10,%esp

    // 计算1MB以上空间的空闲内存容量
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d4d:	83 ec 0c             	sub    $0xc,%esp
   10d50:	ff 75 08             	pushl  0x8(%ebp)
   10d53:	e8 fd f7 ff ff       	call   10555 <total_mem_size>
   10d58:	83 c4 10             	add    $0x10,%esp
   10d5b:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 将 mem_up1MB_free 地址向下对齐到下一个 MEM_PAGE_SIZE 的倍数
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE); // 对齐到4KB页
   10d63:	83 ec 08             	sub    $0x8,%esp
   10d66:	68 00 10 00 00       	push   $0x1000
   10d6b:	ff 75 f0             	pushl  -0x10(%ebp)
   10d6e:	e8 8c f5 ff ff       	call   102ff <down2>
   10d73:	83 c4 10             	add    $0x10,%esp
   10d76:	89 45 f0             	mov    %eax,-0x10(%ebp)

    log_printf(">1MB Free memory start addr: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10d79:	83 ec 04             	sub    $0x4,%esp
   10d7c:	ff 75 f0             	pushl  -0x10(%ebp)
   10d7f:	68 00 00 10 00       	push   $0x100000
   10d84:	68 14 42 01 00       	push   $0x14214
   10d89:	e8 7b 32 00 00       	call   14009 <log_printf>
   10d8e:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 位图缓冲区部分的内存仅跟在mem_free_start开始放置
    log_printf("mem_free:%d ", mem_free);
   10d91:	83 ec 08             	sub    $0x8,%esp
   10d94:	ff 75 f4             	pushl  -0xc(%ebp)
   10d97:	68 42 42 01 00       	push   $0x14242
   10d9c:	e8 68 32 00 00       	call   14009 <log_printf>
   10da1:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10da4:	83 ec 0c             	sub    $0xc,%esp
   10da7:	68 00 10 00 00       	push   $0x1000
   10dac:	ff 75 f0             	pushl  -0x10(%ebp)
   10daf:	68 00 00 10 00       	push   $0x100000
   10db4:	ff 75 f4             	pushl  -0xc(%ebp)
   10db7:	68 00 60 01 00       	push   $0x16000
   10dbc:	e8 fd f5 ff ff       	call   103be <addr_alloc_init>
   10dc1:	83 c4 20             	add    $0x20,%esp
    // 将mem_free移至位图缓冲区后面
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10dc4:	a1 24 60 01 00       	mov    0x16024,%eax
   10dc9:	c1 e8 0c             	shr    $0xc,%eax
   10dcc:	83 ec 0c             	sub    $0xc,%esp
   10dcf:	50                   	push   %eax
   10dd0:	e8 23 27 00 00       	call   134f8 <bitmap_byte_count>
   10dd5:	83 c4 10             	add    $0x10,%esp
   10dd8:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10ddb:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10de2:	76 1c                	jbe    10e00 <memory_init+0xe2>
   10de4:	68 50 42 01 00       	push   $0x14250
   10de9:	68 fc 42 01 00       	push   $0x142fc
   10dee:	68 e7 01 00 00       	push   $0x1e7
   10df3:	68 50 41 01 00       	push   $0x14150
   10df8:	e8 0f 2f 00 00       	call   13d0c <panic>
   10dfd:	83 c4 10             	add    $0x10,%esp

    // 创建内核的地址映射表
    create_kernel_table();
   10e00:	e8 e8 f8 ff ff       	call   106ed <create_kernel_table>

    // 设置页目录表的物理地址
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10e05:	b8 00 70 01 00       	mov    $0x17000,%eax
   10e0a:	83 ec 0c             	sub    $0xc,%esp
   10e0d:	50                   	push   %eax
   10e0e:	e8 86 f5 ff ff       	call   10399 <mmu_set_page_dir>
   10e13:	83 c4 10             	add    $0x10,%esp
}
   10e16:	90                   	nop
   10e17:	c9                   	leave  
   10e18:	c3                   	ret    

00010e19 <sys_sbrk>:
/**
 * @: 动态调整堆的内存
 * @param {int} incr 增加堆的大小
 * @return {*} 返回堆之前的指针
 */
char * sys_sbrk(int incr) {
   10e19:	f3 0f 1e fb          	endbr32 
   10e1d:	55                   	push   %ebp
   10e1e:	89 e5                	mov    %esp,%ebp
   10e20:	83 ec 38             	sub    $0x38,%esp
    task_t * task = task_current();
   10e23:	e8 c6 07 00 00       	call   115ee <task_current>
   10e28:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char * pre_heap_end = (char * )task->heap_end;
   10e2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e2e:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   10e34:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10e37:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3a:	89 45 e8             	mov    %eax,-0x18(%ebp)

    ASSERT(incr >= 0);
   10e3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e41:	79 1c                	jns    10e5f <sys_sbrk+0x46>
   10e43:	68 75 42 01 00       	push   $0x14275
   10e48:	68 08 43 01 00       	push   $0x14308
   10e4d:	68 fb 01 00 00       	push   $0x1fb
   10e52:	68 50 41 01 00       	push   $0x14150
   10e57:	e8 b0 2e 00 00       	call   13d0c <panic>
   10e5c:	83 c4 10             	add    $0x10,%esp

    // 如果地址为0，则返回有效的heap区域的顶端
    if (incr == 0) {
   10e5f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e63:	75 1b                	jne    10e80 <sys_sbrk+0x67>
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e65:	83 ec 08             	sub    $0x8,%esp
   10e68:	ff 75 ec             	pushl  -0x14(%ebp)
   10e6b:	68 7f 42 01 00       	push   $0x1427f
   10e70:	e8 94 31 00 00       	call   14009 <log_printf>
   10e75:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e78:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e7b:	e9 cc 00 00 00       	jmp    10f4c <sys_sbrk+0x133>
    } 
    
    uint32_t start = task->heap_end;
   10e80:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e83:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   10e89:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e8c:	8b 55 08             	mov    0x8(%ebp),%edx
   10e8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e92:	01 d0                	add    %edx,%eax
   10e94:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 起始偏移非0
    int start_offset = start % MEM_PAGE_SIZE;
   10e97:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e9a:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e9f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset) {
   10ea2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10ea6:	74 3d                	je     10ee5 <sys_sbrk+0xcc>
        // 不超过1页，只调整
        if (start_offset + incr <= MEM_PAGE_SIZE) {
   10ea8:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10eab:	8b 45 08             	mov    0x8(%ebp),%eax
   10eae:	01 d0                	add    %edx,%eax
   10eb0:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10eb5:	7f 14                	jg     10ecb <sys_sbrk+0xb2>
            task->heap_end = end;
   10eb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10eba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ebd:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
            return pre_heap_end;
   10ec3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ec6:	e9 81 00 00 00       	jmp    10f4c <sys_sbrk+0x133>
        } else {
            // 超过1页，先只调本页的
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10ecb:	b8 00 10 00 00       	mov    $0x1000,%eax
   10ed0:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10ed3:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10ed6:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10ed9:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10edc:	8b 45 08             	mov    0x8(%ebp),%eax
   10edf:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10ee2:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }

    // 处理其余的，起始对齐的页边界的
    if (incr) {
   10ee5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ee9:	74 3c                	je     10f27 <sys_sbrk+0x10e>
        uint32_t curr_size = end - start;
   10eeb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10eee:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10ef1:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10ef4:	83 ec 04             	sub    $0x4,%esp
   10ef7:	6a 07                	push   $0x7
   10ef9:	ff 75 d8             	pushl  -0x28(%ebp)
   10efc:	ff 75 f4             	pushl  -0xc(%ebp)
   10eff:	e8 ff f9 ff ff       	call   10903 <memory_alloc_page_for>
   10f04:	83 c4 10             	add    $0x10,%esp
   10f07:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   10f0a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10f0e:	79 17                	jns    10f27 <sys_sbrk+0x10e>
            log_printf("sbrk: alloc mem failed.");
   10f10:	83 ec 0c             	sub    $0xc,%esp
   10f13:	68 93 42 01 00       	push   $0x14293
   10f18:	e8 ec 30 00 00       	call   14009 <log_printf>
   10f1d:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10f20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f25:	eb 25                	jmp    10f4c <sys_sbrk+0x133>
        }
    }

    log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
   10f27:	83 ec 04             	sub    $0x4,%esp
   10f2a:	ff 75 e4             	pushl  -0x1c(%ebp)
   10f2d:	ff 75 e8             	pushl  -0x18(%ebp)
   10f30:	68 ab 42 01 00       	push   $0x142ab
   10f35:	e8 cf 30 00 00       	call   14009 <log_printf>
   10f3a:	83 c4 10             	add    $0x10,%esp
    task->heap_end = end;
   10f3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f40:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10f43:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
    return (char * )pre_heap_end;        
   10f49:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   10f4c:	c9                   	leave  
   10f4d:	c3                   	ret    

00010f4e <sys_printmsg>:
// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

// 临时用函数 
void sys_printmsg(char* fmt, int arg)
{
   10f4e:	f3 0f 1e fb          	endbr32 
   10f52:	55                   	push   %ebp
   10f53:	89 e5                	mov    %esp,%ebp
   10f55:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10f58:	83 ec 08             	sub    $0x8,%esp
   10f5b:	ff 75 0c             	pushl  0xc(%ebp)
   10f5e:	ff 75 08             	pushl  0x8(%ebp)
   10f61:	e8 a3 30 00 00       	call   14009 <log_printf>
   10f66:	83 c4 10             	add    $0x10,%esp
}
   10f69:	90                   	nop
   10f6a:	c9                   	leave  
   10f6b:	c3                   	ret    

00010f6c <do_handler_syscall>:
/**
 * 处理系统调用请求，并调用相应的系统调用处理函数。
 * @param {syscall_frame_t *} frame 系统调用的栈信息
 * @return {*} 
 */
void do_handler_syscall (syscall_frame_t * frame) {
   10f6c:	f3 0f 1e fb          	endbr32 
   10f70:	55                   	push   %ebp
   10f71:	89 e5                	mov    %esp,%ebp
   10f73:	53                   	push   %ebx
   10f74:	83 ec 14             	sub    $0x14,%esp

    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10f77:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7a:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f7d:	83 f8 64             	cmp    $0x64,%eax
   10f80:	77 4e                	ja     10fd0 <do_handler_syscall+0x64>
		// 查根据系统调用号查找系统调用表中的处理函数
		syscall_handler_t handler = sys_table[frame->func_id];
   10f82:	8b 45 08             	mov    0x8(%ebp),%eax
   10f85:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f88:	8b 04 85 20 43 01 00 	mov    0x14320(,%eax,4),%eax
   10f8f:	89 45 f4             	mov    %eax,-0xc(%ebp)

        // 将系统调用的参数传递给处理函数。如果找到了处理函数，则调用它并将返回值存储在ret变量中
		if (handler) {
   10f92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f96:	74 38                	je     10fd0 <do_handler_syscall+0x64>
			int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f98:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9b:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f9e:	89 c3                	mov    %eax,%ebx
   10fa0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa3:	8b 40 48             	mov    0x48(%eax),%eax
   10fa6:	89 c1                	mov    %eax,%ecx
   10fa8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fab:	8b 40 44             	mov    0x44(%eax),%eax
   10fae:	89 c2                	mov    %eax,%edx
   10fb0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb3:	8b 40 40             	mov    0x40(%eax),%eax
   10fb6:	53                   	push   %ebx
   10fb7:	51                   	push   %ecx
   10fb8:	52                   	push   %edx
   10fb9:	50                   	push   %eax
   10fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fbd:	ff d0                	call   *%eax
   10fbf:	83 c4 10             	add    $0x10,%esp
   10fc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
            // eax 可以用来存放函数的返回值
            frame->eax = ret;
   10fc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10fcb:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10fce:	eb 33                	jmp    11003 <do_handler_syscall+0x97>
		}
	}

	// 不支持的系统调用，打印出错信息
	task_t * task = task_current();
   10fd0:	e8 19 06 00 00       	call   115ee <task_current>
   10fd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	log_printf("task: %s, Unknown syscall: %d", task->name,  frame->func_id);
   10fd8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdb:	8b 40 3c             	mov    0x3c(%eax),%eax
   10fde:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10fe1:	81 c2 88 00 00 00    	add    $0x88,%edx
   10fe7:	83 ec 04             	sub    $0x4,%esp
   10fea:	50                   	push   %eax
   10feb:	52                   	push   %edx
   10fec:	68 b4 44 01 00       	push   $0x144b4
   10ff1:	e8 13 30 00 00       	call   14009 <log_printf>
   10ff6:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;
   10ff9:	8b 45 08             	mov    0x8(%ebp),%eax
   10ffc:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   11003:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11006:	c9                   	leave  
   11007:	c3                   	ret    

00011008 <list_node_init>:
/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node)
{
   11008:	55                   	push   %ebp
   11009:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   1100b:	8b 45 08             	mov    0x8(%ebp),%eax
   1100e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11015:	8b 45 08             	mov    0x8(%ebp),%eax
   11018:	8b 50 04             	mov    0x4(%eax),%edx
   1101b:	8b 45 08             	mov    0x8(%ebp),%eax
   1101e:	89 10                	mov    %edx,(%eax)
}
   11020:	90                   	nop
   11021:	5d                   	pop    %ebp
   11022:	c3                   	ret    

00011023 <list_node_next>:
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t *list_node_next(list_node_t *node)
{
   11023:	55                   	push   %ebp
   11024:	89 e5                	mov    %esp,%ebp
    return node->next;
   11026:	8b 45 08             	mov    0x8(%ebp),%eax
   11029:	8b 40 04             	mov    0x4(%eax),%eax
}
   1102c:	5d                   	pop    %ebp
   1102d:	c3                   	ret    

0001102e <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   1102e:	55                   	push   %ebp
   1102f:	89 e5                	mov    %esp,%ebp
    return list->count;
   11031:	8b 45 08             	mov    0x8(%ebp),%eax
   11034:	8b 40 08             	mov    0x8(%eax),%eax
}
   11037:	5d                   	pop    %ebp
   11038:	c3                   	ret    

00011039 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   11039:	55                   	push   %ebp
   1103a:	89 e5                	mov    %esp,%ebp
    return list->first;
   1103c:	8b 45 08             	mov    0x8(%ebp),%eax
   1103f:	8b 00                	mov    (%eax),%eax
}
   11041:	5d                   	pop    %ebp
   11042:	c3                   	ret    

00011043 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   11043:	55                   	push   %ebp
   11044:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   11046:	8b 45 08             	mov    0x8(%ebp),%eax
   11049:	0f 22 d8             	mov    %eax,%cr3
}
   1104c:	90                   	nop
   1104d:	5d                   	pop    %ebp
   1104e:	c3                   	ret    

0001104f <hlt>:
{
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void) {
   1104f:	55                   	push   %ebp
   11050:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11052:	f4                   	hlt    
}
   11053:	90                   	nop
   11054:	5d                   	pop    %ebp
   11055:	c3                   	ret    

00011056 <write_tr>:

/**
 * @description: 对TR寄存器进行写操作
 * @param {uint32_t} tss_selector tss选择子类型
 */
static inline void write_tr (uint32_t tss_selector) {
   11056:	55                   	push   %ebp
   11057:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   11059:	8b 45 08             	mov    0x8(%ebp),%eax
   1105c:	0f 00 d8             	ltr    %ax
}
   1105f:	90                   	nop
   11060:	5d                   	pop    %ebp
   11061:	c3                   	ret    

00011062 <mmu_set_page_dir>:
{
   11062:	55                   	push   %ebp
   11063:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11065:	ff 75 08             	pushl  0x8(%ebp)
   11068:	e8 d6 ff ff ff       	call   11043 <write_cr3>
   1106d:	83 c4 04             	add    $0x4,%esp
}
   11070:	90                   	nop
   11071:	c9                   	leave  
   11072:	c3                   	ret    

00011073 <tss_init>:
 * @param flag      系统任务标志位
 * @param esp       任务堆栈指针
 * @return int      成功返回0，失败返回-1
 */
static int tss_init(task_t *task, int flag, uint32_t entry, uint32_t esp)
{
   11073:	f3 0f 1e fb          	endbr32 
   11077:	55                   	push   %ebp
   11078:	89 e5                	mov    %esp,%ebp
   1107a:	83 ec 28             	sub    $0x28,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   1107d:	e8 51 12 00 00       	call   122d3 <gdt_alloc_desc>
   11082:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0)
   11085:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11089:	79 1a                	jns    110a5 <tss_init+0x32>
    {
        log_printf("alloc tss failed.\n");
   1108b:	83 ec 0c             	sub    $0xc,%esp
   1108e:	68 d4 44 01 00       	push   $0x144d4
   11093:	e8 71 2f 00 00       	call   14009 <log_printf>
   11098:	83 c4 10             	add    $0x10,%esp
        return -1;
   1109b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110a0:	e9 5a 01 00 00       	jmp    111ff <tss_init+0x18c>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   110a5:	8b 45 08             	mov    0x8(%ebp),%eax
   110a8:	68 89 00 00 00       	push   $0x89
   110ad:	6a 68                	push   $0x68
   110af:	50                   	push   %eax
   110b0:	ff 75 ec             	pushl  -0x14(%ebp)
   110b3:	e8 05 11 00 00       	call   121bd <segment_desc_set>
   110b8:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   110bb:	8b 45 08             	mov    0x8(%ebp),%eax
   110be:	83 ec 04             	sub    $0x4,%esp
   110c1:	6a 68                	push   $0x68
   110c3:	6a 00                	push   $0x0
   110c5:	50                   	push   %eax
   110c6:	e8 64 28 00 00       	call   1392f <kernel_memset>
   110cb:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   110ce:	e8 56 f8 ff ff       	call   10929 <memory_alloc_page>
   110d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0)
   110d6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   110da:	0f 84 f4 00 00 00    	je     111d4 <tss_init+0x161>
        goto tss_init_failed;
    }

    // 根据不同的权限选择不同的访问选择子
    int code_sel, data_sel;
    if (flag & TASK_FLAG_SYSTEM) // 对系统工程进行初始化
   110e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   110e3:	83 e0 01             	and    $0x1,%eax
   110e6:	85 c0                	test   %eax,%eax
   110e8:	74 10                	je     110fa <tss_init+0x87>
    {
        code_sel = KERNEL_SELECTOR_CS;
   110ea:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   110f1:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   110f8:	eb 16                	jmp    11110 <tss_init+0x9d>
    }
    else
    {
        // 注意:加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   110fa:	a1 b0 81 01 00       	mov    0x181b0,%eax
   110ff:	83 c8 03             	or     $0x3,%eax
   11102:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   11105:	a1 b4 81 01 00       	mov    0x181b4,%eax
   1110a:	83 c8 03             	or     $0x3,%eax
   1110d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   11110:	8b 45 08             	mov    0x8(%ebp),%eax
   11113:	8b 55 10             	mov    0x10(%ebp),%edx
   11116:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE; // 未指定栈则用内核栈，即运行在特权级0的进程
   11119:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1111d:	75 0a                	jne    11129 <tss_init+0xb6>
   1111f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11122:	05 00 10 00 00       	add    $0x1000,%eax
   11127:	eb 03                	jmp    1112c <tss_init+0xb9>
   11129:	8b 45 14             	mov    0x14(%ebp),%eax
   1112c:	8b 55 08             	mov    0x8(%ebp),%edx
   1112f:	89 42 38             	mov    %eax,0x38(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   11132:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11135:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   1113b:	8b 45 08             	mov    0x8(%ebp),%eax
   1113e:	89 50 04             	mov    %edx,0x4(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   11141:	8b 45 08             	mov    0x8(%ebp),%eax
   11144:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
    task->tss.eip = entry;
   1114b:	8b 45 08             	mov    0x8(%ebp),%eax
   1114e:	8b 55 10             	mov    0x10(%ebp),%edx
   11151:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   11154:	8b 45 08             	mov    0x8(%ebp),%eax
   11157:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs = task->tss.gs = data_sel; // 全部采用同一数据段
   1115e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11161:	8b 45 08             	mov    0x8(%ebp),%eax
   11164:	89 50 5c             	mov    %edx,0x5c(%eax)
   11167:	8b 45 08             	mov    0x8(%ebp),%eax
   1116a:	8b 50 5c             	mov    0x5c(%eax),%edx
   1116d:	8b 45 08             	mov    0x8(%ebp),%eax
   11170:	89 50 58             	mov    %edx,0x58(%eax)
   11173:	8b 45 08             	mov    0x8(%ebp),%eax
   11176:	8b 50 58             	mov    0x58(%eax),%edx
   11179:	8b 45 08             	mov    0x8(%ebp),%eax
   1117c:	89 50 54             	mov    %edx,0x54(%eax)
   1117f:	8b 45 08             	mov    0x8(%ebp),%eax
   11182:	8b 50 54             	mov    0x54(%eax),%edx
   11185:	8b 45 08             	mov    0x8(%ebp),%eax
   11188:	89 50 50             	mov    %edx,0x50(%eax)
   1118b:	8b 45 08             	mov    0x8(%ebp),%eax
   1118e:	8b 50 50             	mov    0x50(%eax),%edx
   11191:	8b 45 08             	mov    0x8(%ebp),%eax
   11194:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = code_sel;
   11197:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1119a:	8b 45 08             	mov    0x8(%ebp),%eax
   1119d:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.iomap = 0;
   111a0:	8b 45 08             	mov    0x8(%ebp),%eax
   111a3:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   111aa:	e8 de f5 ff ff       	call   1078d <memory_create_uvm>
   111af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0)
   111b2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   111b6:	74 1f                	je     111d7 <tss_init+0x164>
    {
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   111b8:	8b 45 08             	mov    0x8(%ebp),%eax
   111bb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   111be:	89 50 1c             	mov    %edx,0x1c(%eax)

    task->tss_sel = tss_sel;
   111c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111c4:	89 c2                	mov    %eax,%edx
   111c6:	8b 45 08             	mov    0x8(%ebp),%eax
   111c9:	66 89 50 68          	mov    %dx,0x68(%eax)
    return 0;
   111cd:	b8 00 00 00 00       	mov    $0x0,%eax
   111d2:	eb 2b                	jmp    111ff <tss_init+0x18c>
        goto tss_init_failed;
   111d4:	90                   	nop
   111d5:	eb 01                	jmp    111d8 <tss_init+0x165>
        goto tss_init_failed;
   111d7:	90                   	nop

tss_init_failed:

    gdt_free_sel(tss_sel);
   111d8:	83 ec 0c             	sub    $0xc,%esp
   111db:	ff 75 ec             	pushl  -0x14(%ebp)
   111de:	e8 69 11 00 00       	call   1234c <gdt_free_sel>
   111e3:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack)
   111e6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   111ea:	74 0e                	je     111fa <tss_init+0x187>
    {
        memory_free_page(kernel_stack);
   111ec:	83 ec 0c             	sub    $0xc,%esp
   111ef:	ff 75 e8             	pushl  -0x18(%ebp)
   111f2:	e8 50 f7 ff ff       	call   10947 <memory_free_page>
   111f7:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   111fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111ff:	c9                   	leave  
   11200:	c3                   	ret    

00011201 <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t * task) {
   11201:	f3 0f 1e fb          	endbr32 
   11205:	55                   	push   %ebp
   11206:	89 e5                	mov    %esp,%ebp
   11208:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1120b:	e8 97 1b 00 00       	call   12da7 <irq_enter_protection>
   11210:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   11213:	83 ec 0c             	sub    $0xc,%esp
   11216:	ff 75 08             	pushl  0x8(%ebp)
   11219:	e8 69 03 00 00       	call   11587 <task_set_ready>
   1121e:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11221:	83 ec 0c             	sub    $0xc,%esp
   11224:	ff 75 f4             	pushl  -0xc(%ebp)
   11227:	e8 97 1b 00 00       	call   12dc3 <irq_leave_protection>
   1122c:	83 c4 10             	add    $0x10,%esp
}
   1122f:	90                   	nop
   11230:	c9                   	leave  
   11231:	c3                   	ret    

00011232 <task_switch_from_to>:

void task_switch_from_to(task_t *from, task_t *to)
{
   11232:	f3 0f 1e fb          	endbr32 
   11236:	55                   	push   %ebp
   11237:	89 e5                	mov    %esp,%ebp
   11239:	83 ec 08             	sub    $0x8,%esp
    // 基于TSS 切换至 to->tss_sel 的任务
    switch_to_tss(to->tss_sel);
   1123c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1123f:	0f b7 40 68          	movzwl 0x68(%eax),%eax
   11243:	0f b7 c0             	movzwl %ax,%eax
   11246:	83 ec 0c             	sub    $0xc,%esp
   11249:	50                   	push   %eax
   1124a:	e8 3a 11 00 00       	call   12389 <switch_to_tss>
   1124f:	83 c4 10             	add    $0x10,%esp
}
   11252:	90                   	nop
   11253:	c9                   	leave  
   11254:	c3                   	ret    

00011255 <task_init>:

int task_init(task_t *task, const char *name, int flag, uint32_t entry, uint32_t esp)
{
   11255:	f3 0f 1e fb          	endbr32 
   11259:	55                   	push   %ebp
   1125a:	89 e5                	mov    %esp,%ebp
   1125c:	83 ec 18             	sub    $0x18,%esp
    // 基于TSS 初始化
    int err = tss_init(task, flag, entry, esp);
   1125f:	ff 75 18             	pushl  0x18(%ebp)
   11262:	ff 75 14             	pushl  0x14(%ebp)
   11265:	ff 75 10             	pushl  0x10(%ebp)
   11268:	ff 75 08             	pushl  0x8(%ebp)
   1126b:	e8 03 fe ff ff       	call   11073 <tss_init>
   11270:	83 c4 10             	add    $0x10,%esp
   11273:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0)
   11276:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1127a:	79 18                	jns    11294 <task_init+0x3f>
    {
        log_printf("init task failed.\n");
   1127c:	83 ec 0c             	sub    $0xc,%esp
   1127f:	68 e7 44 01 00       	push   $0x144e7
   11284:	e8 80 2d 00 00       	call   14009 <log_printf>
   11289:	83 c4 10             	add    $0x10,%esp
        return err;
   1128c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1128f:	e9 fb 00 00 00       	jmp    1138f <task_init+0x13a>
    }
    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11294:	8b 45 08             	mov    0x8(%ebp),%eax
   11297:	05 88 00 00 00       	add    $0x88,%eax
   1129c:	83 ec 04             	sub    $0x4,%esp
   1129f:	6a 20                	push   $0x20
   112a1:	ff 75 0c             	pushl  0xc(%ebp)
   112a4:	50                   	push   %eax
   112a5:	e8 fd 24 00 00       	call   137a7 <kernel_strncpy>
   112aa:	83 c4 10             	add    $0x10,%esp
    // 当前任务设置为创建态
    task->state = TASK_CREATED;
   112ad:	8b 45 08             	mov    0x8(%ebp),%eax
   112b0:	c7 80 84 00 00 00 00 	movl   $0x0,0x84(%eax)
   112b7:	00 00 00 
    task->sleep_ticks = 0;
   112ba:	8b 45 08             	mov    0x8(%ebp),%eax
   112bd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
   112c4:	00 00 00 
    task->times_ticks = TASK_TIME_SLICE_DEFAULT;
   112c7:	8b 45 08             	mov    0x8(%ebp),%eax
   112ca:	c7 80 ac 00 00 00 64 	movl   $0x64,0xac(%eax)
   112d1:	00 00 00 
    task->slice_ticks = task->times_ticks;
   112d4:	8b 45 08             	mov    0x8(%ebp),%eax
   112d7:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   112dd:	8b 45 08             	mov    0x8(%ebp),%eax
   112e0:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

    list_node_init(&task->all_node);
   112e6:	8b 45 08             	mov    0x8(%ebp),%eax
   112e9:	83 c0 74             	add    $0x74,%eax
   112ec:	83 ec 0c             	sub    $0xc,%esp
   112ef:	50                   	push   %eax
   112f0:	e8 13 fd ff ff       	call   11008 <list_node_init>
   112f5:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   112f8:	8b 45 08             	mov    0x8(%ebp),%eax
   112fb:	83 c0 6c             	add    $0x6c,%eax
   112fe:	83 ec 0c             	sub    $0xc,%esp
   11301:	50                   	push   %eax
   11302:	e8 01 fd ff ff       	call   11008 <list_node_init>
   11307:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   1130a:	8b 45 08             	mov    0x8(%ebp),%eax
   1130d:	83 c0 7c             	add    $0x7c,%eax
   11310:	83 ec 0c             	sub    $0xc,%esp
   11313:	50                   	push   %eax
   11314:	e8 ef fc ff ff       	call   11008 <list_node_init>
   11319:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   1131c:	e8 86 1a 00 00       	call   12da7 <irq_enter_protection>
   11321:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 将pid设置为task结构对应的指针，保证每一个pid不同
    task->pid = (uint32_t)task;
   11324:	8b 55 08             	mov    0x8(%ebp),%edx
   11327:	8b 45 08             	mov    0x8(%ebp),%eax
   1132a:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    task->parent = (task_t *)0;
   11330:	8b 45 08             	mov    0x8(%ebp),%eax
   11333:	c7 80 b8 00 00 00 00 	movl   $0x0,0xb8(%eax)
   1133a:	00 00 00 
    task->heap_start = 0;
   1133d:	8b 45 08             	mov    0x8(%ebp),%eax
   11340:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
   11347:	00 00 00 
    task->heap_end = 0;
   1134a:	8b 45 08             	mov    0x8(%ebp),%eax
   1134d:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
   11354:	00 00 00 
    // 将task任务插入到就绪队列中并设置为就绪态
    task_set_ready(task);
   11357:	83 ec 0c             	sub    $0xc,%esp
   1135a:	ff 75 08             	pushl  0x8(%ebp)
   1135d:	e8 25 02 00 00       	call   11587 <task_set_ready>
   11362:	83 c4 10             	add    $0x10,%esp
    // 将任务添加到任务队列（尾插法）
    list_insert_last(&task_manager.task_list, &task->all_node);
   11365:	8b 45 08             	mov    0x8(%ebp),%eax
   11368:	83 c0 74             	add    $0x74,%eax
   1136b:	83 ec 08             	sub    $0x8,%esp
   1136e:	50                   	push   %eax
   1136f:	68 10 80 01 00       	push   $0x18010
   11374:	e8 6c 2a 00 00       	call   13de5 <list_insert_last>
   11379:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   1137c:	83 ec 0c             	sub    $0xc,%esp
   1137f:	ff 75 f0             	pushl  -0x10(%ebp)
   11382:	e8 3c 1a 00 00       	call   12dc3 <irq_leave_protection>
   11387:	83 c4 10             	add    $0x10,%esp
    return 0;
   1138a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1138f:	c9                   	leave  
   11390:	c3                   	ret    

00011391 <task_manager_init>:

/**
 * @brief 任务管理器初始化：将就绪队列和任务队列初始化为空，并将当前运行的任务指针设置为 NULL。
 */
void task_manager_init(void)
{
   11391:	f3 0f 1e fb          	endbr32 
   11395:	55                   	push   %ebp
   11396:	89 e5                	mov    %esp,%ebp
   11398:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   1139b:	83 ec 04             	sub    $0x4,%esp
   1139e:	68 00 62 00 00       	push   $0x6200
   113a3:	6a 00                	push   $0x0
   113a5:	68 c0 91 01 00       	push   $0x191c0
   113aa:	e8 80 25 00 00       	call   1392f <kernel_memset>
   113af:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   113b2:	83 ec 0c             	sub    $0xc,%esp
   113b5:	68 c0 f3 01 00       	push   $0x1f3c0
   113ba:	e8 5a 1e 00 00       	call   13219 <mutex_init>
   113bf:	83 c4 10             	add    $0x10,%esp

    // 数据段和代码段，使用DPL3，所有应用共用同一个
    int sel = gdt_alloc_desc();
   113c2:	e8 0c 0f 00 00       	call   122d3 <gdt_alloc_desc>
   113c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   113ca:	68 f2 40 00 00       	push   $0x40f2
   113cf:	6a ff                	push   $0xffffffff
   113d1:	6a 00                	push   $0x0
   113d3:	ff 75 f4             	pushl  -0xc(%ebp)
   113d6:	e8 e2 0d 00 00       	call   121bd <segment_desc_set>
   113db:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   113de:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113e1:	a3 b4 81 01 00       	mov    %eax,0x181b4

    sel = gdt_alloc_desc();
   113e6:	e8 e8 0e 00 00       	call   122d3 <gdt_alloc_desc>
   113eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   113ee:	68 fa 40 00 00       	push   $0x40fa
   113f3:	6a ff                	push   $0xffffffff
   113f5:	6a 00                	push   $0x0
   113f7:	ff 75 f4             	pushl  -0xc(%ebp)
   113fa:	e8 be 0d 00 00       	call   121bd <segment_desc_set>
   113ff:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   11402:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11405:	a3 b0 81 01 00       	mov    %eax,0x181b0

    // 各队列初始化
    list_init(&task_manager.ready_list);
   1140a:	83 ec 0c             	sub    $0xc,%esp
   1140d:	68 04 80 01 00       	push   $0x18004
   11412:	e8 42 29 00 00       	call   13d59 <list_init>
   11417:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1141a:	83 ec 0c             	sub    $0xc,%esp
   1141d:	68 10 80 01 00       	push   $0x18010
   11422:	e8 32 29 00 00       	call   13d59 <list_init>
   11427:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1142a:	83 ec 0c             	sub    $0xc,%esp
   1142d:	68 1c 80 01 00       	push   $0x1801c
   11432:	e8 22 29 00 00       	call   13d59 <list_init>
   11437:	83 c4 10             	add    $0x10,%esp
    // 对空闲进程进行初始化
    task_init(&task_manager.idle_task,
              "idle task",
              TASK_FLAG_SYSTEM,
              (uint32_t)idle_task_entry,
              (uint32_t)(idle_task_stack + IDLE_STACK_SIZE)); // 里面的值不必要写
   1143a:	b8 c0 91 01 00       	mov    $0x191c0,%eax
    task_init(&task_manager.idle_task,
   1143f:	89 c2                	mov    %eax,%edx
   11441:	b8 8a 14 01 00       	mov    $0x1148a,%eax
   11446:	83 ec 0c             	sub    $0xc,%esp
   11449:	52                   	push   %edx
   1144a:	50                   	push   %eax
   1144b:	6a 01                	push   $0x1
   1144d:	68 fa 44 01 00       	push   $0x144fa
   11452:	68 ec 80 01 00       	push   $0x180ec
   11457:	e8 f9 fd ff ff       	call   11255 <task_init>
   1145c:	83 c4 20             	add    $0x20,%esp

    task_manager.curr_task = (task_t *)0;
   1145f:	c7 05 00 80 01 00 00 	movl   $0x0,0x18000
   11466:	00 00 00 
    task_start(&task_manager.idle_task);
   11469:	83 ec 0c             	sub    $0xc,%esp
   1146c:	68 ec 80 01 00       	push   $0x180ec
   11471:	e8 8b fd ff ff       	call   11201 <task_start>
   11476:	83 c4 10             	add    $0x10,%esp
}
   11479:	90                   	nop
   1147a:	c9                   	leave  
   1147b:	c3                   	ret    

0001147c <task_first_task>:
/**
 * @brief 返回任务管理器中的第一个任务
 */
task_t *task_first_task(void)
{
   1147c:	f3 0f 1e fb          	endbr32 
   11480:	55                   	push   %ebp
   11481:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11483:	b8 28 80 01 00       	mov    $0x18028,%eax
}
   11488:	5d                   	pop    %ebp
   11489:	c3                   	ret    

0001148a <idle_task_entry>:

// 空闲进程初始化
static void idle_task_entry()
{
   1148a:	f3 0f 1e fb          	endbr32 
   1148e:	55                   	push   %ebp
   1148f:	89 e5                	mov    %esp,%ebp
    for (;;)
    {
        // 调用低功耗指令，使得CPU处于低功耗状态
        hlt();
   11491:	e8 b9 fb ff ff       	call   1104f <hlt>
   11496:	eb f9                	jmp    11491 <idle_task_entry+0x7>

00011498 <task_first_init>:
    }
}
// 初始化了一个名为 first_task 的内核任务，并将其设为当前运行的任务。它还通过写 TR 寄存器来切换到这个任务。
void task_first_init(void)
{
   11498:	f3 0f 1e fb          	endbr32 
   1149c:	55                   	push   %ebp
   1149d:	89 e5                	mov    %esp,%ebp
   1149f:	83 ec 18             	sub    $0x18,%esp
    // 获取入口地址
    void first_task_entry(void);
    uint32_t first_start = (uint32_t)first_task_entry;
   114a2:	c7 45 f4 00 00 00 80 	movl   $0x80000000,-0xc(%ebp)

    // 以下获得的是bin文件在内存中的物理地址
    extern uint8_t s_first_task[], e_first_task[];

    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task); // 待拷贝的区域
   114a9:	b8 ae 23 02 00       	mov    $0x223ae,%eax
   114ae:	2d 20 20 02 00       	sub    $0x22020,%eax
   114b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;                     // 为待拷贝区域分配内存
   114b6:	c7 45 ec 00 a0 00 00 	movl   $0xa000,-0x14(%ebp)
    ASSERT(copy_size < alloc_size);
   114bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114c0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   114c3:	72 1c                	jb     114e1 <task_first_init+0x49>
   114c5:	68 04 45 01 00       	push   $0x14504
   114ca:	68 68 46 01 00       	push   $0x14668
   114cf:	68 dc 00 00 00       	push   $0xdc
   114d4:	68 1c 45 01 00       	push   $0x1451c
   114d9:	e8 2e 28 00 00       	call   13d0c <panic>
   114de:	83 c4 10             	add    $0x10,%esp

    // 初始化任务
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   114e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114e7:	01 d0                	add    %edx,%eax
   114e9:	83 ec 0c             	sub    $0xc,%esp
   114ec:	50                   	push   %eax
   114ed:	ff 75 f4             	pushl  -0xc(%ebp)
   114f0:	6a 00                	push   $0x0
   114f2:	68 62 45 01 00       	push   $0x14562
   114f7:	68 28 80 01 00       	push   $0x18028
   114fc:	e8 54 fd ff ff       	call   11255 <task_init>
   11501:	83 c4 20             	add    $0x20,%esp

    task_manager.first_task.heap_start = (uint32_t)e_first_task;  // 这里不对
   11504:	b8 ae 23 02 00       	mov    $0x223ae,%eax
   11509:	a3 e4 80 01 00       	mov    %eax,0x180e4
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   1150e:	a1 e4 80 01 00       	mov    0x180e4,%eax
   11513:	a3 e8 80 01 00       	mov    %eax,0x180e8

    // 当前任务 指向 当前运行的第一个任务
    task_manager.curr_task = &task_manager.first_task;
   11518:	c7 05 00 80 01 00 28 	movl   $0x18028,0x18000
   1151f:	80 01 00 
    //  更新页表地址为自己的
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11522:	a1 44 80 01 00       	mov    0x18044,%eax
   11527:	83 ec 0c             	sub    $0xc,%esp
   1152a:	50                   	push   %eax
   1152b:	e8 32 fb ff ff       	call   11062 <mmu_set_page_dir>
   11530:	83 c4 10             	add    $0x10,%esp
    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   11533:	83 ec 04             	sub    $0x4,%esp
   11536:	6a 07                	push   $0x7
   11538:	ff 75 ec             	pushl  -0x14(%ebp)
   1153b:	ff 75 f4             	pushl  -0xc(%ebp)
   1153e:	e8 c0 f3 ff ff       	call   10903 <memory_alloc_page_for>
   11543:	83 c4 10             	add    $0x10,%esp

    kernel_memcpy((void *)first_start, (void *)s_first_task, copy_size);
   11546:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11549:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1154c:	83 ec 04             	sub    $0x4,%esp
   1154f:	52                   	push   %edx
   11550:	68 20 20 02 00       	push   $0x22020
   11555:	50                   	push   %eax
   11556:	e8 81 23 00 00       	call   138dc <kernel_memcpy>
   1155b:	83 c4 10             	add    $0x10,%esp

    // 启动进程
    task_start(&task_manager.first_task);
   1155e:	83 ec 0c             	sub    $0xc,%esp
   11561:	68 28 80 01 00       	push   $0x18028
   11566:	e8 96 fc ff ff       	call   11201 <task_start>
   1156b:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   1156e:	0f b7 05 90 80 01 00 	movzwl 0x18090,%eax
   11575:	0f b7 c0             	movzwl %ax,%eax
   11578:	83 ec 0c             	sub    $0xc,%esp
   1157b:	50                   	push   %eax
   1157c:	e8 d5 fa ff ff       	call   11056 <write_tr>
   11581:	83 c4 10             	add    $0x10,%esp
}
   11584:	90                   	nop
   11585:	c9                   	leave  
   11586:	c3                   	ret    

00011587 <task_set_ready>:

// 将task任务插入到就绪队列中并设置为就绪态
void task_set_ready(task_t *task)
{
   11587:	f3 0f 1e fb          	endbr32 
   1158b:	55                   	push   %ebp
   1158c:	89 e5                	mov    %esp,%ebp
   1158e:	83 ec 08             	sub    $0x8,%esp
    // 不处理空闲进程
    if (task != &task_manager.idle_task)
   11591:	81 7d 08 ec 80 01 00 	cmpl   $0x180ec,0x8(%ebp)
   11598:	74 24                	je     115be <task_set_ready+0x37>
    {
        // 首先将任务插入到就绪队列中（尾插法）
        list_insert_last(&task_manager.ready_list, &task->run_node);
   1159a:	8b 45 08             	mov    0x8(%ebp),%eax
   1159d:	83 c0 6c             	add    $0x6c,%eax
   115a0:	83 ec 08             	sub    $0x8,%esp
   115a3:	50                   	push   %eax
   115a4:	68 04 80 01 00       	push   $0x18004
   115a9:	e8 37 28 00 00       	call   13de5 <list_insert_last>
   115ae:	83 c4 10             	add    $0x10,%esp
        task->state = TASK_READY;
   115b1:	8b 45 08             	mov    0x8(%ebp),%eax
   115b4:	c7 80 84 00 00 00 03 	movl   $0x3,0x84(%eax)
   115bb:	00 00 00 
    }
}
   115be:	90                   	nop
   115bf:	c9                   	leave  
   115c0:	c3                   	ret    

000115c1 <task_set_block>:

// 将task任务从就绪态队列中移除
void task_set_block(task_t *task)
{
   115c1:	f3 0f 1e fb          	endbr32 
   115c5:	55                   	push   %ebp
   115c6:	89 e5                	mov    %esp,%ebp
   115c8:	83 ec 08             	sub    $0x8,%esp
    // 不处理空闲进程
    if (task != &task_manager.idle_task)
   115cb:	81 7d 08 ec 80 01 00 	cmpl   $0x180ec,0x8(%ebp)
   115d2:	74 17                	je     115eb <task_set_block+0x2a>
    {
        list_remove(&task_manager.ready_list, &task->run_node);
   115d4:	8b 45 08             	mov    0x8(%ebp),%eax
   115d7:	83 c0 6c             	add    $0x6c,%eax
   115da:	83 ec 08             	sub    $0x8,%esp
   115dd:	50                   	push   %eax
   115de:	68 04 80 01 00       	push   $0x18004
   115e3:	e8 e1 28 00 00       	call   13ec9 <list_remove>
   115e8:	83 c4 10             	add    $0x10,%esp
        // 移除后状态不确定，因此不设置状态值
    }
}
   115eb:	90                   	nop
   115ec:	c9                   	leave  
   115ed:	c3                   	ret    

000115ee <task_current>:
/**
 * @description: 返回当前正在运行的进程
 * @return {*}
 */
task_t *task_current(void)
{
   115ee:	f3 0f 1e fb          	endbr32 
   115f2:	55                   	push   %ebp
   115f3:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   115f5:	a1 00 80 01 00       	mov    0x18000,%eax
}
   115fa:	5d                   	pop    %ebp
   115fb:	c3                   	ret    

000115fc <sys_sched_yield>:
/**
 * @description: [已弃用！]进程自己主动放弃CPU，自觉移到队列尾部，从而给其它进程留出运行的机会
 * @return {*}
 */
int sys_sched_yield(void)
{
   115fc:	f3 0f 1e fb          	endbr32 
   11600:	55                   	push   %ebp
   11601:	89 e5                	mov    %esp,%ebp
   11603:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11606:	e8 9c 17 00 00       	call   12da7 <irq_enter_protection>
   1160b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 首先判断就绪队列中是否有多个进程
    if (list_count(&task_manager.ready_list) > 1)
   1160e:	83 ec 0c             	sub    $0xc,%esp
   11611:	68 04 80 01 00       	push   $0x18004
   11616:	e8 13 fa ff ff       	call   1102e <list_count>
   1161b:	83 c4 10             	add    $0x10,%esp
   1161e:	83 f8 01             	cmp    $0x1,%eax
   11621:	7e 29                	jle    1164c <sys_sched_yield+0x50>
    {
        // 获取当前正在运行的任务
        task_t *curr_task = task_current();
   11623:	e8 c6 ff ff ff       	call   115ee <task_current>
   11628:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // 将当前任务从就绪队列中删除
        task_set_block(curr_task);
   1162b:	83 ec 0c             	sub    $0xc,%esp
   1162e:	ff 75 f0             	pushl  -0x10(%ebp)
   11631:	e8 8b ff ff ff       	call   115c1 <task_set_block>
   11636:	83 c4 10             	add    $0x10,%esp
        // 将当前任务加入到就绪队列尾部
        task_set_ready(curr_task);
   11639:	83 ec 0c             	sub    $0xc,%esp
   1163c:	ff 75 f0             	pushl  -0x10(%ebp)
   1163f:	e8 43 ff ff ff       	call   11587 <task_set_ready>
   11644:	83 c4 10             	add    $0x10,%esp
        // 将当前任务切换为下一个任务
        task_dispatch();
   11647:	e8 5c 00 00 00       	call   116a8 <task_dispatch>
    }

    irq_leave_protection(state);
   1164c:	83 ec 0c             	sub    $0xc,%esp
   1164f:	ff 75 f4             	pushl  -0xc(%ebp)
   11652:	e8 6c 17 00 00       	call   12dc3 <irq_leave_protection>
   11657:	83 c4 10             	add    $0x10,%esp
    return 0;
   1165a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1165f:	c9                   	leave  
   11660:	c3                   	ret    

00011661 <task_next_run>:
// 返回下一个即将运行的任务(本项目直接返回队头的进程)
static task_t *task_next_run()
{
   11661:	f3 0f 1e fb          	endbr32 
   11665:	55                   	push   %ebp
   11666:	89 e5                	mov    %esp,%ebp
   11668:	83 ec 10             	sub    $0x10,%esp
    // 如果就绪队列中没有进程，则返回一个空闲进程
    if (list_count(&task_manager.ready_list) == 0)
   1166b:	68 04 80 01 00       	push   $0x18004
   11670:	e8 b9 f9 ff ff       	call   1102e <list_count>
   11675:	83 c4 04             	add    $0x4,%esp
   11678:	85 c0                	test   %eax,%eax
   1167a:	75 07                	jne    11683 <task_next_run+0x22>
    {
        return &task_manager.idle_task;
   1167c:	b8 ec 80 01 00       	mov    $0x180ec,%eax
   11681:	eb 23                	jmp    116a6 <task_next_run+0x45>
    }
    // 取出链表的第一个结点，即为队头的进程
    list_node_t *task_node = list_first(&task_manager.ready_list);
   11683:	68 04 80 01 00       	push   $0x18004
   11688:	e8 ac f9 ff ff       	call   11039 <list_first>
   1168d:	83 c4 04             	add    $0x4,%esp
   11690:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // 根据当前结点的地址，获得整个任务控制块
    return list_node_parent(task_node, task_t, run_node);
   11693:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11697:	74 08                	je     116a1 <task_next_run+0x40>
   11699:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1169c:	83 e8 6c             	sub    $0x6c,%eax
   1169f:	eb 05                	jmp    116a6 <task_next_run+0x45>
   116a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116a6:	c9                   	leave  
   116a7:	c3                   	ret    

000116a8 <task_dispatch>:

// 切换下一个欲运行的任务
void task_dispatch()
{
   116a8:	f3 0f 1e fb          	endbr32 
   116ac:	55                   	push   %ebp
   116ad:	89 e5                	mov    %esp,%ebp
   116af:	83 ec 18             	sub    $0x18,%esp
    task_t *to = task_next_run();
   116b2:	e8 aa ff ff ff       	call   11661 <task_next_run>
   116b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 下一个任务和当前任务不同的时候才进行切换
    if (to != task_manager.curr_task)
   116ba:	a1 00 80 01 00       	mov    0x18000,%eax
   116bf:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   116c2:	74 2e                	je     116f2 <task_dispatch+0x4a>
    {
        task_t *from = task_manager.curr_task;
   116c4:	a1 00 80 01 00       	mov    0x18000,%eax
   116c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.curr_task = to;
   116cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116cf:	a3 00 80 01 00       	mov    %eax,0x18000

        to->state = TASK_RUNNING;
   116d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116d7:	c7 80 84 00 00 00 01 	movl   $0x1,0x84(%eax)
   116de:	00 00 00 
        task_switch_from_to(from, to);
   116e1:	83 ec 08             	sub    $0x8,%esp
   116e4:	ff 75 f4             	pushl  -0xc(%ebp)
   116e7:	ff 75 f0             	pushl  -0x10(%ebp)
   116ea:	e8 43 fb ff ff       	call   11232 <task_switch_from_to>
   116ef:	83 c4 10             	add    $0x10,%esp
    }
}
   116f2:	90                   	nop
   116f3:	c9                   	leave  
   116f4:	c3                   	ret    

000116f5 <task_time_tick>:
/**
 * @brief 进程调度器
 */
void task_time_tick()
{
   116f5:	f3 0f 1e fb          	endbr32 
   116f9:	55                   	push   %ebp
   116fa:	89 e5                	mov    %esp,%ebp
   116fc:	83 ec 28             	sub    $0x28,%esp

    // 获取当前正在运行的任务
    task_t *curr_task = task_current();
   116ff:	e8 ea fe ff ff       	call   115ee <task_current>
   11704:	89 45 f0             	mov    %eax,-0x10(%ebp)

    irq_state_t state = irq_enter_protection();
   11707:	e8 9b 16 00 00       	call   12da7 <irq_enter_protection>
   1170c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // 判断当前任务的时间片计数器是否减到0
    if (--curr_task->slice_ticks == 0)
   1170f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11712:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
   11718:	8d 50 ff             	lea    -0x1(%eax),%edx
   1171b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1171e:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   11724:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11727:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
   1172d:	85 c0                	test   %eax,%eax
   1172f:	75 2e                	jne    1175f <task_time_tick+0x6a>
    {
        // 重新设置计数器
        curr_task->slice_ticks = curr_task->times_ticks;
   11731:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11734:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   1173a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1173d:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

        // 将当前任务从就绪队列中删除
        task_set_block(curr_task);
   11743:	83 ec 0c             	sub    $0xc,%esp
   11746:	ff 75 f0             	pushl  -0x10(%ebp)
   11749:	e8 73 fe ff ff       	call   115c1 <task_set_block>
   1174e:	83 c4 10             	add    $0x10,%esp
        // 将当前任务加入到就绪队列尾部
        task_set_ready(curr_task);
   11751:	83 ec 0c             	sub    $0xc,%esp
   11754:	ff 75 f0             	pushl  -0x10(%ebp)
   11757:	e8 2b fe ff ff       	call   11587 <task_set_ready>
   1175c:	83 c4 10             	add    $0x10,%esp
    }
    // 睡眠处理
    // 在每个时钟节拍中断发生时，扫描延时队列，发现延时时间到，则再将进程移回就绪队列的队尾
    list_node_t *curr = list_first(&task_manager.sleep_list);
   1175f:	83 ec 0c             	sub    $0xc,%esp
   11762:	68 1c 80 01 00       	push   $0x1801c
   11767:	e8 cd f8 ff ff       	call   11039 <list_first>
   1176c:	83 c4 10             	add    $0x10,%esp
   1176f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   11772:	eb 6b                	jmp    117df <task_time_tick+0xea>
    {
        list_node_t *next = list_node_next(curr);
   11774:	83 ec 0c             	sub    $0xc,%esp
   11777:	ff 75 f4             	pushl  -0xc(%ebp)
   1177a:	e8 a4 f8 ff ff       	call   11023 <list_node_next>
   1177f:	83 c4 10             	add    $0x10,%esp
   11782:	89 45 e8             	mov    %eax,-0x18(%ebp)
        task_t *task = list_node_parent(curr, task_t, run_node);
   11785:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11789:	74 08                	je     11793 <task_time_tick+0x9e>
   1178b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1178e:	83 e8 6c             	sub    $0x6c,%eax
   11791:	eb 05                	jmp    11798 <task_time_tick+0xa3>
   11793:	b8 00 00 00 00       	mov    $0x0,%eax
   11798:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0)
   1179b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1179e:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   117a4:	8d 50 ff             	lea    -0x1(%eax),%edx
   117a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   117aa:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   117b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   117b3:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   117b9:	85 c0                	test   %eax,%eax
   117bb:	75 1c                	jne    117d9 <task_time_tick+0xe4>
        {
            task_set_wakeup(task);
   117bd:	83 ec 0c             	sub    $0xc,%esp
   117c0:	ff 75 e4             	pushl  -0x1c(%ebp)
   117c3:	e8 78 00 00 00       	call   11840 <task_set_wakeup>
   117c8:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   117cb:	83 ec 0c             	sub    $0xc,%esp
   117ce:	ff 75 e4             	pushl  -0x1c(%ebp)
   117d1:	e8 b1 fd ff ff       	call   11587 <task_set_ready>
   117d6:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   117d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   117dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   117df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   117e3:	75 8f                	jne    11774 <task_time_tick+0x7f>
    }
    // 由于有进程已经插入到就绪队列中，可能要马上运行，因此需要调用切换任务函数
    task_dispatch();
   117e5:	e8 be fe ff ff       	call   116a8 <task_dispatch>
    irq_leave_protection(state);
   117ea:	83 ec 0c             	sub    $0xc,%esp
   117ed:	ff 75 ec             	pushl  -0x14(%ebp)
   117f0:	e8 ce 15 00 00       	call   12dc3 <irq_leave_protection>
   117f5:	83 c4 10             	add    $0x10,%esp
}
   117f8:	90                   	nop
   117f9:	c9                   	leave  
   117fa:	c3                   	ret    

000117fb <task_set_sleep>:
 * @return {*}
 * @param {task_t} *task	要睡眠的任务
 * @param {uint32_t} ticks	任务睡眠的时间
 */
void task_set_sleep(task_t *task, uint32_t ticks)
{
   117fb:	f3 0f 1e fb          	endbr32 
   117ff:	55                   	push   %ebp
   11800:	89 e5                	mov    %esp,%ebp
   11802:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0)
   11805:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11809:	74 32                	je     1183d <task_set_sleep+0x42>
        return;
    task->sleep_ticks = ticks;
   1180b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1180e:	8b 45 08             	mov    0x8(%ebp),%eax
   11811:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    task->state = TASK_SLEEP;
   11817:	8b 45 08             	mov    0x8(%ebp),%eax
   1181a:	c7 80 84 00 00 00 02 	movl   $0x2,0x84(%eax)
   11821:	00 00 00 
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   11824:	8b 45 08             	mov    0x8(%ebp),%eax
   11827:	83 c0 6c             	add    $0x6c,%eax
   1182a:	83 ec 08             	sub    $0x8,%esp
   1182d:	50                   	push   %eax
   1182e:	68 1c 80 01 00       	push   $0x1801c
   11833:	e8 ad 25 00 00       	call   13de5 <list_insert_last>
   11838:	83 c4 10             	add    $0x10,%esp
   1183b:	eb 01                	jmp    1183e <task_set_sleep+0x43>
        return;
   1183d:	90                   	nop
}
   1183e:	c9                   	leave  
   1183f:	c3                   	ret    

00011840 <task_set_wakeup>:
 * @description: 将任务从睡眠队列中移出
 * @return {*}
 * @param {task_t *} task	待移出的任务
 */
void task_set_wakeup(task_t *task)
{
   11840:	f3 0f 1e fb          	endbr32 
   11844:	55                   	push   %ebp
   11845:	89 e5                	mov    %esp,%ebp
   11847:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   1184a:	8b 45 08             	mov    0x8(%ebp),%eax
   1184d:	83 c0 6c             	add    $0x6c,%eax
   11850:	83 ec 08             	sub    $0x8,%esp
   11853:	50                   	push   %eax
   11854:	68 1c 80 01 00       	push   $0x1801c
   11859:	e8 6b 26 00 00       	call   13ec9 <list_remove>
   1185e:	83 c4 10             	add    $0x10,%esp
}
   11861:	90                   	nop
   11862:	c9                   	leave  
   11863:	c3                   	ret    

00011864 <sys_msleep>:

// 延迟时间
void sys_msleep(uint32_t ms)
{
   11864:	f3 0f 1e fb          	endbr32 
   11868:	55                   	push   %ebp
   11869:	89 e5                	mov    %esp,%ebp
   1186b:	53                   	push   %ebx
   1186c:	83 ec 14             	sub    $0x14,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS)
   1186f:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   11873:	77 07                	ja     1187c <sys_msleep+0x18>
    {
        ms = OS_TICK_MS;
   11875:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }
    irq_state_t state = irq_enter_protection();
   1187c:	e8 26 15 00 00       	call   12da7 <irq_enter_protection>
   11881:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 将当前进程从就绪队列中移出
    task_set_block(task_current());
   11884:	e8 65 fd ff ff       	call   115ee <task_current>
   11889:	83 ec 0c             	sub    $0xc,%esp
   1188c:	50                   	push   %eax
   1188d:	e8 2f fd ff ff       	call   115c1 <task_set_block>
   11892:	83 c4 10             	add    $0x10,%esp
    // 将给队列插入到睡眠队列中 将ms转换成时钟节拍的计数
    task_set_sleep(task_current(), (ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   11895:	8b 45 08             	mov    0x8(%ebp),%eax
   11898:	83 c0 09             	add    $0x9,%eax
   1189b:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   118a0:	f7 e2                	mul    %edx
   118a2:	89 d3                	mov    %edx,%ebx
   118a4:	c1 eb 03             	shr    $0x3,%ebx
   118a7:	e8 42 fd ff ff       	call   115ee <task_current>
   118ac:	83 ec 08             	sub    $0x8,%esp
   118af:	53                   	push   %ebx
   118b0:	50                   	push   %eax
   118b1:	e8 45 ff ff ff       	call   117fb <task_set_sleep>
   118b6:	83 c4 10             	add    $0x10,%esp
    // 切换进程
    task_dispatch();
   118b9:	e8 ea fd ff ff       	call   116a8 <task_dispatch>

    irq_leave_protection(state);
   118be:	83 ec 0c             	sub    $0xc,%esp
   118c1:	ff 75 f4             	pushl  -0xc(%ebp)
   118c4:	e8 fa 14 00 00       	call   12dc3 <irq_leave_protection>
   118c9:	83 c4 10             	add    $0x10,%esp
}
   118cc:	90                   	nop
   118cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   118d0:	c9                   	leave  
   118d1:	c3                   	ret    

000118d2 <sys_getpid>:
int sys_getpid()
{
   118d2:	f3 0f 1e fb          	endbr32 
   118d6:	55                   	push   %ebp
   118d7:	89 e5                	mov    %esp,%ebp
   118d9:	83 ec 10             	sub    $0x10,%esp
    task_t *task = task_current();
   118dc:	e8 0d fd ff ff       	call   115ee <task_current>
   118e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return task->pid;
   118e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118e7:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
}
   118ed:	c9                   	leave  
   118ee:	c3                   	ret    

000118ef <alloc_task>:

/**
 * @brief 分配一个任务结构
 */
static task_t *alloc_task(void)
{
   118ef:	f3 0f 1e fb          	endbr32 
   118f3:	55                   	push   %ebp
   118f4:	89 e5                	mov    %esp,%ebp
   118f6:	83 ec 18             	sub    $0x18,%esp
    task_t *task = (task_t *)0;
   118f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   11900:	83 ec 0c             	sub    $0xc,%esp
   11903:	68 c0 f3 01 00       	push   $0x1f3c0
   11908:	e8 3e 19 00 00       	call   1324b <mutex_lock>
   1190d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++)
   11910:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11917:	eb 2b                	jmp    11944 <alloc_task+0x55>
    {
        task_t *curr = task_table + i;
   11919:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1191c:	69 c0 c4 00 00 00    	imul   $0xc4,%eax,%eax
   11922:	05 c0 91 01 00       	add    $0x191c0,%eax
   11927:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == 0)
   1192a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1192d:	0f b6 80 88 00 00 00 	movzbl 0x88(%eax),%eax
   11934:	84 c0                	test   %al,%al
   11936:	75 08                	jne    11940 <alloc_task+0x51>
        {
            task = curr;
   11938:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1193b:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   1193e:	eb 0a                	jmp    1194a <alloc_task+0x5b>
    for (int i = 0; i < TASK_NR; i++)
   11940:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11944:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11948:	7e cf                	jle    11919 <alloc_task+0x2a>
        }
    }
    mutex_unlock(&task_table_mutex);
   1194a:	83 ec 0c             	sub    $0xc,%esp
   1194d:	68 c0 f3 01 00       	push   $0x1f3c0
   11952:	e8 8c 19 00 00       	call   132e3 <mutex_unlock>
   11957:	83 c4 10             	add    $0x10,%esp

    return task;
   1195a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1195d:	c9                   	leave  
   1195e:	c3                   	ret    

0001195f <free_task>:

/**
 * @brief 释放任务结构：将任务结构标记为空闲状态，以便在下次创建新的进程时可以重复使用该任务结构
 */
static void free_task(task_t *task)
{
   1195f:	f3 0f 1e fb          	endbr32 
   11963:	55                   	push   %ebp
   11964:	89 e5                	mov    %esp,%ebp
   11966:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   11969:	83 ec 0c             	sub    $0xc,%esp
   1196c:	68 c0 f3 01 00       	push   $0x1f3c0
   11971:	e8 d5 18 00 00       	call   1324b <mutex_lock>
   11976:	83 c4 10             	add    $0x10,%esp
    task->name[0] = 0;
   11979:	8b 45 08             	mov    0x8(%ebp),%eax
   1197c:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%eax)
    mutex_unlock(&task_table_mutex);
   11983:	83 ec 0c             	sub    $0xc,%esp
   11986:	68 c0 f3 01 00       	push   $0x1f3c0
   1198b:	e8 53 19 00 00       	call   132e3 <mutex_unlock>
   11990:	83 c4 10             	add    $0x10,%esp
}
   11993:	90                   	nop
   11994:	c9                   	leave  
   11995:	c3                   	ret    

00011996 <task_uninit>:
/**
 * @brief 任务初始时分配的各项资源
 */
void task_uninit(task_t *task)
{
   11996:	f3 0f 1e fb          	endbr32 
   1199a:	55                   	push   %ebp
   1199b:	89 e5                	mov    %esp,%ebp
   1199d:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel)
   119a0:	8b 45 08             	mov    0x8(%ebp),%eax
   119a3:	0f b7 40 68          	movzwl 0x68(%eax),%eax
   119a7:	66 85 c0             	test   %ax,%ax
   119aa:	74 16                	je     119c2 <task_uninit+0x2c>
    {
        gdt_free_sel(task->tss_sel);
   119ac:	8b 45 08             	mov    0x8(%ebp),%eax
   119af:	0f b7 40 68          	movzwl 0x68(%eax),%eax
   119b3:	0f b7 c0             	movzwl %ax,%eax
   119b6:	83 ec 0c             	sub    $0xc,%esp
   119b9:	50                   	push   %eax
   119ba:	e8 8d 09 00 00       	call   1234c <gdt_free_sel>
   119bf:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0)
   119c2:	8b 45 08             	mov    0x8(%ebp),%eax
   119c5:	8b 40 04             	mov    0x4(%eax),%eax
   119c8:	85 c0                	test   %eax,%eax
   119ca:	74 17                	je     119e3 <task_uninit+0x4d>
    {
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   119cc:	8b 45 08             	mov    0x8(%ebp),%eax
   119cf:	8b 40 04             	mov    0x4(%eax),%eax
   119d2:	2d 00 10 00 00       	sub    $0x1000,%eax
   119d7:	83 ec 0c             	sub    $0xc,%esp
   119da:	50                   	push   %eax
   119db:	e8 67 ef ff ff       	call   10947 <memory_free_page>
   119e0:	83 c4 10             	add    $0x10,%esp
    {
        // 没有分配空间，暂时不写
        // memory_destroy_uvm(task->tss.cr3);
    }

    kernel_memset(task, 0, sizeof(task_t));
   119e3:	83 ec 04             	sub    $0x4,%esp
   119e6:	68 c4 00 00 00       	push   $0xc4
   119eb:	6a 00                	push   $0x0
   119ed:	ff 75 08             	pushl  0x8(%ebp)
   119f0:	e8 3a 1f 00 00       	call   1392f <kernel_memset>
   119f5:	83 c4 10             	add    $0x10,%esp
}
   119f8:	90                   	nop
   119f9:	c9                   	leave  
   119fa:	c3                   	ret    

000119fb <sys_fork>:

/**
 * @brief 创建进程的副本
 */
int sys_fork(void)
{
   119fb:	f3 0f 1e fb          	endbr32 
   119ff:	55                   	push   %ebp
   11a00:	89 e5                	mov    %esp,%ebp
   11a02:	83 ec 28             	sub    $0x28,%esp

    task_t *parent_task = task_current();
   11a05:	e8 e4 fb ff ff       	call   115ee <task_current>
   11a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 分配任务结构
    task_t *child_task = alloc_task();
   11a0d:	e8 dd fe ff ff       	call   118ef <alloc_task>
   11a12:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0)
   11a15:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a19:	0f 84 39 01 00 00    	je     11b58 <sys_fork+0x15d>
    {
        goto fork_failed;
    }
    // 获取父进程系统调用的栈信息
    syscall_frame_t *frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a22:	8b 40 04             	mov    0x4(%eax),%eax
   11a25:	83 e8 58             	sub    $0x58,%eax
   11a28:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // frame->eip 是父进程系统调用返回地址，也就是子进程的入口地址。
    // frame->esp 是父进程系统调用栈的栈顶指针
    // esp 参数是进程的栈顶指针，用于指定进程的栈空间，该参数的值需要根据具体情况进行计算
    // 其中，parent_esp 是父进程的栈顶指针，SYSCALL_PARAM_COUNT 是系统调用的参数个数，通过这个公式可以计算出子进程的栈顶指针
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT);
   11a2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a2e:	8b 40 50             	mov    0x50(%eax),%eax
   11a31:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
   11a34:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a37:	8b 40 34             	mov    0x34(%eax),%eax
   11a3a:	89 c1                	mov    %eax,%ecx
   11a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a3f:	05 88 00 00 00       	add    $0x88,%eax
   11a44:	83 ec 0c             	sub    $0xc,%esp
   11a47:	52                   	push   %edx
   11a48:	51                   	push   %ecx
   11a49:	6a 00                	push   $0x0
   11a4b:	50                   	push   %eax
   11a4c:	ff 75 f0             	pushl  -0x10(%ebp)
   11a4f:	e8 01 f8 ff ff       	call   11255 <task_init>
   11a54:	83 c4 20             	add    $0x20,%esp
   11a57:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11a5a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11a5e:	0f 88 f7 00 00 00    	js     11b5b <sys_fork+0x160>
        goto fork_failed;
    }

    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t *tss = &child_task->tss;
   11a64:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a67:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0; // 子进程返回0
   11a6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a6d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11a74:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a77:	8b 40 24             	mov    0x24(%eax),%eax
   11a7a:	89 c2                	mov    %eax,%edx
   11a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a7f:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11a82:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a85:	8b 40 2c             	mov    0x2c(%eax),%eax
   11a88:	89 c2                	mov    %eax,%edx
   11a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a8d:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11a90:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a93:	8b 40 28             	mov    0x28(%eax),%eax
   11a96:	89 c2                	mov    %eax,%edx
   11a98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a9b:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11a9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aa1:	8b 40 18             	mov    0x18(%eax),%eax
   11aa4:	89 c2                	mov    %eax,%edx
   11aa6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11aa9:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11aac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aaf:	8b 40 14             	mov    0x14(%eax),%eax
   11ab2:	89 c2                	mov    %eax,%edx
   11ab4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ab7:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11aba:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11abd:	8b 40 1c             	mov    0x1c(%eax),%eax
   11ac0:	89 c2                	mov    %eax,%edx
   11ac2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ac5:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11ac8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11acb:	8b 40 38             	mov    0x38(%eax),%eax
   11ace:	89 c2                	mov    %eax,%edx
   11ad0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ad3:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11ad6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ad9:	8b 40 10             	mov    0x10(%eax),%eax
   11adc:	89 c2                	mov    %eax,%edx
   11ade:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ae1:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11ae4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ae7:	8b 40 0c             	mov    0xc(%eax),%eax
   11aea:	89 c2                	mov    %eax,%edx
   11aec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11aef:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11af5:	8b 40 08             	mov    0x8(%eax),%eax
   11af8:	89 c2                	mov    %eax,%edx
   11afa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11afd:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b03:	8b 40 04             	mov    0x4(%eax),%eax
   11b06:	89 c2                	mov    %eax,%edx
   11b08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b0b:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11b0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b11:	8b 00                	mov    (%eax),%eax
   11b13:	89 c2                	mov    %eax,%edx
   11b15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b18:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11b21:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)

    // 复制父进程的内存空间到子进程
    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0)
   11b27:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b2a:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b2d:	83 ec 0c             	sub    $0xc,%esp
   11b30:	50                   	push   %eax
   11b31:	e8 c1 ef ff ff       	call   10af7 <memory_copy_uvm>
   11b36:	83 c4 10             	add    $0x10,%esp
   11b39:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11b3c:	89 42 1c             	mov    %eax,0x1c(%edx)
    {
        goto fork_failed;
    }
    task_start(child_task);
   11b3f:	83 ec 0c             	sub    $0xc,%esp
   11b42:	ff 75 f0             	pushl  -0x10(%ebp)
   11b45:	e8 b7 f6 ff ff       	call   11201 <task_start>
   11b4a:	83 c4 10             	add    $0x10,%esp
    // 创建成功，返回子进程的pid
    return child_task->pid;
   11b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b50:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   11b56:	eb 2b                	jmp    11b83 <sys_fork+0x188>
        goto fork_failed;
   11b58:	90                   	nop
   11b59:	eb 01                	jmp    11b5c <sys_fork+0x161>
        goto fork_failed;
   11b5b:	90                   	nop

fork_failed:
    if (child_task)
   11b5c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b60:	74 1c                	je     11b7e <sys_fork+0x183>
    {
        task_uninit(child_task);
   11b62:	83 ec 0c             	sub    $0xc,%esp
   11b65:	ff 75 f0             	pushl  -0x10(%ebp)
   11b68:	e8 29 fe ff ff       	call   11996 <task_uninit>
   11b6d:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11b70:	83 ec 0c             	sub    $0xc,%esp
   11b73:	ff 75 f0             	pushl  -0x10(%ebp)
   11b76:	e8 e4 fd ff ff       	call   1195f <free_task>
   11b7b:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11b7e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11b83:	c9                   	leave  
   11b84:	c3                   	ret    

00011b85 <load_phdr>:
 * @param {Elf32_Phdr *} phdr   指向 ELF 程序头的指针
 * @param {uint32_t} page_dir   页目录的地址
 * @return {*}
 */
static int load_phdr(int file, Elf32_Phdr *phdr, uint32_t page_dir)
{
   11b85:	f3 0f 1e fb          	endbr32 
   11b89:	55                   	push   %ebp
   11b8a:	89 e5                	mov    %esp,%ebp
   11b8c:	83 ec 28             	sub    $0x28,%esp

    // 确保程序头表的虚拟地址是页对齐的，否则会抛出异常
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11b8f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b92:	8b 40 08             	mov    0x8(%eax),%eax
   11b95:	25 ff 0f 00 00       	and    $0xfff,%eax
   11b9a:	85 c0                	test   %eax,%eax
   11b9c:	74 1c                	je     11bba <load_phdr+0x35>
   11b9e:	68 70 45 01 00       	push   $0x14570
   11ba3:	68 78 46 01 00       	push   $0x14678
   11ba8:	68 23 02 00 00       	push   $0x223
   11bad:	68 1c 45 01 00       	push   $0x1451c
   11bb2:	e8 55 21 00 00       	call   13d0c <panic>
   11bb7:	83 c4 10             	add    $0x10,%esp

    // 为指定页表分配一段连续的虚拟地址，并完成到物理空间的映射
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11bba:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bbd:	8b 50 14             	mov    0x14(%eax),%edx
   11bc0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bc3:	8b 40 08             	mov    0x8(%eax),%eax
   11bc6:	6a 07                	push   $0x7
   11bc8:	52                   	push   %edx
   11bc9:	50                   	push   %eax
   11bca:	ff 75 10             	pushl  0x10(%ebp)
   11bcd:	e8 44 ec ff ff       	call   10816 <memory_alloc_for_page_dir>
   11bd2:	83 c4 10             	add    $0x10,%esp
   11bd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0)
   11bd8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11bdc:	79 1a                	jns    11bf8 <load_phdr+0x73>
    {
        log_printf("no memory");
   11bde:	83 ec 0c             	sub    $0xc,%esp
   11be1:	68 9b 45 01 00       	push   $0x1459b
   11be6:	e8 1e 24 00 00       	call   14009 <log_printf>
   11beb:	83 c4 10             	add    $0x10,%esp
        return -1;
   11bee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bf3:	e9 b8 00 00 00       	jmp    11cb0 <load_phdr+0x12b>
    }

    // 将文件指针定位到程序头表在文件中的偏移量（phdr->p_offset）处
    if (sys_lseek(file, phdr->p_offset, 0) < 0)
   11bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bfb:	8b 40 04             	mov    0x4(%eax),%eax
   11bfe:	83 ec 04             	sub    $0x4,%esp
   11c01:	6a 00                	push   $0x0
   11c03:	50                   	push   %eax
   11c04:	ff 75 08             	pushl  0x8(%ebp)
   11c07:	e8 d7 14 00 00       	call   130e3 <sys_lseek>
   11c0c:	83 c4 10             	add    $0x10,%esp
   11c0f:	85 c0                	test   %eax,%eax
   11c11:	79 1a                	jns    11c2d <load_phdr+0xa8>
    {
        log_printf("read file failed");
   11c13:	83 ec 0c             	sub    $0xc,%esp
   11c16:	68 a5 45 01 00       	push   $0x145a5
   11c1b:	e8 e9 23 00 00       	call   14009 <log_printf>
   11c20:	83 c4 10             	add    $0x10,%esp
        return -1;
   11c23:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c28:	e9 83 00 00 00       	jmp    11cb0 <load_phdr+0x12b>
    }

    // 为段分配所有的内存空间.后续操作如果失败，将在上层释放
    // 简单起见，设置成可写模式，也许可考虑根据phdr->flags设置成只读
    // 因为没有找到该值的详细定义，所以没有加上
    uint32_t vaddr = phdr->p_vaddr;
   11c2d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c30:	8b 40 08             	mov    0x8(%eax),%eax
   11c33:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz;
   11c36:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c39:	8b 40 10             	mov    0x10(%eax),%eax
   11c3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0)
   11c3f:	eb 64                	jmp    11ca5 <load_phdr+0x120>
    {
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11c41:	b8 00 10 00 00       	mov    $0x1000,%eax
   11c46:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11c4d:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11c51:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11c54:	83 ec 08             	sub    $0x8,%esp
   11c57:	ff 75 f4             	pushl  -0xc(%ebp)
   11c5a:	ff 75 10             	pushl  0x10(%ebp)
   11c5d:	e8 ec ef ff ff       	call   10c4e <memory_get_paddr>
   11c62:	83 c4 10             	add    $0x10,%esp
   11c65:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(file, (char *)paddr, curr_size) < curr_size)
   11c68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c6b:	83 ec 04             	sub    $0x4,%esp
   11c6e:	ff 75 e8             	pushl  -0x18(%ebp)
   11c71:	50                   	push   %eax
   11c72:	ff 75 08             	pushl  0x8(%ebp)
   11c75:	e8 f9 13 00 00       	call   13073 <sys_read>
   11c7a:	83 c4 10             	add    $0x10,%esp
   11c7d:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11c80:	7e 17                	jle    11c99 <load_phdr+0x114>
        {
            log_printf("read file failed");
   11c82:	83 ec 0c             	sub    $0xc,%esp
   11c85:	68 a5 45 01 00       	push   $0x145a5
   11c8a:	e8 7a 23 00 00       	call   14009 <log_printf>
   11c8f:	83 c4 10             	add    $0x10,%esp
            return -1;
   11c92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c97:	eb 17                	jmp    11cb0 <load_phdr+0x12b>
        }

        size -= curr_size;
   11c99:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c9c:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11c9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11ca2:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0)
   11ca5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ca9:	75 96                	jne    11c41 <load_phdr+0xbc>
    }

    // bss区考虑由crt0和cstart自行清0，这样更简单一些
    // 如果在上边进行处理，需要考虑到有可能的跨页表填充数据，
    // 或者也可修改memory_alloc_for_page_dir，增加分配时清0页表，但这样开销较大
    return 0;
   11cab:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11cb0:	c9                   	leave  
   11cb1:	c3                   	ret    

00011cb2 <load_elf_file>:
 * @param {char} *name  指向 ELF 文件名的字符串
 * @param {uint32_t} page_dir   页目录的地址
 * @return {*}  返回程序入口地址
 */
static uint32_t load_elf_file(task_t *task, const char *name, uint32_t page_dir)
{
   11cb2:	f3 0f 1e fb          	endbr32 
   11cb6:	55                   	push   %ebp
   11cb7:	89 e5                	mov    %esp,%ebp
   11cb9:	83 ec 78             	sub    $0x78,%esp
    Elf32_Phdr elf_phdr; // 程序表头结构体

    /* Step1 : 打开可执行文件，并读取文件头 elf_hdr  */

    // 以只读方式打开
    int file = sys_open(name, 0); // todo: flags暂时用0替代
   11cbc:	83 ec 08             	sub    $0x8,%esp
   11cbf:	6a 00                	push   $0x0
   11cc1:	ff 75 0c             	pushl  0xc(%ebp)
   11cc4:	e8 6d 13 00 00       	call   13036 <sys_open>
   11cc9:	83 c4 10             	add    $0x10,%esp
   11ccc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0)
   11ccf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11cd3:	79 18                	jns    11ced <load_elf_file+0x3b>
    {
        log_printf("open file failed.%s", name);
   11cd5:	83 ec 08             	sub    $0x8,%esp
   11cd8:	ff 75 0c             	pushl  0xc(%ebp)
   11cdb:	68 b6 45 01 00       	push   $0x145b6
   11ce0:	e8 24 23 00 00       	call   14009 <log_printf>
   11ce5:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11ce8:	e9 ca 01 00 00       	jmp    11eb7 <load_elf_file+0x205>
    }
    // 先读取文件头
    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11ced:	83 ec 04             	sub    $0x4,%esp
   11cf0:	6a 34                	push   $0x34
   11cf2:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11cf5:	50                   	push   %eax
   11cf6:	ff 75 ec             	pushl  -0x14(%ebp)
   11cf9:	e8 75 13 00 00       	call   13073 <sys_read>
   11cfe:	83 c4 10             	add    $0x10,%esp
   11d01:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr))
   11d04:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d07:	83 f8 33             	cmp    $0x33,%eax
   11d0a:	77 18                	ja     11d24 <load_elf_file+0x72>
    {
        log_printf("elf hdr too small. size=%d", cnt);
   11d0c:	83 ec 08             	sub    $0x8,%esp
   11d0f:	ff 75 e8             	pushl  -0x18(%ebp)
   11d12:	68 ca 45 01 00       	push   $0x145ca
   11d17:	e8 ed 22 00 00       	call   14009 <log_printf>
   11d1c:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d1f:	e9 93 01 00 00       	jmp    11eb7 <load_elf_file+0x205>
    }

    /* Step2 : 检查 ELF header 的合法性   */

    // 魔数（magic number）是否正确
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E') || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F'))
   11d24:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11d28:	3c 7f                	cmp    $0x7f,%al
   11d2a:	75 18                	jne    11d44 <load_elf_file+0x92>
   11d2c:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11d30:	3c 45                	cmp    $0x45,%al
   11d32:	75 10                	jne    11d44 <load_elf_file+0x92>
   11d34:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11d38:	3c 4c                	cmp    $0x4c,%al
   11d3a:	75 08                	jne    11d44 <load_elf_file+0x92>
   11d3c:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11d40:	3c 46                	cmp    $0x46,%al
   11d42:	74 15                	je     11d59 <load_elf_file+0xa7>
    {
        log_printf("check elf indent failed.");
   11d44:	83 ec 0c             	sub    $0xc,%esp
   11d47:	68 e5 45 01 00       	push   $0x145e5
   11d4c:	e8 b8 22 00 00       	call   14009 <log_printf>
   11d51:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d54:	e9 5e 01 00 00       	jmp    11eb7 <load_elf_file+0x205>
    }
    // 必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0))
   11d59:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11d5d:	66 83 f8 02          	cmp    $0x2,%ax
   11d61:	75 11                	jne    11d74 <load_elf_file+0xc2>
   11d63:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11d67:	66 83 f8 03          	cmp    $0x3,%ax
   11d6b:	75 07                	jne    11d74 <load_elf_file+0xc2>
   11d6d:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11d70:	85 c0                	test   %eax,%eax
   11d72:	75 15                	jne    11d89 <load_elf_file+0xd7>
    {
        log_printf("check elf type or entry failed.");
   11d74:	83 ec 0c             	sub    $0xc,%esp
   11d77:	68 00 46 01 00       	push   $0x14600
   11d7c:	e8 88 22 00 00       	call   14009 <log_printf>
   11d81:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d84:	e9 2e 01 00 00       	jmp    11eb7 <load_elf_file+0x205>
    }
    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0))
   11d89:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11d8d:	66 85 c0             	test   %ax,%ax
   11d90:	74 07                	je     11d99 <load_elf_file+0xe7>
   11d92:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11d95:	85 c0                	test   %eax,%eax
   11d97:	75 15                	jne    11dae <load_elf_file+0xfc>
    {
        log_printf("none programe header");
   11d99:	83 ec 0c             	sub    $0xc,%esp
   11d9c:	68 20 46 01 00       	push   $0x14620
   11da1:	e8 63 22 00 00       	call   14009 <log_printf>
   11da6:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11da9:	e9 09 01 00 00       	jmp    11eb7 <load_elf_file+0x205>
    }

    /* Step3 : 遍历 ELF 文件中的程序头表，并将可加载的段加载到指定的页表中 */

    uint32_t e_phoff = elf_hdr.e_phoff;
   11dae:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11db1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 循环遍历程序头表。
    // 每次循环，将 e_phoff 加上程序头表中每个表项的大小（即 e_phentsize 字段），以便读取下一个表项
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11db4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11dbb:	e9 d4 00 00 00       	jmp    11e94 <load_elf_file+0x1e2>
    {
        if (sys_lseek(file, e_phoff, 0) < 0)
   11dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11dc3:	83 ec 04             	sub    $0x4,%esp
   11dc6:	6a 00                	push   $0x0
   11dc8:	50                   	push   %eax
   11dc9:	ff 75 ec             	pushl  -0x14(%ebp)
   11dcc:	e8 12 13 00 00       	call   130e3 <sys_lseek>
   11dd1:	83 c4 10             	add    $0x10,%esp
   11dd4:	85 c0                	test   %eax,%eax
   11dd6:	79 15                	jns    11ded <load_elf_file+0x13b>
        {
            log_printf("read file failed");
   11dd8:	83 ec 0c             	sub    $0xc,%esp
   11ddb:	68 a5 45 01 00       	push   $0x145a5
   11de0:	e8 24 22 00 00       	call   14009 <log_printf>
   11de5:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11de8:	e9 ca 00 00 00       	jmp    11eb7 <load_elf_file+0x205>
        }

        /* Step3.1 : 读取程序表头结构体 */

        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11ded:	83 ec 04             	sub    $0x4,%esp
   11df0:	6a 20                	push   $0x20
   11df2:	8d 45 90             	lea    -0x70(%ebp),%eax
   11df5:	50                   	push   %eax
   11df6:	ff 75 ec             	pushl  -0x14(%ebp)
   11df9:	e8 75 12 00 00       	call   13073 <sys_read>
   11dfe:	83 c4 10             	add    $0x10,%esp
   11e01:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr))
   11e04:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11e07:	83 f8 1f             	cmp    $0x1f,%eax
   11e0a:	77 15                	ja     11e21 <load_elf_file+0x16f>
        {
            log_printf("read file failed");
   11e0c:	83 ec 0c             	sub    $0xc,%esp
   11e0f:	68 a5 45 01 00       	push   $0x145a5
   11e14:	e8 f0 21 00 00       	call   14009 <log_printf>
   11e19:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e1c:	e9 96 00 00 00       	jmp    11eb7 <load_elf_file+0x205>

        /* Step3.2 : 检查程序表头 */

        // 简单做一些检查，如有必要，可自行加更多
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE))
   11e21:	8b 45 90             	mov    -0x70(%ebp),%eax
   11e24:	83 f8 01             	cmp    $0x1,%eax
   11e27:	75 5c                	jne    11e85 <load_elf_file+0x1d3>
   11e29:	8b 45 98             	mov    -0x68(%ebp),%eax
   11e2c:	85 c0                	test   %eax,%eax
   11e2e:	79 55                	jns    11e85 <load_elf_file+0x1d3>
            continue;
        }

        /* Step3.3 : 加载当前程序头 */

        int err = load_phdr(file, &elf_phdr, page_dir);
   11e30:	83 ec 04             	sub    $0x4,%esp
   11e33:	ff 75 10             	pushl  0x10(%ebp)
   11e36:	8d 45 90             	lea    -0x70(%ebp),%eax
   11e39:	50                   	push   %eax
   11e3a:	ff 75 ec             	pushl  -0x14(%ebp)
   11e3d:	e8 43 fd ff ff       	call   11b85 <load_phdr>
   11e42:	83 c4 10             	add    $0x10,%esp
   11e45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   11e48:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11e4c:	79 12                	jns    11e60 <load_elf_file+0x1ae>
        {
            log_printf("load program hdr failed");
   11e4e:	83 ec 0c             	sub    $0xc,%esp
   11e51:	68 35 46 01 00       	push   $0x14635
   11e56:	e8 ae 21 00 00       	call   14009 <log_printf>
   11e5b:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e5e:	eb 57                	jmp    11eb7 <load_elf_file+0x205>
        }

        // 简单起见，不检查了，以最后的地址为bss的地址
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11e60:	8b 55 98             	mov    -0x68(%ebp),%edx
   11e63:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11e66:	01 c2                	add    %eax,%edx
   11e68:	8b 45 08             	mov    0x8(%ebp),%eax
   11e6b:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
        task->heap_end = task->heap_start;
   11e71:	8b 45 08             	mov    0x8(%ebp),%eax
   11e74:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
   11e7a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e7d:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
   11e83:	eb 01                	jmp    11e86 <load_elf_file+0x1d4>
            continue;
   11e85:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11e86:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11e8a:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e8e:	0f b7 c0             	movzwl %ax,%eax
   11e91:	01 45 f4             	add    %eax,-0xc(%ebp)
   11e94:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11e98:	0f b7 c0             	movzwl %ax,%eax
   11e9b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11e9e:	0f 8c 1c ff ff ff    	jl     11dc0 <load_elf_file+0x10e>

    }

    sys_close(file);
   11ea4:	83 ec 0c             	sub    $0xc,%esp
   11ea7:	ff 75 ec             	pushl  -0x14(%ebp)
   11eaa:	e8 5c 12 00 00       	call   1310b <sys_close>
   11eaf:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11eb2:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11eb5:	eb 19                	jmp    11ed0 <load_elf_file+0x21e>

load_failed:
    if (file >= 0)
   11eb7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11ebb:	78 0e                	js     11ecb <load_elf_file+0x219>
    {
        sys_close(file);
   11ebd:	83 ec 0c             	sub    $0xc,%esp
   11ec0:	ff 75 ec             	pushl  -0x14(%ebp)
   11ec3:	e8 43 12 00 00       	call   1310b <sys_close>
   11ec8:	83 c4 10             	add    $0x10,%esp
    }

    return 0;
   11ecb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11ed0:	c9                   	leave  
   11ed1:	c3                   	ret    

00011ed2 <copy_args>:
/**
 * @brief 复制进程参数到栈中。注意argv和env指向的空间在另一个页表里
 */
static int copy_args (char * to, uint32_t page_dir, int argc, char **argv) {
   11ed2:	f3 0f 1e fb          	endbr32 
   11ed6:	55                   	push   %ebp
   11ed7:	89 e5                	mov    %esp,%ebp
   11ed9:	83 ec 38             	sub    $0x38,%esp
    // 在stack_top中依次写入argc, argv指针，参数字符串
    task_args_t task_args;
    task_args.argc = argc;
   11edc:	8b 45 10             	mov    0x10(%ebp),%eax
   11edf:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11ee2:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee5:	83 c0 0c             	add    $0xc,%eax
   11ee8:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char * dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc);   // 留出结束符
   11eeb:	8b 45 10             	mov    0x10(%ebp),%eax
   11eee:	83 c0 03             	add    $0x3,%eax
   11ef1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11ef8:	8b 45 08             	mov    0x8(%ebp),%eax
   11efb:	01 d0                	add    %edx,%eax
   11efd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    // argv表
    char ** dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11f00:	8b 45 08             	mov    0x8(%ebp),%eax
   11f03:	83 c0 0c             	add    $0xc,%eax
   11f06:	83 ec 08             	sub    $0x8,%esp
   11f09:	50                   	push   %eax
   11f0a:	ff 75 0c             	pushl  0xc(%ebp)
   11f0d:	e8 3c ed ff ff       	call   10c4e <memory_get_paddr>
   11f12:	83 c4 10             	add    $0x10,%esp
   11f15:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11f18:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f1c:	75 1c                	jne    11f3a <copy_args+0x68>
   11f1e:	68 4d 46 01 00       	push   $0x1464d
   11f23:	68 84 46 01 00       	push   $0x14684
   11f28:	68 cb 02 00 00       	push   $0x2cb
   11f2d:	68 1c 45 01 00       	push   $0x1451c
   11f32:	e8 d5 1d 00 00       	call   13d0c <panic>
   11f37:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++) {
   11f3a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11f41:	e9 82 00 00 00       	jmp    11fc8 <copy_args+0xf6>
        char * from = argv[i];
   11f46:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f49:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f50:	8b 45 14             	mov    0x14(%ebp),%eax
   11f53:	01 d0                	add    %edx,%eax
   11f55:	8b 00                	mov    (%eax),%eax
   11f57:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // 不能用kernel_strcpy，因为to和argv不在一个页表里
        int len = kernel_strlen(from) + 1;   // 包含结束符
   11f5a:	83 ec 0c             	sub    $0xc,%esp
   11f5d:	ff 75 e8             	pushl  -0x18(%ebp)
   11f60:	e8 b6 18 00 00       	call   1381b <kernel_strlen>
   11f65:	83 c4 10             	add    $0x10,%esp
   11f68:	83 c0 01             	add    $0x1,%eax
   11f6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   11f6e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   11f71:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f77:	51                   	push   %ecx
   11f78:	52                   	push   %edx
   11f79:	ff 75 0c             	pushl  0xc(%ebp)
   11f7c:	50                   	push   %eax
   11f7d:	e8 15 ed ff ff       	call   10c97 <memory_copy_uvm_data>
   11f82:	83 c4 10             	add    $0x10,%esp
   11f85:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   11f88:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11f8c:	79 1c                	jns    11faa <copy_args+0xd8>
   11f8e:	68 5f 46 01 00       	push   $0x1465f
   11f93:	68 84 46 01 00       	push   $0x14684
   11f98:	68 d3 02 00 00       	push   $0x2d3
   11f9d:	68 1c 45 01 00       	push   $0x1451c
   11fa2:	e8 65 1d 00 00       	call   13d0c <panic>
   11fa7:	83 c4 10             	add    $0x10,%esp

        // 关联ar
        dest_argv_tb[i] = dest_arg;
   11faa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fb7:	01 c2                	add    %eax,%edx
   11fb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11fbc:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   11fbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11fc1:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++) {
   11fc4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11fc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fcb:	3b 45 10             	cmp    0x10(%ebp),%eax
   11fce:	0f 8c 72 ff ff ff    	jl     11f46 <copy_args+0x74>
    }

     // 写入task_args
    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   11fd4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   11fd7:	8b 45 08             	mov    0x8(%ebp),%eax
   11fda:	6a 0c                	push   $0xc
   11fdc:	52                   	push   %edx
   11fdd:	ff 75 0c             	pushl  0xc(%ebp)
   11fe0:	50                   	push   %eax
   11fe1:	e8 b1 ec ff ff       	call   10c97 <memory_copy_uvm_data>
   11fe6:	83 c4 10             	add    $0x10,%esp
}
   11fe9:	c9                   	leave  
   11fea:	c3                   	ret    

00011feb <sys_execv>:
 */
/**
 * @brief 加载一个进程
 */
int sys_execv(char *name, char **argv, char **env)
{
   11feb:	f3 0f 1e fb          	endbr32 
   11fef:	55                   	push   %ebp
   11ff0:	89 e5                	mov    %esp,%ebp
   11ff2:	83 ec 28             	sub    $0x28,%esp
    task_t *task = task_current();  
   11ff5:	e8 f4 f5 ff ff       	call   115ee <task_current>
   11ffa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t old_page_dir = task->tss.cr3;
   11ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12000:	8b 40 1c             	mov    0x1c(%eax),%eax
   12003:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 现在开始加载了，先准备应用页表，由于所有操作均在内核区中进行，所以可以直接先切换到新页表
    uint32_t new_page_dir = memory_create_uvm();
   12006:	e8 82 e7 ff ff       	call   1078d <memory_create_uvm>
   1200b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir)
   1200e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12012:	0f 84 19 01 00 00    	je     12131 <sys_execv+0x146>
    {
        goto exec_failed;
    }

    // 加载elf文件到内存中。要放在开启新页表之后，这样才能对相应的内存区域写
    uint32_t entry = load_elf_file(task, name, new_page_dir); // 暂时置用task->name表示
   12018:	83 ec 04             	sub    $0x4,%esp
   1201b:	ff 75 ec             	pushl  -0x14(%ebp)
   1201e:	ff 75 08             	pushl  0x8(%ebp)
   12021:	ff 75 f4             	pushl  -0xc(%ebp)
   12024:	e8 89 fc ff ff       	call   11cb2 <load_elf_file>
   12029:	83 c4 10             	add    $0x10,%esp
   1202c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0)
   1202f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12033:	0f 84 fb 00 00 00    	je     12134 <sys_execv+0x149>
    }

    /**Step : 用户栈和内核栈的分配和使用*/

    // 准备用户栈空间，预留环境环境及参数的空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE; // 预留一部分参数空间
   12039:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    // 为新进程分配了一个用户栈
    int err = memory_alloc_for_page_dir(new_page_dir, MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE, MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
   12040:	6a 07                	push   $0x7
   12042:	68 00 40 1f 00       	push   $0x1f4000
   12047:	68 00 c0 e0 df       	push   $0xdfe0c000
   1204c:	ff 75 ec             	pushl  -0x14(%ebp)
   1204f:	e8 c2 e7 ff ff       	call   10816 <memory_alloc_for_page_dir>
   12054:	83 c4 10             	add    $0x10,%esp
   12057:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0)
   1205a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1205e:	0f 88 d3 00 00 00    	js     12137 <sys_execv+0x14c>
        goto exec_failed;
    // 将程序的参数和环境变量复制到用户栈的顶部
    int argc = strings_count(argv);
   12064:	83 ec 0c             	sub    $0xc,%esp
   12067:	ff 75 0c             	pushl  0xc(%ebp)
   1206a:	e8 22 1c 00 00       	call   13c91 <strings_count>
   1206f:	83 c4 10             	add    $0x10,%esp
   12072:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   12075:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12078:	ff 75 0c             	pushl  0xc(%ebp)
   1207b:	ff 75 dc             	pushl  -0x24(%ebp)
   1207e:	ff 75 ec             	pushl  -0x14(%ebp)
   12081:	50                   	push   %eax
   12082:	e8 4b fe ff ff       	call   11ed2 <copy_args>
   12087:	83 c4 10             	add    $0x10,%esp
   1208a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0)
   1208d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12091:	0f 88 a3 00 00 00    	js     1213a <sys_execv+0x14f>
        goto exec_failed;
    // 复用了exec 函数执行前的进程的内核栈 frame 为原来进程的内核栈顶部地址
    syscall_frame_t *frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   12097:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1209a:	8b 40 04             	mov    0x4(%eax),%eax
   1209d:	83 e8 58             	sub    $0x58,%eax
   120a0:	89 45 d8             	mov    %eax,-0x28(%ebp)
    // 将内核栈的EIP指针指向新进程的入口地址，以执行新的进程
    frame->eip = entry;
   120a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
   120a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120a9:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   120ac:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120af:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   120b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120b9:	8b 50 28             	mov    0x28(%eax),%edx
   120bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120bf:	89 50 2c             	mov    %edx,0x2c(%eax)
   120c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120c5:	8b 50 2c             	mov    0x2c(%eax),%edx
   120c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120cb:	89 50 24             	mov    %edx,0x24(%eax)
   120ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120d1:	8b 50 24             	mov    0x24(%eax),%edx
   120d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120d7:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   120da:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120dd:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   120e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120e7:	8b 50 1c             	mov    0x1c(%eax),%edx
   120ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120ed:	89 50 14             	mov    %edx,0x14(%eax)
   120f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120f3:	8b 50 14             	mov    0x14(%eax),%edx
   120f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120f9:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT | EFLAGS_IF; // 段寄存器无需修改
   120fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120ff:	c7 00 02 02 00 00    	movl   $0x202,(%eax)
    // 将新进程的系统调用帧的栈顶指针（即ESP寄存器）设置为用户栈的顶部，从而实现系统调用的参数传递
    frame->esp = stack_top - sizeof(uint32_t) * SYSCALL_PARAM_COUNT;
   12105:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12108:	83 e8 14             	sub    $0x14,%eax
   1210b:	89 c2                	mov    %eax,%edx
   1210d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12110:	89 50 50             	mov    %edx,0x50(%eax)

    // 切换到新的页表
    task->tss.cr3 = new_page_dir;
   12113:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12116:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12119:	89 50 1c             	mov    %edx,0x1c(%eax)
    mmu_set_page_dir(new_page_dir); // 切换至新的页表。由于不用访问原栈及数据，所以并无问题
   1211c:	83 ec 0c             	sub    $0xc,%esp
   1211f:	ff 75 ec             	pushl  -0x14(%ebp)
   12122:	e8 3b ef ff ff       	call   11062 <mmu_set_page_dir>
   12127:	83 c4 10             	add    $0x10,%esp

    // 当从系统调用中返回时，将切换至新进程的入口地址运行，并且进程能够获取参数
    // 注意，如果用户栈设置不当，可能导致返回后运行出现异常。可在gdb中使用nexti单步观察运行流程
    return 0;
   1212a:	b8 00 00 00 00       	mov    $0x0,%eax
   1212f:	eb 3a                	jmp    1216b <sys_execv+0x180>
        goto exec_failed;
   12131:	90                   	nop
   12132:	eb 07                	jmp    1213b <sys_execv+0x150>
        goto exec_failed;
   12134:	90                   	nop
   12135:	eb 04                	jmp    1213b <sys_execv+0x150>
        goto exec_failed;
   12137:	90                   	nop
   12138:	eb 01                	jmp    1213b <sys_execv+0x150>
        goto exec_failed;
   1213a:	90                   	nop

exec_failed: // 必要的资源释放
    if (new_page_dir)
   1213b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1213f:	74 25                	je     12166 <sys_execv+0x17b>
    {
        // 有页表空间切换，切换至旧页表，销毁新页表
        task->tss.cr3 = old_page_dir;
   12141:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12144:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12147:	89 50 1c             	mov    %edx,0x1c(%eax)
        mmu_set_page_dir(old_page_dir);
   1214a:	83 ec 0c             	sub    $0xc,%esp
   1214d:	ff 75 f0             	pushl  -0x10(%ebp)
   12150:	e8 0d ef ff ff       	call   11062 <mmu_set_page_dir>
   12155:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   12158:	83 ec 0c             	sub    $0xc,%esp
   1215b:	ff 75 ec             	pushl  -0x14(%ebp)
   1215e:	e8 81 e8 ff ff       	call   109e4 <memory_destroy_uvm>
   12163:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   12166:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1216b:	c9                   	leave  
   1216c:	c3                   	ret    

0001216d <sys_yield>:

int sys_yield()
{
   1216d:	f3 0f 1e fb          	endbr32 
   12171:	55                   	push   %ebp
   12172:	89 e5                	mov    %esp,%ebp
    return 0;
   12174:	b8 00 00 00 00       	mov    $0x0,%eax
   12179:	5d                   	pop    %ebp
   1217a:	c3                   	ret    

0001217b <lgdt>:
{
   1217b:	55                   	push   %ebp
   1217c:	89 e5                	mov    %esp,%ebp
   1217e:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   12181:	8b 45 08             	mov    0x8(%ebp),%eax
   12184:	c1 e8 10             	shr    $0x10,%eax
   12187:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   1218b:	8b 45 08             	mov    0x8(%ebp),%eax
   1218e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   12192:	8b 45 0c             	mov    0xc(%ebp),%eax
   12195:	83 e8 01             	sub    $0x1,%eax
   12198:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   1219c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   121a0:	90                   	nop
   121a1:	c9                   	leave  
   121a2:	c3                   	ret    

000121a3 <far_jump>:
{
   121a3:	55                   	push   %ebp
   121a4:	89 e5                	mov    %esp,%ebp
   121a6:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   121a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
   121af:	8b 45 08             	mov    0x8(%ebp),%eax
   121b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   121b5:	8d 45 f8             	lea    -0x8(%ebp),%eax
   121b8:	ff 28                	ljmp   *(%eax)
}
   121ba:	90                   	nop
   121bb:	c9                   	leave  
   121bc:	c3                   	ret    

000121bd <segment_desc_set>:

/**
 * 设置段描述符
 */
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   121bd:	f3 0f 1e fb          	endbr32 
   121c1:	55                   	push   %ebp
   121c2:	89 e5                	mov    %esp,%ebp
   121c4:	83 ec 14             	sub    $0x14,%esp
   121c7:	8b 45 14             	mov    0x14(%ebp),%eax
   121ca:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   121ce:	8b 45 08             	mov    0x8(%ebp),%eax
   121d1:	83 e0 f8             	and    $0xfffffff8,%eax
   121d4:	05 e0 f3 01 00       	add    $0x1f3e0,%eax
   121d9:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 如果界限比较长，将长度单位换成4KB
    if (limit > 0xfffff)
   121dc:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   121e3:	76 0f                	jbe    121f4 <segment_desc_set+0x37>
    {
        attr |= 0x8000;
   121e5:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   121eb:	8b 45 10             	mov    0x10(%ebp),%eax
   121ee:	c1 e8 0c             	shr    $0xc,%eax
   121f1:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xffff;
   121f4:	8b 45 10             	mov    0x10(%ebp),%eax
   121f7:	89 c2                	mov    %eax,%edx
   121f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121fc:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   121ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   12202:	89 c2                	mov    %eax,%edx
   12204:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12207:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   1220b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1220e:	c1 e8 10             	shr    $0x10,%eax
   12211:	89 c2                	mov    %eax,%edx
   12213:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12216:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   12219:	8b 45 10             	mov    0x10(%ebp),%eax
   1221c:	c1 e8 10             	shr    $0x10,%eax
   1221f:	c1 e0 08             	shl    $0x8,%eax
   12222:	66 25 00 0f          	and    $0xf00,%ax
   12226:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1222a:	89 c2                	mov    %eax,%edx
   1222c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1222f:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   12233:	8b 45 0c             	mov    0xc(%ebp),%eax
   12236:	c1 e8 18             	shr    $0x18,%eax
   12239:	89 c2                	mov    %eax,%edx
   1223b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1223e:	88 50 07             	mov    %dl,0x7(%eax)
}
   12241:	90                   	nop
   12242:	c9                   	leave  
   12243:	c3                   	ret    

00012244 <init_gdt>:

/**
 * 初始化GDT
 */
void init_gdt(void)
{
   12244:	f3 0f 1e fb          	endbr32 
   12248:	55                   	push   %ebp
   12249:	89 e5                	mov    %esp,%ebp
   1224b:	83 ec 18             	sub    $0x18,%esp
    // 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1224e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12255:	eb 19                	jmp    12270 <init_gdt+0x2c>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   12257:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1225a:	c1 e0 03             	shl    $0x3,%eax
   1225d:	6a 00                	push   $0x0
   1225f:	6a 00                	push   $0x0
   12261:	6a 00                	push   $0x0
   12263:	50                   	push   %eax
   12264:	e8 54 ff ff ff       	call   121bd <segment_desc_set>
   12269:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1226c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12270:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12277:	7e de                	jle    12257 <init_gdt+0x13>
    }
    // 使用平摊模型（只用了两个段：代码段和数据段）
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   12279:	68 92 40 00 00       	push   $0x4092
   1227e:	6a ff                	push   $0xffffffff
   12280:	6a 00                	push   $0x0
   12282:	6a 10                	push   $0x10
   12284:	e8 34 ff ff ff       	call   121bd <segment_desc_set>
   12289:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);

    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   1228c:	68 9a 40 00 00       	push   $0x409a
   12291:	6a ff                	push   $0xffffffff
   12293:	6a 00                	push   $0x0
   12295:	6a 08                	push   $0x8
   12297:	e8 21 ff ff ff       	call   121bd <segment_desc_set>
   1229c:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   1229f:	ba bd 02 01 00       	mov    $0x102bd,%edx
   122a4:	b8 f8 f3 01 00       	mov    $0x1f3f8,%eax
   122a9:	68 05 ec 00 00       	push   $0xec05
   122ae:	52                   	push   %edx
   122af:	6a 08                	push   $0x8
   122b1:	50                   	push   %eax
   122b2:	e8 b5 02 00 00       	call   1256c <gate_desc_set>
   122b7:	83 c4 10             	add    $0x10,%esp
            KERNEL_SELECTOR_CS,
            (uint32_t)exception_handler_syscall,    // 函数入口地址
            GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    
    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   122ba:	b8 e0 f3 01 00       	mov    $0x1f3e0,%eax
   122bf:	83 ec 08             	sub    $0x8,%esp
   122c2:	68 00 08 00 00       	push   $0x800
   122c7:	50                   	push   %eax
   122c8:	e8 ae fe ff ff       	call   1217b <lgdt>
   122cd:	83 c4 10             	add    $0x10,%esp
}
   122d0:	90                   	nop
   122d1:	c9                   	leave  
   122d2:	c3                   	ret    

000122d3 <gdt_alloc_desc>:
/**
 * @description: 寻找GDT中的空闲段，分配一个GDT推荐表符
 * @return {*}
 */
int gdt_alloc_desc(void)
{
   122d3:	f3 0f 1e fb          	endbr32 
   122d7:	55                   	push   %ebp
   122d8:	89 e5                	mov    %esp,%ebp
   122da:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&mutex);
   122dd:	83 ec 0c             	sub    $0xc,%esp
   122e0:	68 e0 fb 01 00       	push   $0x1fbe0
   122e5:	e8 61 0f 00 00       	call   1324b <mutex_lock>
   122ea:	83 c4 10             	add    $0x10,%esp
    // 跳过第0项
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   122ed:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   122f4:	eb 36                	jmp    1232c <gdt_alloc_desc+0x59>
    {
        segment_desc_t *desc = gdt_table + i;
   122f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122f9:	c1 e0 03             	shl    $0x3,%eax
   122fc:	05 e0 f3 01 00       	add    $0x1f3e0,%eax
   12301:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0)
   12304:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12307:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1230b:	66 85 c0             	test   %ax,%ax
   1230e:	75 18                	jne    12328 <gdt_alloc_desc+0x55>
        {
            mutex_unlock(&mutex);
   12310:	83 ec 0c             	sub    $0xc,%esp
   12313:	68 e0 fb 01 00       	push   $0x1fbe0
   12318:	e8 c6 0f 00 00       	call   132e3 <mutex_unlock>
   1231d:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   12320:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12323:	c1 e0 03             	shl    $0x3,%eax
   12326:	eb 22                	jmp    1234a <gdt_alloc_desc+0x77>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   12328:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1232c:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12333:	7e c1                	jle    122f6 <gdt_alloc_desc+0x23>
        }
    }
    mutex_unlock(&mutex);
   12335:	83 ec 0c             	sub    $0xc,%esp
   12338:	68 e0 fb 01 00       	push   $0x1fbe0
   1233d:	e8 a1 0f 00 00       	call   132e3 <mutex_unlock>
   12342:	83 c4 10             	add    $0x10,%esp
    return -1;
   12345:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1234a:	c9                   	leave  
   1234b:	c3                   	ret    

0001234c <gdt_free_sel>:

// 释放描述符
void gdt_free_sel (int sel) {
   1234c:	f3 0f 1e fb          	endbr32 
   12350:	55                   	push   %ebp
   12351:	89 e5                	mov    %esp,%ebp
   12353:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   12356:	83 ec 0c             	sub    $0xc,%esp
   12359:	68 e0 fb 01 00       	push   $0x1fbe0
   1235e:	e8 e8 0e 00 00       	call   1324b <mutex_lock>
   12363:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   12366:	8b 45 08             	mov    0x8(%ebp),%eax
   12369:	c1 e8 03             	shr    $0x3,%eax
   1236c:	66 c7 04 c5 e5 f3 01 	movw   $0x0,0x1f3e5(,%eax,8)
   12373:	00 00 00 
    mutex_unlock(&mutex);
   12376:	83 ec 0c             	sub    $0xc,%esp
   12379:	68 e0 fb 01 00       	push   $0x1fbe0
   1237e:	e8 60 0f 00 00       	call   132e3 <mutex_unlock>
   12383:	83 c4 10             	add    $0x10,%esp
}
   12386:	90                   	nop
   12387:	c9                   	leave  
   12388:	c3                   	ret    

00012389 <switch_to_tss>:

/**
 * 切换至TSS，即跳转实现任务切换
 */
void switch_to_tss(uint32_t tss_selector)
{
   12389:	f3 0f 1e fb          	endbr32 
   1238d:	55                   	push   %ebp
   1238e:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   12390:	6a 00                	push   $0x0
   12392:	ff 75 08             	pushl  0x8(%ebp)
   12395:	e8 09 fe ff ff       	call   121a3 <far_jump>
   1239a:	83 c4 08             	add    $0x8,%esp
}
   1239d:	90                   	nop
   1239e:	c9                   	leave  
   1239f:	c3                   	ret    

000123a0 <cpu_init>:

/**
 * CPU初始化
 */
void cpu_init(void)
{
   123a0:	f3 0f 1e fb          	endbr32 
   123a4:	55                   	push   %ebp
   123a5:	89 e5                	mov    %esp,%ebp
   123a7:	83 ec 08             	sub    $0x8,%esp
    // 互斥锁初始化
    mutex_init(&mutex);
   123aa:	83 ec 0c             	sub    $0xc,%esp
   123ad:	68 e0 fb 01 00       	push   $0x1fbe0
   123b2:	e8 62 0e 00 00       	call   13219 <mutex_init>
   123b7:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   123ba:	e8 85 fe ff ff       	call   12244 <init_gdt>
}
   123bf:	90                   	nop
   123c0:	c9                   	leave  
   123c1:	c3                   	ret    

000123c2 <cli>:
{
   123c2:	55                   	push   %ebp
   123c3:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   123c5:	fa                   	cli    
}
   123c6:	90                   	nop
   123c7:	5d                   	pop    %ebp
   123c8:	c3                   	ret    

000123c9 <sti>:
{
   123c9:	55                   	push   %ebp
   123ca:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   123cc:	fb                   	sti    
}
   123cd:	90                   	nop
   123ce:	5d                   	pop    %ebp
   123cf:	c3                   	ret    

000123d0 <inb>:
{
   123d0:	55                   	push   %ebp
   123d1:	89 e5                	mov    %esp,%ebp
   123d3:	83 ec 14             	sub    $0x14,%esp
   123d6:	8b 45 08             	mov    0x8(%ebp),%eax
   123d9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]"
   123dd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   123e1:	89 c2                	mov    %eax,%edx
   123e3:	ec                   	in     (%dx),%al
   123e4:	88 45 ff             	mov    %al,-0x1(%ebp)
    return res;
   123e7:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   123eb:	c9                   	leave  
   123ec:	c3                   	ret    

000123ed <outb>:
{
   123ed:	55                   	push   %ebp
   123ee:	89 e5                	mov    %esp,%ebp
   123f0:	83 ec 08             	sub    $0x8,%esp
   123f3:	8b 45 08             	mov    0x8(%ebp),%eax
   123f6:	8b 55 0c             	mov    0xc(%ebp),%edx
   123f9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   123fd:	89 d0                	mov    %edx,%eax
   123ff:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   12402:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12406:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1240a:	ee                   	out    %al,(%dx)
}
   1240b:	90                   	nop
   1240c:	c9                   	leave  
   1240d:	c3                   	ret    

0001240e <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   1240e:	55                   	push   %ebp
   1240f:	89 e5                	mov    %esp,%ebp
   12411:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   12414:	8b 45 08             	mov    0x8(%ebp),%eax
   12417:	c1 e8 10             	shr    $0x10,%eax
   1241a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   1241e:	8b 45 08             	mov    0x8(%ebp),%eax
   12421:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   12425:	8b 45 0c             	mov    0xc(%ebp),%eax
   12428:	83 e8 01             	sub    $0x1,%eax
   1242b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   1242f:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12433:	90                   	nop
   12434:	c9                   	leave  
   12435:	c3                   	ret    

00012436 <read_cr2>:
static inline uint32_t read_cr2() {
   12436:	55                   	push   %ebp
   12437:	89 e5                	mov    %esp,%ebp
   12439:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   1243c:	0f 20 d0             	mov    %cr2,%eax
   1243f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   12442:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12445:	c9                   	leave  
   12446:	c3                   	ret    

00012447 <hlt>:
static inline void hlt(void) {
   12447:	55                   	push   %ebp
   12448:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1244a:	f4                   	hlt    
}
   1244b:	90                   	nop
   1244c:	5d                   	pop    %ebp
   1244d:	c3                   	ret    

0001244e <read_eflags>:
/**
 * @description: 读 eflags 寄存器
 * @return {*}
 */
static inline uint32_t read_eflags (void) {
   1244e:	55                   	push   %ebp
   1244f:	89 e5                	mov    %esp,%ebp
   12451:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax":"=a"(eflags));
   12454:	9c                   	pushf  
   12455:	58                   	pop    %eax
   12456:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   12459:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1245c:	c9                   	leave  
   1245d:	c3                   	ret    

0001245e <write_eflags>:
/**
 * @description: 写 eflags 寄存器
 * @return {*}
 * @param {uint32_t} eflags
 */
static inline void write_eflags (uint32_t eflags) {
   1245e:	55                   	push   %ebp
   1245f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl"::"a"(eflags));
   12461:	8b 45 08             	mov    0x8(%ebp),%eax
   12464:	50                   	push   %eax
   12465:	9d                   	popf   
}
   12466:	90                   	nop
   12467:	5d                   	pop    %ebp
   12468:	c3                   	ret    

00012469 <dump_core_regs>:
#include "cpu/irq.h"

static gate_desc_t idt_table[IDT_TABLE_NR]; // 中断描述表

static void dump_core_regs(exception_frame_t *frame)
{
   12469:	f3 0f 1e fb          	endbr32 
   1246d:	55                   	push   %ebp
   1246e:	89 e5                	mov    %esp,%ebp
   12470:	57                   	push   %edi
   12471:	56                   	push   %esi
   12472:	53                   	push   %ebx
   12473:	83 ec 2c             	sub    $0x2c,%esp
    // 打印CPU寄存器相关内容
    uint32_t esp, ss;
    if (frame->cs & 0x7)
   12476:	8b 45 08             	mov    0x8(%ebp),%eax
   12479:	8b 40 3c             	mov    0x3c(%eax),%eax
   1247c:	83 e0 07             	and    $0x7,%eax
   1247f:	85 c0                	test   %eax,%eax
   12481:	74 14                	je     12497 <dump_core_regs+0x2e>
    {
        ss = frame->ds;
   12483:	8b 45 08             	mov    0x8(%ebp),%eax
   12486:	8b 40 0c             	mov    0xc(%eax),%eax
   12489:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   1248c:	8b 45 08             	mov    0x8(%ebp),%eax
   1248f:	8b 40 1c             	mov    0x1c(%eax),%eax
   12492:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   12495:	eb 12                	jmp    124a9 <dump_core_regs+0x40>
    }
    else
    {
        ss = frame->ss3;
   12497:	8b 45 08             	mov    0x8(%ebp),%eax
   1249a:	8b 40 48             	mov    0x48(%eax),%eax
   1249d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   124a0:	8b 45 08             	mov    0x8(%ebp),%eax
   124a3:	8b 40 44             	mov    0x44(%eax),%eax
   124a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   124a9:	8b 45 08             	mov    0x8(%ebp),%eax
   124ac:	8b 50 34             	mov    0x34(%eax),%edx
   124af:	8b 45 08             	mov    0x8(%ebp),%eax
   124b2:	8b 40 30             	mov    0x30(%eax),%eax
   124b5:	83 ec 04             	sub    $0x4,%esp
   124b8:	52                   	push   %edx
   124b9:	50                   	push   %eax
   124ba:	68 90 46 01 00       	push   $0x14690
   124bf:	e8 45 1b 00 00       	call   14009 <log_printf>
   124c4:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   124c7:	8b 45 08             	mov    0x8(%ebp),%eax
   124ca:	8b 30                	mov    (%eax),%esi
   124cc:	8b 45 08             	mov    0x8(%ebp),%eax
   124cf:	8b 58 04             	mov    0x4(%eax),%ebx
   124d2:	8b 45 08             	mov    0x8(%ebp),%eax
   124d5:	8b 48 08             	mov    0x8(%eax),%ecx
   124d8:	8b 45 08             	mov    0x8(%ebp),%eax
   124db:	8b 50 0c             	mov    0xc(%eax),%edx
   124de:	8b 45 08             	mov    0x8(%ebp),%eax
   124e1:	8b 40 3c             	mov    0x3c(%eax),%eax
   124e4:	83 ec 04             	sub    $0x4,%esp
   124e7:	56                   	push   %esi
   124e8:	53                   	push   %ebx
   124e9:	ff 75 e0             	pushl  -0x20(%ebp)
   124ec:	51                   	push   %ecx
   124ed:	52                   	push   %edx
   124ee:	50                   	push   %eax
   124ef:	68 ac 46 01 00       	push   $0x146ac
   124f4:	e8 10 1b 00 00       	call   14009 <log_printf>
   124f9:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   124fc:	8b 45 08             	mov    0x8(%ebp),%eax
   124ff:	8b 40 18             	mov    0x18(%eax),%eax
   12502:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12505:	8b 45 08             	mov    0x8(%ebp),%eax
   12508:	8b 78 14             	mov    0x14(%eax),%edi
   1250b:	8b 45 08             	mov    0x8(%ebp),%eax
   1250e:	8b 70 10             	mov    0x10(%eax),%esi
   12511:	8b 45 08             	mov    0x8(%ebp),%eax
   12514:	8b 58 24             	mov    0x24(%eax),%ebx
   12517:	8b 45 08             	mov    0x8(%ebp),%eax
   1251a:	8b 48 28             	mov    0x28(%eax),%ecx
   1251d:	8b 45 08             	mov    0x8(%ebp),%eax
   12520:	8b 50 20             	mov    0x20(%eax),%edx
   12523:	8b 45 08             	mov    0x8(%ebp),%eax
   12526:	8b 40 2c             	mov    0x2c(%eax),%eax
   12529:	83 ec 0c             	sub    $0xc,%esp
   1252c:	ff 75 e4             	pushl  -0x1c(%ebp)
   1252f:	ff 75 d4             	pushl  -0x2c(%ebp)
   12532:	57                   	push   %edi
   12533:	56                   	push   %esi
   12534:	53                   	push   %ebx
   12535:	51                   	push   %ecx
   12536:	52                   	push   %edx
   12537:	50                   	push   %eax
   12538:	68 d4 46 01 00       	push   $0x146d4
   1253d:	e8 c7 1a 00 00       	call   14009 <log_printf>
   12542:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   12545:	8b 45 08             	mov    0x8(%ebp),%eax
   12548:	8b 50 40             	mov    0x40(%eax),%edx
   1254b:	8b 45 08             	mov    0x8(%ebp),%eax
   1254e:	8b 40 38             	mov    0x38(%eax),%eax
   12551:	83 ec 04             	sub    $0x4,%esp
   12554:	52                   	push   %edx
   12555:	50                   	push   %eax
   12556:	68 1d 47 01 00       	push   $0x1471d
   1255b:	e8 a9 1a 00 00       	call   14009 <log_printf>
   12560:	83 c4 10             	add    $0x10,%esp
}
   12563:	90                   	nop
   12564:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12567:	5b                   	pop    %ebx
   12568:	5e                   	pop    %esi
   12569:	5f                   	pop    %edi
   1256a:	5d                   	pop    %ebp
   1256b:	c3                   	ret    

0001256c <gate_desc_set>:
 * @param {uint32_t} offset 32位的偏移量
 * @param {uint16_t} attr 16位的属性
 * @return {*}
 */
void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   1256c:	f3 0f 1e fb          	endbr32 
   12570:	55                   	push   %ebp
   12571:	89 e5                	mov    %esp,%ebp
   12573:	83 ec 08             	sub    $0x8,%esp
   12576:	8b 55 0c             	mov    0xc(%ebp),%edx
   12579:	8b 45 14             	mov    0x14(%ebp),%eax
   1257c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12580:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xffff; //  将 offset 的低16位存储到 desc 结构体中的 offset15_0 成员变量中
   12584:	8b 45 10             	mov    0x10(%ebp),%eax
   12587:	89 c2                	mov    %eax,%edx
   12589:	8b 45 08             	mov    0x8(%ebp),%eax
   1258c:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1258f:	8b 45 08             	mov    0x8(%ebp),%eax
   12592:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12596:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1259a:	8b 45 08             	mov    0x8(%ebp),%eax
   1259d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   125a1:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xffff; // 将 offset 的高16位存储到 desc 结构体中的 offset31_16 成员变量中
   125a5:	8b 45 10             	mov    0x10(%ebp),%eax
   125a8:	c1 e8 10             	shr    $0x10,%eax
   125ab:	89 c2                	mov    %eax,%edx
   125ad:	8b 45 08             	mov    0x8(%ebp),%eax
   125b0:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   125b4:	90                   	nop
   125b5:	c9                   	leave  
   125b6:	c3                   	ret    

000125b7 <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   125b7:	f3 0f 1e fb          	endbr32 
   125bb:	55                   	push   %ebp
   125bc:	89 e5                	mov    %esp,%ebp
   125be:	83 ec 08             	sub    $0x8,%esp
    log_printf("-------------------------");
   125c1:	83 ec 0c             	sub    $0xc,%esp
   125c4:	68 33 47 01 00       	push   $0x14733
   125c9:	e8 3b 1a 00 00       	call   14009 <log_printf>
   125ce:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s", message);
   125d1:	83 ec 08             	sub    $0x8,%esp
   125d4:	ff 75 0c             	pushl  0xc(%ebp)
   125d7:	68 4d 47 01 00       	push   $0x1474d
   125dc:	e8 28 1a 00 00       	call   14009 <log_printf>
   125e1:	83 c4 10             	add    $0x10,%esp

    // 内联汇编 hlt 让cpu停止运行
    for (;;)
    {
        hlt();
   125e4:	e8 5e fe ff ff       	call   12447 <hlt>
   125e9:	eb f9                	jmp    125e4 <do_default_handler+0x2d>

000125eb <do_handler_unknown>:
    }
}

void do_handler_unknown(exception_frame_t *frame)
{
   125eb:	f3 0f 1e fb          	endbr32 
   125ef:	55                   	push   %ebp
   125f0:	89 e5                	mov    %esp,%ebp
   125f2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Unknown exception.");
   125f5:	83 ec 08             	sub    $0x8,%esp
   125f8:	68 67 47 01 00       	push   $0x14767
   125fd:	ff 75 08             	pushl  0x8(%ebp)
   12600:	e8 b2 ff ff ff       	call   125b7 <do_default_handler>
   12605:	83 c4 10             	add    $0x10,%esp
}
   12608:	90                   	nop
   12609:	c9                   	leave  
   1260a:	c3                   	ret    

0001260b <do_handler_divider>:

void do_handler_divider(exception_frame_t *frame)
{
   1260b:	f3 0f 1e fb          	endbr32 
   1260f:	55                   	push   %ebp
   12610:	89 e5                	mov    %esp,%ebp
   12612:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divider Error.");
   12615:	83 ec 08             	sub    $0x8,%esp
   12618:	68 7a 47 01 00       	push   $0x1477a
   1261d:	ff 75 08             	pushl  0x8(%ebp)
   12620:	e8 92 ff ff ff       	call   125b7 <do_default_handler>
   12625:	83 c4 10             	add    $0x10,%esp
}
   12628:	90                   	nop
   12629:	c9                   	leave  
   1262a:	c3                   	ret    

0001262b <do_handler_Debug>:

void do_handler_Debug(exception_frame_t *frame)
{
   1262b:	f3 0f 1e fb          	endbr32 
   1262f:	55                   	push   %ebp
   12630:	89 e5                	mov    %esp,%ebp
   12632:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   12635:	83 ec 08             	sub    $0x8,%esp
   12638:	68 89 47 01 00       	push   $0x14789
   1263d:	ff 75 08             	pushl  0x8(%ebp)
   12640:	e8 72 ff ff ff       	call   125b7 <do_default_handler>
   12645:	83 c4 10             	add    $0x10,%esp
}
   12648:	90                   	nop
   12649:	c9                   	leave  
   1264a:	c3                   	ret    

0001264b <do_handler_NMI>:

void do_handler_NMI(exception_frame_t *frame)
{
   1264b:	f3 0f 1e fb          	endbr32 
   1264f:	55                   	push   %ebp
   12650:	89 e5                	mov    %esp,%ebp
   12652:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   12655:	83 ec 08             	sub    $0x8,%esp
   12658:	68 99 47 01 00       	push   $0x14799
   1265d:	ff 75 08             	pushl  0x8(%ebp)
   12660:	e8 52 ff ff ff       	call   125b7 <do_default_handler>
   12665:	83 c4 10             	add    $0x10,%esp
}
   12668:	90                   	nop
   12669:	c9                   	leave  
   1266a:	c3                   	ret    

0001266b <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t *frame)
{
   1266b:	f3 0f 1e fb          	endbr32 
   1266f:	55                   	push   %ebp
   12670:	89 e5                	mov    %esp,%ebp
   12672:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   12675:	83 ec 08             	sub    $0x8,%esp
   12678:	68 a8 47 01 00       	push   $0x147a8
   1267d:	ff 75 08             	pushl  0x8(%ebp)
   12680:	e8 32 ff ff ff       	call   125b7 <do_default_handler>
   12685:	83 c4 10             	add    $0x10,%esp
}
   12688:	90                   	nop
   12689:	c9                   	leave  
   1268a:	c3                   	ret    

0001268b <do_handler_overflow>:

void do_handler_overflow(exception_frame_t *frame)
{
   1268b:	f3 0f 1e fb          	endbr32 
   1268f:	55                   	push   %ebp
   12690:	89 e5                	mov    %esp,%ebp
   12692:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   12695:	83 ec 08             	sub    $0x8,%esp
   12698:	68 b4 47 01 00       	push   $0x147b4
   1269d:	ff 75 08             	pushl  0x8(%ebp)
   126a0:	e8 12 ff ff ff       	call   125b7 <do_default_handler>
   126a5:	83 c4 10             	add    $0x10,%esp
}
   126a8:	90                   	nop
   126a9:	c9                   	leave  
   126aa:	c3                   	ret    

000126ab <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t *frame)
{
   126ab:	f3 0f 1e fb          	endbr32 
   126af:	55                   	push   %ebp
   126b0:	89 e5                	mov    %esp,%ebp
   126b2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   126b5:	83 ec 08             	sub    $0x8,%esp
   126b8:	68 be 47 01 00       	push   $0x147be
   126bd:	ff 75 08             	pushl  0x8(%ebp)
   126c0:	e8 f2 fe ff ff       	call   125b7 <do_default_handler>
   126c5:	83 c4 10             	add    $0x10,%esp
}
   126c8:	90                   	nop
   126c9:	c9                   	leave  
   126ca:	c3                   	ret    

000126cb <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t *frame)
{
   126cb:	f3 0f 1e fb          	endbr32 
   126cf:	55                   	push   %ebp
   126d0:	89 e5                	mov    %esp,%ebp
   126d2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   126d5:	83 ec 08             	sub    $0x8,%esp
   126d8:	68 d4 47 01 00       	push   $0x147d4
   126dd:	ff 75 08             	pushl  0x8(%ebp)
   126e0:	e8 d2 fe ff ff       	call   125b7 <do_default_handler>
   126e5:	83 c4 10             	add    $0x10,%esp
}
   126e8:	90                   	nop
   126e9:	c9                   	leave  
   126ea:	c3                   	ret    

000126eb <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t *frame)
{
   126eb:	f3 0f 1e fb          	endbr32 
   126ef:	55                   	push   %ebp
   126f0:	89 e5                	mov    %esp,%ebp
   126f2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   126f5:	83 ec 08             	sub    $0x8,%esp
   126f8:	68 e4 47 01 00       	push   $0x147e4
   126fd:	ff 75 08             	pushl  0x8(%ebp)
   12700:	e8 b2 fe ff ff       	call   125b7 <do_default_handler>
   12705:	83 c4 10             	add    $0x10,%esp
}
   12708:	90                   	nop
   12709:	c9                   	leave  
   1270a:	c3                   	ret    

0001270b <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t *frame)
{
   1270b:	f3 0f 1e fb          	endbr32 
   1270f:	55                   	push   %ebp
   12710:	89 e5                	mov    %esp,%ebp
   12712:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   12715:	83 ec 08             	sub    $0x8,%esp
   12718:	68 fa 47 01 00       	push   $0x147fa
   1271d:	ff 75 08             	pushl  0x8(%ebp)
   12720:	e8 92 fe ff ff       	call   125b7 <do_default_handler>
   12725:	83 c4 10             	add    $0x10,%esp
}
   12728:	90                   	nop
   12729:	c9                   	leave  
   1272a:	c3                   	ret    

0001272b <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t *frame)
{
   1272b:	f3 0f 1e fb          	endbr32 
   1272f:	55                   	push   %ebp
   12730:	89 e5                	mov    %esp,%ebp
   12732:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   12735:	83 ec 08             	sub    $0x8,%esp
   12738:	68 08 48 01 00       	push   $0x14808
   1273d:	ff 75 08             	pushl  0x8(%ebp)
   12740:	e8 72 fe ff ff       	call   125b7 <do_default_handler>
   12745:	83 c4 10             	add    $0x10,%esp
}
   12748:	90                   	nop
   12749:	c9                   	leave  
   1274a:	c3                   	ret    

0001274b <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t *frame)
{
   1274b:	f3 0f 1e fb          	endbr32 
   1274f:	55                   	push   %ebp
   12750:	89 e5                	mov    %esp,%ebp
   12752:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   12755:	83 ec 08             	sub    $0x8,%esp
   12758:	68 14 48 01 00       	push   $0x14814
   1275d:	ff 75 08             	pushl  0x8(%ebp)
   12760:	e8 52 fe ff ff       	call   125b7 <do_default_handler>
   12765:	83 c4 10             	add    $0x10,%esp
}
   12768:	90                   	nop
   12769:	c9                   	leave  
   1276a:	c3                   	ret    

0001276b <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   1276b:	f3 0f 1e fb          	endbr32 
   1276f:	55                   	push   %ebp
   12770:	89 e5                	mov    %esp,%ebp
   12772:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   12775:	83 ec 08             	sub    $0x8,%esp
   12778:	68 29 48 01 00       	push   $0x14829
   1277d:	ff 75 08             	pushl  0x8(%ebp)
   12780:	e8 32 fe ff ff       	call   125b7 <do_default_handler>
   12785:	83 c4 10             	add    $0x10,%esp
}
   12788:	90                   	nop
   12789:	c9                   	leave  
   1278a:	c3                   	ret    

0001278b <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   1278b:	f3 0f 1e fb          	endbr32 
   1278f:	55                   	push   %ebp
   12790:	89 e5                	mov    %esp,%ebp
   12792:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12795:	83 ec 0c             	sub    $0xc,%esp
   12798:	68 40 48 01 00       	push   $0x14840
   1279d:	e8 67 18 00 00       	call   14009 <log_printf>
   127a2:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   127a5:	83 ec 0c             	sub    $0xc,%esp
   127a8:	68 64 48 01 00       	push   $0x14864
   127ad:	e8 57 18 00 00       	call   14009 <log_printf>
   127b2:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT)
   127b5:	8b 45 08             	mov    0x8(%ebp),%eax
   127b8:	8b 40 34             	mov    0x34(%eax),%eax
   127bb:	83 e0 01             	and    $0x1,%eax
   127be:	85 c0                	test   %eax,%eax
   127c0:	74 12                	je     127d4 <do_handler_general_protection+0x49>
    {
        log_printf("the exception occurred during delivery of an "
   127c2:	83 ec 0c             	sub    $0xc,%esp
   127c5:	68 90 48 01 00       	push   $0x14890
   127ca:	e8 3a 18 00 00       	call   14009 <log_printf>
   127cf:	83 c4 10             	add    $0x10,%esp
   127d2:	eb 10                	jmp    127e4 <do_handler_general_protection+0x59>
                   "event external to the program, such as an interrupt"
                   "or an earlier exception.");
    }
    else
    {
        log_printf("the exception occurred during delivery of a"
   127d4:	83 ec 0c             	sub    $0xc,%esp
   127d7:	68 0c 49 01 00       	push   $0x1490c
   127dc:	e8 28 18 00 00       	call   14009 <log_printf>
   127e1:	83 c4 10             	add    $0x10,%esp
                   "software interrupt (INT n, INT3, or INTO).");
    }

    if (frame->error_code & ERR_IDT)
   127e4:	8b 45 08             	mov    0x8(%ebp),%eax
   127e7:	8b 40 34             	mov    0x34(%eax),%eax
   127ea:	83 e0 02             	and    $0x2,%eax
   127ed:	85 c0                	test   %eax,%eax
   127ef:	74 12                	je     12803 <do_handler_general_protection+0x78>
    {
        log_printf("the index portion of the error code refers "
   127f1:	83 ec 0c             	sub    $0xc,%esp
   127f4:	68 64 49 01 00       	push   $0x14964
   127f9:	e8 0b 18 00 00       	call   14009 <log_printf>
   127fe:	83 c4 10             	add    $0x10,%esp
   12801:	eb 10                	jmp    12813 <do_handler_general_protection+0x88>
                   "to a gate descriptor in the IDT");
    }
    else
    {
        log_printf("the index refers to a descriptor in the GDT");
   12803:	83 ec 0c             	sub    $0xc,%esp
   12806:	68 b0 49 01 00       	push   $0x149b0
   1280b:	e8 f9 17 00 00       	call   14009 <log_printf>
   12810:	83 c4 10             	add    $0x10,%esp
    }

    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   12813:	8b 45 08             	mov    0x8(%ebp),%eax
   12816:	8b 40 34             	mov    0x34(%eax),%eax
   12819:	25 f8 ff 00 00       	and    $0xfff8,%eax
   1281e:	83 ec 08             	sub    $0x8,%esp
   12821:	50                   	push   %eax
   12822:	68 dc 49 01 00       	push   $0x149dc
   12827:	e8 dd 17 00 00       	call   14009 <log_printf>
   1282c:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   1282f:	83 ec 0c             	sub    $0xc,%esp
   12832:	ff 75 08             	pushl  0x8(%ebp)
   12835:	e8 2f fc ff ff       	call   12469 <dump_core_regs>
   1283a:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   1283d:	e8 05 fc ff ff       	call   12447 <hlt>
   12842:	eb f9                	jmp    1283d <do_handler_general_protection+0xb2>

00012844 <do_handler_page_fault>:
    }
}

void do_handler_page_fault(exception_frame_t *frame)
{
   12844:	f3 0f 1e fb          	endbr32 
   12848:	55                   	push   %ebp
   12849:	89 e5                	mov    %esp,%ebp
   1284b:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1284e:	83 ec 0c             	sub    $0xc,%esp
   12851:	68 40 48 01 00       	push   $0x14840
   12856:	e8 ae 17 00 00       	call   14009 <log_printf>
   1285b:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   1285e:	83 ec 0c             	sub    $0xc,%esp
   12861:	68 f0 49 01 00       	push   $0x149f0
   12866:	e8 9e 17 00 00       	call   14009 <log_printf>
   1286b:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P)
   1286e:	8b 45 08             	mov    0x8(%ebp),%eax
   12871:	8b 40 34             	mov    0x34(%eax),%eax
   12874:	83 e0 01             	and    $0x1,%eax
   12877:	85 c0                	test   %eax,%eax
   12879:	74 18                	je     12893 <do_handler_page_fault+0x4f>
    {
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   1287b:	e8 b6 fb ff ff       	call   12436 <read_cr2>
   12880:	83 ec 08             	sub    $0x8,%esp
   12883:	50                   	push   %eax
   12884:	68 14 4a 01 00       	push   $0x14a14
   12889:	e8 7b 17 00 00       	call   14009 <log_printf>
   1288e:	83 c4 10             	add    $0x10,%esp
   12891:	eb 16                	jmp    128a9 <do_handler_page_fault+0x65>
    }
    else
    {
        log_printf("\tPage doesn't present 0x%x", read_cr2());
   12893:	e8 9e fb ff ff       	call   12436 <read_cr2>
   12898:	83 ec 08             	sub    $0x8,%esp
   1289b:	50                   	push   %eax
   1289c:	68 3c 4a 01 00       	push   $0x14a3c
   128a1:	e8 63 17 00 00       	call   14009 <log_printf>
   128a6:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->error_code & ERR_PAGE_WR)
   128a9:	8b 45 08             	mov    0x8(%ebp),%eax
   128ac:	8b 40 34             	mov    0x34(%eax),%eax
   128af:	83 e0 02             	and    $0x2,%eax
   128b2:	85 c0                	test   %eax,%eax
   128b4:	74 12                	je     128c8 <do_handler_page_fault+0x84>
    {
        log_printf("\tThe access causing the fault was a read.");
   128b6:	83 ec 0c             	sub    $0xc,%esp
   128b9:	68 58 4a 01 00       	push   $0x14a58
   128be:	e8 46 17 00 00       	call   14009 <log_printf>
   128c3:	83 c4 10             	add    $0x10,%esp
   128c6:	eb 10                	jmp    128d8 <do_handler_page_fault+0x94>
    }
    else
    {
        log_printf("\tThe access causing the fault was a write.");
   128c8:	83 ec 0c             	sub    $0xc,%esp
   128cb:	68 84 4a 01 00       	push   $0x14a84
   128d0:	e8 34 17 00 00       	call   14009 <log_printf>
   128d5:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->error_code & ERR_PAGE_US)
   128d8:	8b 45 08             	mov    0x8(%ebp),%eax
   128db:	8b 40 34             	mov    0x34(%eax),%eax
   128de:	83 e0 02             	and    $0x2,%eax
   128e1:	85 c0                	test   %eax,%eax
   128e3:	74 12                	je     128f7 <do_handler_page_fault+0xb3>
    {
        log_printf("\tA supervisor-mode access caused the fault.");
   128e5:	83 ec 0c             	sub    $0xc,%esp
   128e8:	68 b0 4a 01 00       	push   $0x14ab0
   128ed:	e8 17 17 00 00       	call   14009 <log_printf>
   128f2:	83 c4 10             	add    $0x10,%esp
   128f5:	eb 10                	jmp    12907 <do_handler_page_fault+0xc3>
    }
    else
    {
        log_printf("\tA user-mode access caused the fault.");
   128f7:	83 ec 0c             	sub    $0xc,%esp
   128fa:	68 dc 4a 01 00       	push   $0x14adc
   128ff:	e8 05 17 00 00       	call   14009 <log_printf>
   12904:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   12907:	83 ec 0c             	sub    $0xc,%esp
   1290a:	ff 75 08             	pushl  0x8(%ebp)
   1290d:	e8 57 fb ff ff       	call   12469 <dump_core_regs>
   12912:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   12915:	e8 2d fb ff ff       	call   12447 <hlt>
   1291a:	eb f9                	jmp    12915 <do_handler_page_fault+0xd1>

0001291c <do_handler_fpu_error>:
    }
}

void do_handler_fpu_error(exception_frame_t *frame)
{
   1291c:	f3 0f 1e fb          	endbr32 
   12920:	55                   	push   %ebp
   12921:	89 e5                	mov    %esp,%ebp
   12923:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   12926:	83 ec 08             	sub    $0x8,%esp
   12929:	68 02 4b 01 00       	push   $0x14b02
   1292e:	ff 75 08             	pushl  0x8(%ebp)
   12931:	e8 81 fc ff ff       	call   125b7 <do_default_handler>
   12936:	83 c4 10             	add    $0x10,%esp
}
   12939:	90                   	nop
   1293a:	c9                   	leave  
   1293b:	c3                   	ret    

0001293c <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   1293c:	f3 0f 1e fb          	endbr32 
   12940:	55                   	push   %ebp
   12941:	89 e5                	mov    %esp,%ebp
   12943:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   12946:	83 ec 08             	sub    $0x8,%esp
   12949:	68 20 4b 01 00       	push   $0x14b20
   1294e:	ff 75 08             	pushl  0x8(%ebp)
   12951:	e8 61 fc ff ff       	call   125b7 <do_default_handler>
   12956:	83 c4 10             	add    $0x10,%esp
}
   12959:	90                   	nop
   1295a:	c9                   	leave  
   1295b:	c3                   	ret    

0001295c <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   1295c:	f3 0f 1e fb          	endbr32 
   12960:	55                   	push   %ebp
   12961:	89 e5                	mov    %esp,%ebp
   12963:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   12966:	83 ec 08             	sub    $0x8,%esp
   12969:	68 31 4b 01 00       	push   $0x14b31
   1296e:	ff 75 08             	pushl  0x8(%ebp)
   12971:	e8 41 fc ff ff       	call   125b7 <do_default_handler>
   12976:	83 c4 10             	add    $0x10,%esp
}
   12979:	90                   	nop
   1297a:	c9                   	leave  
   1297b:	c3                   	ret    

0001297c <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   1297c:	f3 0f 1e fb          	endbr32 
   12980:	55                   	push   %ebp
   12981:	89 e5                	mov    %esp,%ebp
   12983:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   12986:	83 ec 08             	sub    $0x8,%esp
   12989:	68 40 4b 01 00       	push   $0x14b40
   1298e:	ff 75 08             	pushl  0x8(%ebp)
   12991:	e8 21 fc ff ff       	call   125b7 <do_default_handler>
   12996:	83 c4 10             	add    $0x10,%esp
}
   12999:	90                   	nop
   1299a:	c9                   	leave  
   1299b:	c3                   	ret    

0001299c <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   1299c:	f3 0f 1e fb          	endbr32 
   129a0:	55                   	push   %ebp
   129a1:	89 e5                	mov    %esp,%ebp
   129a3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   129a6:	83 ec 08             	sub    $0x8,%esp
   129a9:	68 5f 4b 01 00       	push   $0x14b5f
   129ae:	ff 75 08             	pushl  0x8(%ebp)
   129b1:	e8 01 fc ff ff       	call   125b7 <do_default_handler>
   129b6:	83 c4 10             	add    $0x10,%esp
}
   129b9:	90                   	nop
   129ba:	c9                   	leave  
   129bb:	c3                   	ret    

000129bc <init_pic>:
/**
 * 初始化中断控制器
 * @return {*}
 */
static void init_pic(void)
{
   129bc:	f3 0f 1e fb          	endbr32 
   129c0:	55                   	push   %ebp
   129c1:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   129c3:	6a 11                	push   $0x11
   129c5:	6a 20                	push   $0x20
   129c7:	e8 21 fa ff ff       	call   123ed <outb>
   129cc:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   129cf:	6a 20                	push   $0x20
   129d1:	6a 21                	push   $0x21
   129d3:	e8 15 fa ff ff       	call   123ed <outb>
   129d8:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   129db:	6a 04                	push   $0x4
   129dd:	6a 21                	push   $0x21
   129df:	e8 09 fa ff ff       	call   123ed <outb>
   129e4:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   129e7:	6a 01                	push   $0x1
   129e9:	6a 21                	push   $0x21
   129eb:	e8 fd f9 ff ff       	call   123ed <outb>
   129f0:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   129f3:	6a 11                	push   $0x11
   129f5:	68 a0 00 00 00       	push   $0xa0
   129fa:	e8 ee f9 ff ff       	call   123ed <outb>
   129ff:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12a02:	6a 28                	push   $0x28
   12a04:	68 a1 00 00 00       	push   $0xa1
   12a09:	e8 df f9 ff ff       	call   123ed <outb>
   12a0e:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   12a11:	6a 02                	push   $0x2
   12a13:	68 a1 00 00 00       	push   $0xa1
   12a18:	e8 d0 f9 ff ff       	call   123ed <outb>
   12a1d:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12a20:	6a 01                	push   $0x1
   12a22:	68 a1 00 00 00       	push   $0xa1
   12a27:	e8 c1 f9 ff ff       	call   123ed <outb>
   12a2c:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12a2f:	68 fb 00 00 00       	push   $0xfb
   12a34:	6a 21                	push   $0x21
   12a36:	e8 b2 f9 ff ff       	call   123ed <outb>
   12a3b:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12a3e:	68 ff 00 00 00       	push   $0xff
   12a43:	68 a1 00 00 00       	push   $0xa1
   12a48:	e8 a0 f9 ff ff       	call   123ed <outb>
   12a4d:	83 c4 08             	add    $0x8,%esp
}
   12a50:	90                   	nop
   12a51:	c9                   	leave  
   12a52:	c3                   	ret    

00012a53 <pic_send_eoi>:
 * 发送一个中断结束信号（EOI）给处理器，告诉处理器中断处理程序已经执行完毕，可以继续执行其他指令了
 * @return {*}
 * @param {int} irq_num
 */
void pic_send_eoi(int irq_num)
{
   12a53:	f3 0f 1e fb          	endbr32 
   12a57:	55                   	push   %ebp
   12a58:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   12a5a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    // 从片也可能需要发送EOI
    if (irq_num >= 8)
   12a5e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12a62:	7e 0f                	jle    12a73 <pic_send_eoi+0x20>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   12a64:	6a 20                	push   $0x20
   12a66:	68 a0 00 00 00       	push   $0xa0
   12a6b:	e8 7d f9 ff ff       	call   123ed <outb>
   12a70:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12a73:	6a 20                	push   $0x20
   12a75:	6a 20                	push   $0x20
   12a77:	e8 71 f9 ff ff       	call   123ed <outb>
   12a7c:	83 c4 08             	add    $0x8,%esp
}
   12a7f:	90                   	nop
   12a80:	c9                   	leave  
   12a81:	c3                   	ret    

00012a82 <irq_init>:

/**
 * @brief 中断和异常初始化，实现中断的管理
 */
void irq_init(void)
{
   12a82:	f3 0f 1e fb          	endbr32 
   12a86:	55                   	push   %ebp
   12a87:	89 e5                	mov    %esp,%ebp
   12a89:	83 ec 18             	sub    $0x18,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++)
   12a8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12a93:	eb 25                	jmp    12aba <irq_init+0x38>
    {
        // 将所有中断和异常的处理程序都设置成了默认处理程序 exception_handler_unknown
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown,
   12a95:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   12a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12a9d:	c1 e0 03             	shl    $0x3,%eax
   12aa0:	05 00 fc 01 00       	add    $0x1fc00,%eax
   12aa5:	68 00 8e 00 00       	push   $0x8e00
   12aaa:	52                   	push   %edx
   12aab:	6a 08                	push   $0x8
   12aad:	50                   	push   %eax
   12aae:	e8 b9 fa ff ff       	call   1256c <gate_desc_set>
   12ab3:	83 c4 10             	add    $0x10,%esp
    for (uint32_t i = 0; i < IDT_TABLE_NR; i++)
   12ab6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12aba:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12abe:	76 d5                	jbe    12a95 <irq_init+0x13>
                      GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
    }
    // 设置异常处理接口
    // exception_handler_divider 是一个汇编语言的函数，它负责处理 #DE 异常（除法错误异常）
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   12ac0:	83 ec 08             	sub    $0x8,%esp
   12ac3:	68 4a 00 01 00       	push   $0x1004a
   12ac8:	6a 00                	push   $0x0
   12aca:	e8 65 01 00 00       	call   12c34 <irq_install>
   12acf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, exception_handler_Debug);
   12ad2:	83 ec 08             	sub    $0x8,%esp
   12ad5:	68 69 00 01 00       	push   $0x10069
   12ada:	6a 01                	push   $0x1
   12adc:	e8 53 01 00 00       	call   12c34 <irq_install>
   12ae1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, exception_handler_NMI);
   12ae4:	83 ec 08             	sub    $0x8,%esp
   12ae7:	68 88 00 01 00       	push   $0x10088
   12aec:	6a 02                	push   $0x2
   12aee:	e8 41 01 00 00       	call   12c34 <irq_install>
   12af3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, exception_handler_breakpoint);
   12af6:	83 ec 08             	sub    $0x8,%esp
   12af9:	68 a7 00 01 00       	push   $0x100a7
   12afe:	6a 03                	push   $0x3
   12b00:	e8 2f 01 00 00       	call   12c34 <irq_install>
   12b05:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, exception_handler_overflow);
   12b08:	83 ec 08             	sub    $0x8,%esp
   12b0b:	68 c6 00 01 00       	push   $0x100c6
   12b10:	6a 04                	push   $0x4
   12b12:	e8 1d 01 00 00       	call   12c34 <irq_install>
   12b17:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, exception_handler_bound_range);
   12b1a:	83 ec 08             	sub    $0x8,%esp
   12b1d:	68 e5 00 01 00       	push   $0x100e5
   12b22:	6a 05                	push   $0x5
   12b24:	e8 0b 01 00 00       	call   12c34 <irq_install>
   12b29:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   12b2c:	83 ec 08             	sub    $0x8,%esp
   12b2f:	68 04 01 01 00       	push   $0x10104
   12b34:	6a 06                	push   $0x6
   12b36:	e8 f9 00 00 00       	call   12c34 <irq_install>
   12b3b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, exception_handler_device_unavailable);
   12b3e:	83 ec 08             	sub    $0x8,%esp
   12b41:	68 23 01 01 00       	push   $0x10123
   12b46:	6a 07                	push   $0x7
   12b48:	e8 e7 00 00 00       	call   12c34 <irq_install>
   12b4d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, exception_handler_double_fault);
   12b50:	83 ec 08             	sub    $0x8,%esp
   12b53:	68 42 01 01 00       	push   $0x10142
   12b58:	6a 08                	push   $0x8
   12b5a:	e8 d5 00 00 00       	call   12c34 <irq_install>
   12b5f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, exception_handler_invalid_tss);
   12b62:	83 ec 08             	sub    $0x8,%esp
   12b65:	68 5f 01 01 00       	push   $0x1015f
   12b6a:	6a 0a                	push   $0xa
   12b6c:	e8 c3 00 00 00       	call   12c34 <irq_install>
   12b71:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, exception_handler_segment_not_present);
   12b74:	83 ec 08             	sub    $0x8,%esp
   12b77:	68 7c 01 01 00       	push   $0x1017c
   12b7c:	6a 0b                	push   $0xb
   12b7e:	e8 b1 00 00 00       	call   12c34 <irq_install>
   12b83:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   12b86:	83 ec 08             	sub    $0x8,%esp
   12b89:	68 99 01 01 00       	push   $0x10199
   12b8e:	6a 0c                	push   $0xc
   12b90:	e8 9f 00 00 00       	call   12c34 <irq_install>
   12b95:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, exception_handler_general_protection);
   12b98:	83 ec 08             	sub    $0x8,%esp
   12b9b:	68 b6 01 01 00       	push   $0x101b6
   12ba0:	6a 0d                	push   $0xd
   12ba2:	e8 8d 00 00 00       	call   12c34 <irq_install>
   12ba7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, exception_handler_page_fault);
   12baa:	83 ec 08             	sub    $0x8,%esp
   12bad:	68 d3 01 01 00       	push   $0x101d3
   12bb2:	6a 0e                	push   $0xe
   12bb4:	e8 7b 00 00 00       	call   12c34 <irq_install>
   12bb9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, exception_handler_fpu_error);
   12bbc:	83 ec 08             	sub    $0x8,%esp
   12bbf:	68 f0 01 01 00       	push   $0x101f0
   12bc4:	6a 10                	push   $0x10
   12bc6:	e8 69 00 00 00       	call   12c34 <irq_install>
   12bcb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, exception_handler_alignment_check);
   12bce:	83 ec 08             	sub    $0x8,%esp
   12bd1:	68 0f 02 01 00       	push   $0x1020f
   12bd6:	6a 11                	push   $0x11
   12bd8:	e8 57 00 00 00       	call   12c34 <irq_install>
   12bdd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, exception_handler_machine_check);
   12be0:	83 ec 08             	sub    $0x8,%esp
   12be3:	68 2c 02 01 00       	push   $0x1022c
   12be8:	6a 12                	push   $0x12
   12bea:	e8 45 00 00 00       	call   12c34 <irq_install>
   12bef:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, exception_handler_smd_exception);
   12bf2:	83 ec 08             	sub    $0x8,%esp
   12bf5:	68 4b 02 01 00       	push   $0x1024b
   12bfa:	6a 13                	push   $0x13
   12bfc:	e8 33 00 00 00       	call   12c34 <irq_install>
   12c01:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, exception_handler_virtual_exception);
   12c04:	83 ec 08             	sub    $0x8,%esp
   12c07:	68 6a 02 01 00       	push   $0x1026a
   12c0c:	6a 14                	push   $0x14
   12c0e:	e8 21 00 00 00       	call   12c34 <irq_install>
   12c13:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   12c16:	b8 00 fc 01 00       	mov    $0x1fc00,%eax
   12c1b:	83 ec 08             	sub    $0x8,%esp
   12c1e:	68 00 04 00 00       	push   $0x400
   12c23:	50                   	push   %eax
   12c24:	e8 e5 f7 ff ff       	call   1240e <lidt>
   12c29:	83 c4 10             	add    $0x10,%esp
    // 初始化pic 控制器
    init_pic();
   12c2c:	e8 8b fd ff ff       	call   129bc <init_pic>
}
   12c31:	90                   	nop
   12c32:	c9                   	leave  
   12c33:	c3                   	ret    

00012c34 <irq_install>:
/**
 * @brief 安装中断或异常处理程序
 */
int irq_install(int irq_num, irq_handler_t handler)
{
   12c34:	f3 0f 1e fb          	endbr32 
   12c38:	55                   	push   %ebp
   12c39:	89 e5                	mov    %esp,%ebp
    if (irq_num >= IDT_TABLE_NR)
   12c3b:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12c3f:	7e 07                	jle    12c48 <irq_install+0x14>
    {
        return -1;
   12c41:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12c46:	eb 25                	jmp    12c6d <irq_install+0x39>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler,
   12c48:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c4b:	8b 55 08             	mov    0x8(%ebp),%edx
   12c4e:	c1 e2 03             	shl    $0x3,%edx
   12c51:	81 c2 00 fc 01 00    	add    $0x1fc00,%edx
   12c57:	68 00 8e 00 00       	push   $0x8e00
   12c5c:	50                   	push   %eax
   12c5d:	6a 08                	push   $0x8
   12c5f:	52                   	push   %edx
   12c60:	e8 07 f9 ff ff       	call   1256c <gate_desc_set>
   12c65:	83 c4 10             	add    $0x10,%esp
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
    return 0;
   12c68:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12c6d:	c9                   	leave  
   12c6e:	c3                   	ret    

00012c6f <irq_enable>:

// 打开8259特定中断
void irq_enable(int irq_num)
{
   12c6f:	f3 0f 1e fb          	endbr32 
   12c73:	55                   	push   %ebp
   12c74:	89 e5                	mov    %esp,%ebp
   12c76:	53                   	push   %ebx
   12c77:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   12c7a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12c7e:	7e 78                	jle    12cf8 <irq_enable+0x89>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   12c80:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   12c84:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12c88:	7f 32                	jg     12cbc <irq_enable+0x4d>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12c8a:	6a 21                	push   $0x21
   12c8c:	e8 3f f7 ff ff       	call   123d0 <inb>
   12c91:	83 c4 04             	add    $0x4,%esp
   12c94:	89 c2                	mov    %eax,%edx
   12c96:	8b 45 08             	mov    0x8(%ebp),%eax
   12c99:	bb 01 00 00 00       	mov    $0x1,%ebx
   12c9e:	89 c1                	mov    %eax,%ecx
   12ca0:	d3 e3                	shl    %cl,%ebx
   12ca2:	89 d8                	mov    %ebx,%eax
   12ca4:	f7 d0                	not    %eax
   12ca6:	21 d0                	and    %edx,%eax
   12ca8:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   12cab:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12caf:	50                   	push   %eax
   12cb0:	6a 21                	push   $0x21
   12cb2:	e8 36 f7 ff ff       	call   123ed <outb>
   12cb7:	83 c4 08             	add    $0x8,%esp
   12cba:	eb 3d                	jmp    12cf9 <irq_enable+0x8a>
    }
    else
    {
        irq_num -= 8;
   12cbc:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   12cc0:	68 a1 00 00 00       	push   $0xa1
   12cc5:	e8 06 f7 ff ff       	call   123d0 <inb>
   12cca:	83 c4 04             	add    $0x4,%esp
   12ccd:	89 c2                	mov    %eax,%edx
   12ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   12cd2:	bb 01 00 00 00       	mov    $0x1,%ebx
   12cd7:	89 c1                	mov    %eax,%ecx
   12cd9:	d3 e3                	shl    %cl,%ebx
   12cdb:	89 d8                	mov    %ebx,%eax
   12cdd:	f7 d0                	not    %eax
   12cdf:	21 d0                	and    %edx,%eax
   12ce1:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   12ce4:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12ce8:	50                   	push   %eax
   12ce9:	68 a1 00 00 00       	push   $0xa1
   12cee:	e8 fa f6 ff ff       	call   123ed <outb>
   12cf3:	83 c4 08             	add    $0x8,%esp
   12cf6:	eb 01                	jmp    12cf9 <irq_enable+0x8a>
        return;
   12cf8:	90                   	nop
    }
}
   12cf9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12cfc:	c9                   	leave  
   12cfd:	c3                   	ret    

00012cfe <irq_disable>:
// 关闭8259特定中断
void irq_disable(int irq_num)
{
   12cfe:	f3 0f 1e fb          	endbr32 
   12d02:	55                   	push   %ebp
   12d03:	89 e5                	mov    %esp,%ebp
   12d05:	53                   	push   %ebx
   12d06:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   12d09:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12d0d:	7e 74                	jle    12d83 <irq_disable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   12d0f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   12d13:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12d17:	7f 30                	jg     12d49 <irq_disable+0x4b>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   12d19:	6a 21                	push   $0x21
   12d1b:	e8 b0 f6 ff ff       	call   123d0 <inb>
   12d20:	83 c4 04             	add    $0x4,%esp
   12d23:	89 c3                	mov    %eax,%ebx
   12d25:	8b 45 08             	mov    0x8(%ebp),%eax
   12d28:	ba 01 00 00 00       	mov    $0x1,%edx
   12d2d:	89 c1                	mov    %eax,%ecx
   12d2f:	d3 e2                	shl    %cl,%edx
   12d31:	89 d0                	mov    %edx,%eax
   12d33:	09 d8                	or     %ebx,%eax
   12d35:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   12d38:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12d3c:	50                   	push   %eax
   12d3d:	6a 21                	push   $0x21
   12d3f:	e8 a9 f6 ff ff       	call   123ed <outb>
   12d44:	83 c4 08             	add    $0x8,%esp
   12d47:	eb 3b                	jmp    12d84 <irq_disable+0x86>
    }
    else
    {
        irq_num -= 8;
   12d49:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   12d4d:	68 a1 00 00 00       	push   $0xa1
   12d52:	e8 79 f6 ff ff       	call   123d0 <inb>
   12d57:	83 c4 04             	add    $0x4,%esp
   12d5a:	89 c3                	mov    %eax,%ebx
   12d5c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d5f:	ba 01 00 00 00       	mov    $0x1,%edx
   12d64:	89 c1                	mov    %eax,%ecx
   12d66:	d3 e2                	shl    %cl,%edx
   12d68:	89 d0                	mov    %edx,%eax
   12d6a:	09 d8                	or     %ebx,%eax
   12d6c:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   12d6f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12d73:	50                   	push   %eax
   12d74:	68 a1 00 00 00       	push   $0xa1
   12d79:	e8 6f f6 ff ff       	call   123ed <outb>
   12d7e:	83 c4 08             	add    $0x8,%esp
   12d81:	eb 01                	jmp    12d84 <irq_disable+0x86>
        return;
   12d83:	90                   	nop
    }
}
   12d84:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12d87:	c9                   	leave  
   12d88:	c3                   	ret    

00012d89 <irq_disable_global>:
// 关闭全局中断
void irq_disable_global(void)
{
   12d89:	f3 0f 1e fb          	endbr32 
   12d8d:	55                   	push   %ebp
   12d8e:	89 e5                	mov    %esp,%ebp
    cli();
   12d90:	e8 2d f6 ff ff       	call   123c2 <cli>
}
   12d95:	90                   	nop
   12d96:	5d                   	pop    %ebp
   12d97:	c3                   	ret    

00012d98 <irq_enable_global>:
// 开启全局中断
void irq_enable_global(void)
{
   12d98:	f3 0f 1e fb          	endbr32 
   12d9c:	55                   	push   %ebp
   12d9d:	89 e5                	mov    %esp,%ebp
    sti();
   12d9f:	e8 25 f6 ff ff       	call   123c9 <sti>
}
   12da4:	90                   	nop
   12da5:	5d                   	pop    %ebp
   12da6:	c3                   	ret    

00012da7 <irq_enter_protection>:
// 进入临界区保护状态
irq_state_t irq_enter_protection()
{
   12da7:	f3 0f 1e fb          	endbr32 
   12dab:	55                   	push   %ebp
   12dac:	89 e5                	mov    %esp,%ebp
   12dae:	83 ec 10             	sub    $0x10,%esp
    // 中断的开关状态可以通过读取 EFLAGS 寄存器的标志位获取
    irq_state_t state = read_eflags();
   12db1:	e8 98 f6 ff ff       	call   1244e <read_eflags>
   12db6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    // 关中断
    irq_disable_global();
   12db9:	e8 cb ff ff ff       	call   12d89 <irq_disable_global>
    return state;
   12dbe:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12dc1:	c9                   	leave  
   12dc2:	c3                   	ret    

00012dc3 <irq_leave_protection>:
// 退出临界区保护状态 传入进入临界区之前的中断状态，退出临界区仍未该状态
void irq_leave_protection(irq_state_t state)
{
   12dc3:	f3 0f 1e fb          	endbr32 
   12dc7:	55                   	push   %ebp
   12dc8:	89 e5                	mov    %esp,%ebp
    // 将中断的状态写到 EFLAGS 寄存器中
    write_eflags(state);
   12dca:	ff 75 08             	pushl  0x8(%ebp)
   12dcd:	e8 8c f6 ff ff       	call   1245e <write_eflags>
   12dd2:	83 c4 04             	add    $0x4,%esp
}
   12dd5:	90                   	nop
   12dd6:	c9                   	leave  
   12dd7:	c3                   	ret    

00012dd8 <outb>:
{
   12dd8:	55                   	push   %ebp
   12dd9:	89 e5                	mov    %esp,%ebp
   12ddb:	83 ec 08             	sub    $0x8,%esp
   12dde:	8b 45 08             	mov    0x8(%ebp),%eax
   12de1:	8b 55 0c             	mov    0xc(%ebp),%edx
   12de4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12de8:	89 d0                	mov    %edx,%eax
   12dea:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   12ded:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12df1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12df5:	ee                   	out    %al,(%dx)
}
   12df6:	90                   	nop
   12df7:	c9                   	leave  
   12df8:	c3                   	ret    

00012df9 <do_handler_timer>:
static uint32_t sys_tick;						// 系统启动后的tick数量

/**
 * 定时器中断处理函数
 */
void do_handler_timer (exception_frame_t *frame) {
   12df9:	f3 0f 1e fb          	endbr32 
   12dfd:	55                   	push   %ebp
   12dfe:	89 e5                	mov    %esp,%ebp
   12e00:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   12e03:	a1 00 00 02 00       	mov    0x20000,%eax
   12e08:	83 c0 01             	add    $0x1,%eax
   12e0b:	a3 00 00 02 00       	mov    %eax,0x20000

    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   12e10:	83 ec 0c             	sub    $0xc,%esp
   12e13:	6a 20                	push   $0x20
   12e15:	e8 39 fc ff ff       	call   12a53 <pic_send_eoi>
   12e1a:	83 c4 10             	add    $0x10,%esp
    // 使用定时器来切换任务
    task_time_tick();
   12e1d:	e8 d3 e8 ff ff       	call   116f5 <task_time_tick>
}
   12e22:	90                   	nop
   12e23:	c9                   	leave  
   12e24:	c3                   	ret    

00012e25 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   12e25:	f3 0f 1e fb          	endbr32 
   12e29:	55                   	push   %ebp
   12e2a:	89 e5                	mov    %esp,%ebp
   12e2c:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);   // 多久产生一次时钟
   12e2f:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 2023-3-18 写错了，应该是模式3或者模式2
    //outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE0);
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   12e36:	6a 36                	push   $0x36
   12e38:	6a 43                	push   $0x43
   12e3a:	e8 99 ff ff ff       	call   12dd8 <outb>
   12e3f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);   // 加载低8位
   12e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e45:	0f b6 c0             	movzbl %al,%eax
   12e48:	50                   	push   %eax
   12e49:	6a 40                	push   $0x40
   12e4b:	e8 88 ff ff ff       	call   12dd8 <outb>
   12e50:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   12e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e56:	c1 e8 08             	shr    $0x8,%eax
   12e59:	0f b6 c0             	movzbl %al,%eax
   12e5c:	50                   	push   %eax
   12e5d:	6a 40                	push   $0x40
   12e5f:	e8 74 ff ff ff       	call   12dd8 <outb>
   12e64:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   12e67:	83 ec 08             	sub    $0x8,%esp
   12e6a:	68 89 02 01 00       	push   $0x10289
   12e6f:	6a 20                	push   $0x20
   12e71:	e8 be fd ff ff       	call   12c34 <irq_install>
   12e76:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   12e79:	83 ec 0c             	sub    $0xc,%esp
   12e7c:	6a 20                	push   $0x20
   12e7e:	e8 ec fd ff ff       	call   12c6f <irq_enable>
   12e83:	83 c4 10             	add    $0x10,%esp
}
   12e86:	90                   	nop
   12e87:	c9                   	leave  
   12e88:	c3                   	ret    

00012e89 <time_init>:

/**
 * 定时器初始化
 */
void time_init (void) {
   12e89:	f3 0f 1e fb          	endbr32 
   12e8d:	55                   	push   %ebp
   12e8e:	89 e5                	mov    %esp,%ebp
   12e90:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   12e93:	c7 05 00 00 02 00 00 	movl   $0x0,0x20000
   12e9a:	00 00 00 

    init_pit();
   12e9d:	e8 83 ff ff ff       	call   12e25 <init_pit>
}
   12ea2:	90                   	nop
   12ea3:	c9                   	leave  
   12ea4:	c3                   	ret    

00012ea5 <inb>:
{
   12ea5:	55                   	push   %ebp
   12ea6:	89 e5                	mov    %esp,%ebp
   12ea8:	83 ec 14             	sub    $0x14,%esp
   12eab:	8b 45 08             	mov    0x8(%ebp),%eax
   12eae:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]"
   12eb2:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12eb6:	89 c2                	mov    %eax,%edx
   12eb8:	ec                   	in     (%dx),%al
   12eb9:	88 45 ff             	mov    %al,-0x1(%ebp)
    return res;
   12ebc:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12ec0:	c9                   	leave  
   12ec1:	c3                   	ret    

00012ec2 <inw>:
{
   12ec2:	55                   	push   %ebp
   12ec3:	89 e5                	mov    %esp,%ebp
   12ec5:	83 ec 14             	sub    $0x14,%esp
   12ec8:	8b 45 08             	mov    0x8(%ebp),%eax
   12ecb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("in %[p], %[v]"
   12ecf:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12ed3:	89 c2                	mov    %eax,%edx
   12ed5:	66 ed                	in     (%dx),%ax
   12ed7:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    return res;
   12edb:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   12edf:	c9                   	leave  
   12ee0:	c3                   	ret    

00012ee1 <outb>:
{
   12ee1:	55                   	push   %ebp
   12ee2:	89 e5                	mov    %esp,%ebp
   12ee4:	83 ec 08             	sub    $0x8,%esp
   12ee7:	8b 45 08             	mov    0x8(%ebp),%eax
   12eea:	8b 55 0c             	mov    0xc(%ebp),%edx
   12eed:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12ef1:	89 d0                	mov    %edx,%eax
   12ef3:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   12ef6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12efa:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12efe:	ee                   	out    %al,(%dx)
}
   12eff:	90                   	nop
   12f00:	c9                   	leave  
   12f01:	c3                   	ret    

00012f02 <read_disk>:
 * @param {int} sector_count 需要读取的扇区数量，表示从硬盘上读取的数据的大小。
 * @param {uint8_t} *buf 存储读取到的数据的缓冲区，以字节数组(uint8_t *)的形式传递。
 * @return {*}
 */
static void read_disk(int sector, int sector_count, uint8_t *buf)
{
   12f02:	f3 0f 1e fb          	endbr32 
   12f06:	55                   	push   %ebp
   12f07:	89 e5                	mov    %esp,%ebp
   12f09:	53                   	push   %ebx
   12f0a:	83 ec 10             	sub    $0x10,%esp
    outb(0x1F6, (uint8_t)(0xE0));
   12f0d:	68 e0 00 00 00       	push   $0xe0
   12f12:	68 f6 01 00 00       	push   $0x1f6
   12f17:	e8 c5 ff ff ff       	call   12ee1 <outb>
   12f1c:	83 c4 08             	add    $0x8,%esp

    outb(0x1F2, (uint8_t)(sector_count >> 8));
   12f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f22:	c1 f8 08             	sar    $0x8,%eax
   12f25:	0f b6 c0             	movzbl %al,%eax
   12f28:	50                   	push   %eax
   12f29:	68 f2 01 00 00       	push   $0x1f2
   12f2e:	e8 ae ff ff ff       	call   12ee1 <outb>
   12f33:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector >> 24)); // LBA参数的24~31位
   12f36:	8b 45 08             	mov    0x8(%ebp),%eax
   12f39:	c1 f8 18             	sar    $0x18,%eax
   12f3c:	0f b6 c0             	movzbl %al,%eax
   12f3f:	50                   	push   %eax
   12f40:	68 f3 01 00 00       	push   $0x1f3
   12f45:	e8 97 ff ff ff       	call   12ee1 <outb>
   12f4a:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(0));            // LBA参数的32~39位
   12f4d:	6a 00                	push   $0x0
   12f4f:	68 f4 01 00 00       	push   $0x1f4
   12f54:	e8 88 ff ff ff       	call   12ee1 <outb>
   12f59:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(0));            // LBA参数的40~47位
   12f5c:	6a 00                	push   $0x0
   12f5e:	68 f5 01 00 00       	push   $0x1f5
   12f63:	e8 79 ff ff ff       	call   12ee1 <outb>
   12f68:	83 c4 08             	add    $0x8,%esp

    outb(0x1F2, (uint8_t)(sector_count));
   12f6b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f6e:	0f b6 c0             	movzbl %al,%eax
   12f71:	50                   	push   %eax
   12f72:	68 f2 01 00 00       	push   $0x1f2
   12f77:	e8 65 ff ff ff       	call   12ee1 <outb>
   12f7c:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector));       // LBA参数的0~7位
   12f7f:	8b 45 08             	mov    0x8(%ebp),%eax
   12f82:	0f b6 c0             	movzbl %al,%eax
   12f85:	50                   	push   %eax
   12f86:	68 f3 01 00 00       	push   $0x1f3
   12f8b:	e8 51 ff ff ff       	call   12ee1 <outb>
   12f90:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));  // LBA参数的8~15位
   12f93:	8b 45 08             	mov    0x8(%ebp),%eax
   12f96:	c1 f8 08             	sar    $0x8,%eax
   12f99:	0f b6 c0             	movzbl %al,%eax
   12f9c:	50                   	push   %eax
   12f9d:	68 f4 01 00 00       	push   $0x1f4
   12fa2:	e8 3a ff ff ff       	call   12ee1 <outb>
   12fa7:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16)); // LBA参数的16~23位
   12faa:	8b 45 08             	mov    0x8(%ebp),%eax
   12fad:	c1 f8 10             	sar    $0x10,%eax
   12fb0:	0f b6 c0             	movzbl %al,%eax
   12fb3:	50                   	push   %eax
   12fb4:	68 f5 01 00 00       	push   $0x1f5
   12fb9:	e8 23 ff ff ff       	call   12ee1 <outb>
   12fbe:	83 c4 08             	add    $0x8,%esp

    outb(0x1F7, (uint8_t)0x24);
   12fc1:	6a 24                	push   $0x24
   12fc3:	68 f7 01 00 00       	push   $0x1f7
   12fc8:	e8 14 ff ff ff       	call   12ee1 <outb>
   12fcd:	83 c4 08             	add    $0x8,%esp

    // 读取数据
    uint16_t *data_buf = (uint16_t *)buf;
   12fd0:	8b 45 10             	mov    0x10(%ebp),%eax
   12fd3:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count-- > 0)
   12fd6:	eb 4a                	jmp    13022 <read_disk+0x120>
    {
        // 每次扇区读之前都要检查，等待数据就绪
        while ((inb(0x1F7) & 0x88) != 0x8)
   12fd8:	90                   	nop
   12fd9:	68 f7 01 00 00       	push   $0x1f7
   12fde:	e8 c2 fe ff ff       	call   12ea5 <inb>
   12fe3:	83 c4 04             	add    $0x4,%esp
   12fe6:	0f b6 c0             	movzbl %al,%eax
   12fe9:	25 88 00 00 00       	and    $0x88,%eax
   12fee:	83 f8 08             	cmp    $0x8,%eax
   12ff1:	75 e6                	jne    12fd9 <read_disk+0xd7>
        {
        }

        // 读取并将数据写入到缓存中
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   12ff3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12ffa:	eb 1d                	jmp    13019 <read_disk+0x117>
        {
            *data_buf++ = inw(0x1F0);
   12ffc:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   12fff:	8d 43 02             	lea    0x2(%ebx),%eax
   13002:	89 45 f8             	mov    %eax,-0x8(%ebp)
   13005:	68 f0 01 00 00       	push   $0x1f0
   1300a:	e8 b3 fe ff ff       	call   12ec2 <inw>
   1300f:	83 c4 04             	add    $0x4,%esp
   13012:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   13015:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13019:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   13020:	7e da                	jle    12ffc <read_disk+0xfa>
    while (sector_count-- > 0)
   13022:	8b 45 0c             	mov    0xc(%ebp),%eax
   13025:	8d 50 ff             	lea    -0x1(%eax),%edx
   13028:	89 55 0c             	mov    %edx,0xc(%ebp)
   1302b:	85 c0                	test   %eax,%eax
   1302d:	7f a9                	jg     12fd8 <read_disk+0xd6>
        }
    }
}
   1302f:	90                   	nop
   13030:	90                   	nop
   13031:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13034:	c9                   	leave  
   13035:	c3                   	ret    

00013036 <sys_open>:

/**
 * 打开文件
 */
int sys_open(const char *name, int flags, ...)
{
   13036:	f3 0f 1e fb          	endbr32 
   1303a:	55                   	push   %ebp
   1303b:	89 e5                	mov    %esp,%ebp
    if (name[0] == '/')
   1303d:	8b 45 08             	mov    0x8(%ebp),%eax
   13040:	0f b6 00             	movzbl (%eax),%eax
   13043:	3c 2f                	cmp    $0x2f,%al
   13045:	75 25                	jne    1306c <sys_open+0x36>
    {
        // 暂时直接从扇区1000上读取, 读取大概40KB，足够了
        read_disk(5000, 80, (uint8_t *)TEMP_ADDR);
   13047:	68 00 00 80 00       	push   $0x800000
   1304c:	6a 50                	push   $0x50
   1304e:	68 88 13 00 00       	push   $0x1388
   13053:	e8 aa fe ff ff       	call   12f02 <read_disk>
   13058:	83 c4 0c             	add    $0xc,%esp
        temp_pos = (uint8_t *)TEMP_ADDR;
   1305b:	c7 05 04 00 02 00 00 	movl   $0x800000,0x20004
   13062:	00 80 00 
        return TEMP_FILE_ID;
   13065:	b8 64 00 00 00       	mov    $0x64,%eax
   1306a:	eb 05                	jmp    13071 <sys_open+0x3b>
    }

    return -1;
   1306c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13071:	c9                   	leave  
   13072:	c3                   	ret    

00013073 <sys_read>:

/**
 * 读取文件api
 */
int sys_read(int file, char *ptr, int len)
{
   13073:	f3 0f 1e fb          	endbr32 
   13077:	55                   	push   %ebp
   13078:	89 e5                	mov    %esp,%ebp
   1307a:	83 ec 08             	sub    $0x8,%esp
    if (file == TEMP_FILE_ID)
   1307d:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   13081:	75 2c                	jne    130af <sys_read+0x3c>
    {
        kernel_memcpy(ptr, temp_pos, len);
   13083:	a1 04 00 02 00       	mov    0x20004,%eax
   13088:	83 ec 04             	sub    $0x4,%esp
   1308b:	ff 75 10             	pushl  0x10(%ebp)
   1308e:	50                   	push   %eax
   1308f:	ff 75 0c             	pushl  0xc(%ebp)
   13092:	e8 45 08 00 00       	call   138dc <kernel_memcpy>
   13097:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   1309a:	8b 15 04 00 02 00    	mov    0x20004,%edx
   130a0:	8b 45 10             	mov    0x10(%ebp),%eax
   130a3:	01 d0                	add    %edx,%eax
   130a5:	a3 04 00 02 00       	mov    %eax,0x20004
        return len;
   130aa:	8b 45 10             	mov    0x10(%ebp),%eax
   130ad:	eb 05                	jmp    130b4 <sys_read+0x41>
    }
    return -1;
   130af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   130b4:	c9                   	leave  
   130b5:	c3                   	ret    

000130b6 <sys_write>:
 * @param {char} *ptr   写入的数据的指针
 * @param {int} len 写入的字节数
 * @return {*}
 */
int sys_write(int file, char *ptr, int len)
{
   130b6:	f3 0f 1e fb          	endbr32 
   130ba:	55                   	push   %ebp
   130bb:	89 e5                	mov    %esp,%ebp
   130bd:	83 ec 08             	sub    $0x8,%esp
    ptr[len] = '\0';
   130c0:	8b 55 10             	mov    0x10(%ebp),%edx
   130c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   130c6:	01 d0                	add    %edx,%eax
   130c8:	c6 00 00             	movb   $0x0,(%eax)
    log_printf("%s", ptr);
   130cb:	83 ec 08             	sub    $0x8,%esp
   130ce:	ff 75 0c             	pushl  0xc(%ebp)
   130d1:	68 79 4b 01 00       	push   $0x14b79
   130d6:	e8 2e 0f 00 00       	call   14009 <log_printf>
   130db:	83 c4 10             	add    $0x10,%esp
    return len;
   130de:	8b 45 10             	mov    0x10(%ebp),%eax
}
   130e1:	c9                   	leave  
   130e2:	c3                   	ret    

000130e3 <sys_lseek>:

/**
 * 文件访问位置定位
 */
int sys_lseek(int file, int ptr, int dir)
{
   130e3:	f3 0f 1e fb          	endbr32 
   130e7:	55                   	push   %ebp
   130e8:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID)
   130ea:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   130ee:	75 14                	jne    13104 <sys_lseek+0x21>
    {
        temp_pos = (uint8_t *)(ptr + TEMP_ADDR);
   130f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   130f3:	05 00 00 80 00       	add    $0x800000,%eax
   130f8:	a3 04 00 02 00       	mov    %eax,0x20004
        return 0;
   130fd:	b8 00 00 00 00       	mov    $0x0,%eax
   13102:	eb 05                	jmp    13109 <sys_lseek+0x26>
    }
    return -1;
   13104:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13109:	5d                   	pop    %ebp
   1310a:	c3                   	ret    

0001310b <sys_close>:

/**
 * 关闭文件
 */
int sys_close(int file)
{
   1310b:	f3 0f 1e fb          	endbr32 
   1310f:	55                   	push   %ebp
   13110:	89 e5                	mov    %esp,%ebp
    
}
   13112:	90                   	nop
   13113:	5d                   	pop    %ebp
   13114:	c3                   	ret    

00013115 <sys_isatty>:

/**
 * 判断文件描述符与tty关联
 */
int sys_isatty(int file) {
   13115:	f3 0f 1e fb          	endbr32 
   13119:	55                   	push   %ebp
   1311a:	89 e5                	mov    %esp,%ebp
	return -1;
   1311c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13121:	5d                   	pop    %ebp
   13122:	c3                   	ret    

00013123 <sys_fstat>:

/**
 * @brief 获取文件状态
 */
int sys_fstat(int file, struct stat *st) {
   13123:	f3 0f 1e fb          	endbr32 
   13127:	55                   	push   %ebp
   13128:	89 e5                	mov    %esp,%ebp
    return -1;
   1312a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1312f:	5d                   	pop    %ebp
   13130:	c3                   	ret    

00013131 <kernel_init>:
static boot_info_t *init_boot_info; // 启动信息
/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   13131:	f3 0f 1e fb          	endbr32 
   13135:	55                   	push   %ebp
   13136:	89 e5                	mov    %esp,%ebp
   13138:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   1313b:	8b 45 08             	mov    0x8(%ebp),%eax
   1313e:	a3 08 00 02 00       	mov    %eax,0x20008
    // 初始化CPU，再重新加载
    cpu_init();
   13143:	e8 58 f2 ff ff       	call   123a0 <cpu_init>
    // 初始化日志
    log_init();
   13148:	e8 43 0e 00 00       	call   13f90 <log_init>
    memory_init(boot_info);
   1314d:	83 ec 0c             	sub    $0xc,%esp
   13150:	ff 75 08             	pushl  0x8(%ebp)
   13153:	e8 c6 db ff ff       	call   10d1e <memory_init>
   13158:	83 c4 10             	add    $0x10,%esp
    irq_init();
   1315b:	e8 22 f9 ff ff       	call   12a82 <irq_init>
    time_init();
   13160:	e8 24 fd ff ff       	call   12e89 <time_init>
    task_manager_init();
   13165:	e8 27 e2 ff ff       	call   11391 <task_manager_init>
}
   1316a:	90                   	nop
   1316b:	c9                   	leave  
   1316c:	c3                   	ret    

0001316d <move_to_first_task>:
/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void)
{
   1316d:	f3 0f 1e fb          	endbr32 
   13171:	55                   	push   %ebp
   13172:	89 e5                	mov    %esp,%ebp
   13174:	56                   	push   %esi
   13175:	53                   	push   %ebx
   13176:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t *curr = task_current();
   13179:	e8 70 e4 ff ff       	call   115ee <task_current>
   1317e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   13181:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13185:	75 19                	jne    131a0 <move_to_first_task+0x33>
   13187:	68 7c 4b 01 00       	push   $0x14b7c
   1318c:	68 f8 4b 01 00       	push   $0x14bf8
   13191:	6a 2e                	push   $0x2e
   13193:	68 88 4b 01 00       	push   $0x14b88
   13198:	e8 6f 0b 00 00       	call   13d0c <panic>
   1319d:	83 c4 10             	add    $0x10,%esp

    tss_t *tss = &(curr->tss);
   131a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   131a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"     // SS
        "push %[esp]\n\t"    // ESP
        "push %[eflags]\n\t" // EFLAGS
        "push %[cs]\n\t"     // CS
        "push %[eip]\n\t"    // ip
        "iret\n\t" ::[ss] "r"(tss->ss),
   131a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   131a9:	8b 40 50             	mov    0x50(%eax),%eax
        [esp] "r"(tss->esp), [eflags] "r"(tss->eflags),
   131ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
   131af:	8b 52 38             	mov    0x38(%edx),%edx
   131b2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   131b5:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs] "r"(tss->cs), [eip] "r"(tss->eip));
   131b8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   131bb:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   131be:	8b 75 f0             	mov    -0x10(%ebp),%esi
   131c1:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   131c4:	50                   	push   %eax
   131c5:	52                   	push   %edx
   131c6:	51                   	push   %ecx
   131c7:	53                   	push   %ebx
   131c8:	56                   	push   %esi
   131c9:	cf                   	iret   
}
   131ca:	90                   	nop
   131cb:	8d 65 f8             	lea    -0x8(%ebp),%esp
   131ce:	5b                   	pop    %ebx
   131cf:	5e                   	pop    %esi
   131d0:	5d                   	pop    %ebp
   131d1:	c3                   	ret    

000131d2 <init_main>:

void init_main(void)
{
   131d2:	f3 0f 1e fb          	endbr32 
   131d6:	55                   	push   %ebp
   131d7:	89 e5                	mov    %esp,%ebp
   131d9:	83 ec 08             	sub    $0x8,%esp
    log_printf("Kernel is Running......");
   131dc:	83 ec 0c             	sub    $0xc,%esp
   131df:	68 ce 4b 01 00       	push   $0x14bce
   131e4:	e8 20 0e 00 00       	call   14009 <log_printf>
   131e9:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   131ec:	83 ec 08             	sub    $0x8,%esp
   131ef:	68 e6 4b 01 00       	push   $0x14be6
   131f4:	68 ec 4b 01 00       	push   $0x14bec
   131f9:	e8 0b 0e 00 00       	call   14009 <log_printf>
   131fe:	83 c4 10             	add    $0x10,%esp

    // 初始化mian任务，即为内核任务
    task_first_init();
   13201:	e8 92 e2 ff ff       	call   11498 <task_first_init>
    // 跳转任务first_task
    move_to_first_task();
   13206:	e8 62 ff ff ff       	call   1316d <move_to_first_task>
   1320b:	90                   	nop
   1320c:	c9                   	leave  
   1320d:	c3                   	ret    

0001320e <list_count>:
static inline int list_count(list_t *list) {
   1320e:	55                   	push   %ebp
   1320f:	89 e5                	mov    %esp,%ebp
    return list->count;
   13211:	8b 45 08             	mov    0x8(%ebp),%eax
   13214:	8b 40 08             	mov    0x8(%eax),%eax
}
   13217:	5d                   	pop    %ebp
   13218:	c3                   	ret    

00013219 <mutex_init>:


/**
 * 锁初始化
 */
void mutex_init (mutex_t * mutex) {
   13219:	f3 0f 1e fb          	endbr32 
   1321d:	55                   	push   %ebp
   1321e:	89 e5                	mov    %esp,%ebp
   13220:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   13223:	8b 45 08             	mov    0x8(%ebp),%eax
   13226:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   1322d:	8b 45 08             	mov    0x8(%ebp),%eax
   13230:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   13236:	8b 45 08             	mov    0x8(%ebp),%eax
   13239:	83 c0 08             	add    $0x8,%eax
   1323c:	83 ec 0c             	sub    $0xc,%esp
   1323f:	50                   	push   %eax
   13240:	e8 14 0b 00 00       	call   13d59 <list_init>
   13245:	83 c4 10             	add    $0x10,%esp
}
   13248:	90                   	nop
   13249:	c9                   	leave  
   1324a:	c3                   	ret    

0001324b <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock (mutex_t * mutex) {
   1324b:	f3 0f 1e fb          	endbr32 
   1324f:	55                   	push   %ebp
   13250:	89 e5                	mov    %esp,%ebp
   13252:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   13255:	e8 4d fb ff ff       	call   12da7 <irq_enter_protection>
   1325a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   1325d:	e8 8c e3 ff ff       	call   115ee <task_current>
   13262:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   13265:	8b 45 08             	mov    0x8(%ebp),%eax
   13268:	8b 40 04             	mov    0x4(%eax),%eax
   1326b:	85 c0                	test   %eax,%eax
   1326d:	75 14                	jne    13283 <mutex_lock+0x38>
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   1326f:	8b 45 08             	mov    0x8(%ebp),%eax
   13272:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   13279:	8b 45 08             	mov    0x8(%ebp),%eax
   1327c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1327f:	89 10                	mov    %edx,(%eax)
   13281:	eb 4f                	jmp    132d2 <mutex_lock+0x87>
    } else if (mutex->owner == curr) {
   13283:	8b 45 08             	mov    0x8(%ebp),%eax
   13286:	8b 00                	mov    (%eax),%eax
   13288:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1328b:	75 11                	jne    1329e <mutex_lock+0x53>
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   1328d:	8b 45 08             	mov    0x8(%ebp),%eax
   13290:	8b 40 04             	mov    0x4(%eax),%eax
   13293:	8d 50 01             	lea    0x1(%eax),%edx
   13296:	8b 45 08             	mov    0x8(%ebp),%eax
   13299:	89 50 04             	mov    %edx,0x4(%eax)
   1329c:	eb 34                	jmp    132d2 <mutex_lock+0x87>
    } else {
        // 有其它任务占用，则进入队列等待
        task_t * curr = task_current();
   1329e:	e8 4b e3 ff ff       	call   115ee <task_current>
   132a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   132a6:	83 ec 0c             	sub    $0xc,%esp
   132a9:	ff 75 ec             	pushl  -0x14(%ebp)
   132ac:	e8 10 e3 ff ff       	call   115c1 <task_set_block>
   132b1:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   132b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   132b7:	8d 50 7c             	lea    0x7c(%eax),%edx
   132ba:	8b 45 08             	mov    0x8(%ebp),%eax
   132bd:	83 c0 08             	add    $0x8,%eax
   132c0:	83 ec 08             	sub    $0x8,%esp
   132c3:	52                   	push   %edx
   132c4:	50                   	push   %eax
   132c5:	e8 1b 0b 00 00       	call   13de5 <list_insert_last>
   132ca:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   132cd:	e8 d6 e3 ff ff       	call   116a8 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   132d2:	83 ec 0c             	sub    $0xc,%esp
   132d5:	ff 75 f4             	pushl  -0xc(%ebp)
   132d8:	e8 e6 fa ff ff       	call   12dc3 <irq_leave_protection>
   132dd:	83 c4 10             	add    $0x10,%esp
}
   132e0:	90                   	nop
   132e1:	c9                   	leave  
   132e2:	c3                   	ret    

000132e3 <mutex_unlock>:

/**
 * 释放锁：只有上锁进程才能解锁，不论上锁几次，解锁则全部解锁
 */
void mutex_unlock (mutex_t * mutex) {
   132e3:	f3 0f 1e fb          	endbr32 
   132e7:	55                   	push   %ebp
   132e8:	89 e5                	mov    %esp,%ebp
   132ea:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   132ed:	e8 b5 fa ff ff       	call   12da7 <irq_enter_protection>
   132f2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t * curr = task_current();
   132f5:	e8 f4 e2 ff ff       	call   115ee <task_current>
   132fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   132fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13300:	8b 00                	mov    (%eax),%eax
   13302:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   13305:	0f 85 88 00 00 00    	jne    13393 <mutex_unlock+0xb0>
        if (--mutex->locked_count == 0) {
   1330b:	8b 45 08             	mov    0x8(%ebp),%eax
   1330e:	8b 40 04             	mov    0x4(%eax),%eax
   13311:	8d 50 ff             	lea    -0x1(%eax),%edx
   13314:	8b 45 08             	mov    0x8(%ebp),%eax
   13317:	89 50 04             	mov    %edx,0x4(%eax)
   1331a:	8b 45 08             	mov    0x8(%ebp),%eax
   1331d:	8b 40 04             	mov    0x4(%eax),%eax
   13320:	85 c0                	test   %eax,%eax
   13322:	75 6f                	jne    13393 <mutex_unlock+0xb0>
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   13324:	8b 45 08             	mov    0x8(%ebp),%eax
   13327:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list)) {
   1332d:	8b 45 08             	mov    0x8(%ebp),%eax
   13330:	83 c0 08             	add    $0x8,%eax
   13333:	83 ec 0c             	sub    $0xc,%esp
   13336:	50                   	push   %eax
   13337:	e8 d2 fe ff ff       	call   1320e <list_count>
   1333c:	83 c4 10             	add    $0x10,%esp
   1333f:	85 c0                	test   %eax,%eax
   13341:	74 50                	je     13393 <mutex_unlock+0xb0>
                list_node_t * task_node = list_remove_first(&mutex->wait_list);
   13343:	8b 45 08             	mov    0x8(%ebp),%eax
   13346:	83 c0 08             	add    $0x8,%eax
   13349:	83 ec 0c             	sub    $0xc,%esp
   1334c:	50                   	push   %eax
   1334d:	e8 fb 0a 00 00       	call   13e4d <list_remove_first>
   13352:	83 c4 10             	add    $0x10,%esp
   13355:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   13358:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1335c:	74 08                	je     13366 <mutex_unlock+0x83>
   1335e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13361:	83 e8 7c             	sub    $0x7c,%eax
   13364:	eb 05                	jmp    1336b <mutex_unlock+0x88>
   13366:	b8 00 00 00 00       	mov    $0x0,%eax
   1336b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   1336e:	83 ec 0c             	sub    $0xc,%esp
   13371:	ff 75 e8             	pushl  -0x18(%ebp)
   13374:	e8 0e e2 ff ff       	call   11587 <task_set_ready>
   13379:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   1337c:	8b 45 08             	mov    0x8(%ebp),%eax
   1337f:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   13386:	8b 45 08             	mov    0x8(%ebp),%eax
   13389:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1338c:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   1338e:	e8 15 e3 ff ff       	call   116a8 <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   13393:	83 ec 0c             	sub    $0xc,%esp
   13396:	ff 75 f4             	pushl  -0xc(%ebp)
   13399:	e8 25 fa ff ff       	call   12dc3 <irq_leave_protection>
   1339e:	83 c4 10             	add    $0x10,%esp
   133a1:	90                   	nop
   133a2:	c9                   	leave  
   133a3:	c3                   	ret    

000133a4 <list_count>:
static inline int list_count(list_t *list) {
   133a4:	55                   	push   %ebp
   133a5:	89 e5                	mov    %esp,%ebp
    return list->count;
   133a7:	8b 45 08             	mov    0x8(%ebp),%eax
   133aa:	8b 40 08             	mov    0x8(%eax),%eax
}
   133ad:	5d                   	pop    %ebp
   133ae:	c3                   	ret    

000133af <sem_init>:

/**
 * 信号量初始化
 */
void sem_init(sem_t *sem, int init_count)
{
   133af:	f3 0f 1e fb          	endbr32 
   133b3:	55                   	push   %ebp
   133b4:	89 e5                	mov    %esp,%ebp
   133b6:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   133b9:	8b 45 08             	mov    0x8(%ebp),%eax
   133bc:	8b 55 0c             	mov    0xc(%ebp),%edx
   133bf:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   133c1:	8b 45 08             	mov    0x8(%ebp),%eax
   133c4:	83 c0 04             	add    $0x4,%eax
   133c7:	83 ec 0c             	sub    $0xc,%esp
   133ca:	50                   	push   %eax
   133cb:	e8 89 09 00 00       	call   13d59 <list_init>
   133d0:	83 c4 10             	add    $0x10,%esp
}
   133d3:	90                   	nop
   133d4:	c9                   	leave  
   133d5:	c3                   	ret    

000133d6 <sem_wait>:
 * @description: 进程申请信号量，无信号量则进入等待队列
 * @return {*}
 * @param {sem_t} *sem  待申请的信号量
 */
void sem_wait(sem_t *sem)
{
   133d6:	f3 0f 1e fb          	endbr32 
   133da:	55                   	push   %ebp
   133db:	89 e5                	mov    %esp,%ebp
   133dd:	83 ec 18             	sub    $0x18,%esp
    // 该信号量可能会被多个进程同时访问，需要设置临界资源保护
    irq_state_t state = irq_enter_protection();
   133e0:	e8 c2 f9 ff ff       	call   12da7 <irq_enter_protection>
   133e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 首先判断信号量计数是否为 0
    if (sem->count > 0)
   133e8:	8b 45 08             	mov    0x8(%ebp),%eax
   133eb:	8b 00                	mov    (%eax),%eax
   133ed:	85 c0                	test   %eax,%eax
   133ef:	7e 0f                	jle    13400 <sem_wait+0x2a>
    {
        sem->count--; // 不为 0 则拿走一个信号量 继续执行进程
   133f1:	8b 45 08             	mov    0x8(%ebp),%eax
   133f4:	8b 00                	mov    (%eax),%eax
   133f6:	8d 50 ff             	lea    -0x1(%eax),%edx
   133f9:	8b 45 08             	mov    0x8(%ebp),%eax
   133fc:	89 10                	mov    %edx,(%eax)
   133fe:	eb 34                	jmp    13434 <sem_wait+0x5e>
    }
    else // 为 0 则当前进程移出继续队列 进入等待队列的队尾进行等待
    {
        task_t *curr = task_current();
   13400:	e8 e9 e1 ff ff       	call   115ee <task_current>
   13405:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   13408:	83 ec 0c             	sub    $0xc,%esp
   1340b:	ff 75 f0             	pushl  -0x10(%ebp)
   1340e:	e8 ae e1 ff ff       	call   115c1 <task_set_block>
   13413:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   13416:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13419:	8d 50 7c             	lea    0x7c(%eax),%edx
   1341c:	8b 45 08             	mov    0x8(%ebp),%eax
   1341f:	83 c0 04             	add    $0x4,%eax
   13422:	83 ec 08             	sub    $0x8,%esp
   13425:	52                   	push   %edx
   13426:	50                   	push   %eax
   13427:	e8 b9 09 00 00       	call   13de5 <list_insert_last>
   1342c:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1342f:	e8 74 e2 ff ff       	call   116a8 <task_dispatch>
    }
    irq_leave_protection(state);
   13434:	83 ec 0c             	sub    $0xc,%esp
   13437:	ff 75 f4             	pushl  -0xc(%ebp)
   1343a:	e8 84 f9 ff ff       	call   12dc3 <irq_leave_protection>
   1343f:	83 c4 10             	add    $0x10,%esp
}
   13442:	90                   	nop
   13443:	c9                   	leave  
   13444:	c3                   	ret    

00013445 <sem_notify>:
 * @description: 系统释放信号量，有等待进程则移植就绪队列
 * @return {*}
 * @param {sem_t} *sem 待释放的信号量
 */
void sem_notify(sem_t *sem)
{
   13445:	f3 0f 1e fb          	endbr32 
   13449:	55                   	push   %ebp
   1344a:	89 e5                	mov    %esp,%ebp
   1344c:	83 ec 18             	sub    $0x18,%esp
    // 该信号量可能会被多个进程同时访问，需要设置临界资源保护
    irq_state_t state = irq_enter_protection();
   1344f:	e8 53 f9 ff ff       	call   12da7 <irq_enter_protection>
   13454:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list)) // 等待队列中有进程
   13457:	8b 45 08             	mov    0x8(%ebp),%eax
   1345a:	83 c0 04             	add    $0x4,%eax
   1345d:	83 ec 0c             	sub    $0xc,%esp
   13460:	50                   	push   %eax
   13461:	e8 3e ff ff ff       	call   133a4 <list_count>
   13466:	83 c4 10             	add    $0x10,%esp
   13469:	85 c0                	test   %eax,%eax
   1346b:	74 40                	je     134ad <sem_notify+0x68>
    {
        // 将等待队列的第一个进程放入就绪队列中
        list_node_t *node = list_remove_first(&sem->wait_list);
   1346d:	8b 45 08             	mov    0x8(%ebp),%eax
   13470:	83 c0 04             	add    $0x4,%eax
   13473:	83 ec 0c             	sub    $0xc,%esp
   13476:	50                   	push   %eax
   13477:	e8 d1 09 00 00       	call   13e4d <list_remove_first>
   1347c:	83 c4 10             	add    $0x10,%esp
   1347f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   13482:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13486:	74 08                	je     13490 <sem_notify+0x4b>
   13488:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1348b:	83 e8 7c             	sub    $0x7c,%eax
   1348e:	eb 05                	jmp    13495 <sem_notify+0x50>
   13490:	b8 00 00 00 00       	mov    $0x0,%eax
   13495:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   13498:	83 ec 0c             	sub    $0xc,%esp
   1349b:	ff 75 ec             	pushl  -0x14(%ebp)
   1349e:	e8 e4 e0 ff ff       	call   11587 <task_set_ready>
   134a3:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   134a6:	e8 fd e1 ff ff       	call   116a8 <task_dispatch>
   134ab:	eb 0d                	jmp    134ba <sem_notify+0x75>
    }
    else // 等待队列中无进程则可用信号量++
    {
        sem->count++;
   134ad:	8b 45 08             	mov    0x8(%ebp),%eax
   134b0:	8b 00                	mov    (%eax),%eax
   134b2:	8d 50 01             	lea    0x1(%eax),%edx
   134b5:	8b 45 08             	mov    0x8(%ebp),%eax
   134b8:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);
   134ba:	83 ec 0c             	sub    $0xc,%esp
   134bd:	ff 75 f4             	pushl  -0xc(%ebp)
   134c0:	e8 fe f8 ff ff       	call   12dc3 <irq_leave_protection>
   134c5:	83 c4 10             	add    $0x10,%esp
}
   134c8:	90                   	nop
   134c9:	c9                   	leave  
   134ca:	c3                   	ret    

000134cb <sem_count>:

int sem_count(sem_t *sem)
{
   134cb:	f3 0f 1e fb          	endbr32 
   134cf:	55                   	push   %ebp
   134d0:	89 e5                	mov    %esp,%ebp
   134d2:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   134d5:	e8 cd f8 ff ff       	call   12da7 <irq_enter_protection>
   134da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   134dd:	8b 45 08             	mov    0x8(%ebp),%eax
   134e0:	8b 00                	mov    (%eax),%eax
   134e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   134e5:	83 ec 0c             	sub    $0xc,%esp
   134e8:	ff 75 f4             	pushl  -0xc(%ebp)
   134eb:	e8 d3 f8 ff ff       	call   12dc3 <irq_leave_protection>
   134f0:	83 c4 10             	add    $0x10,%esp
    return count;
   134f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   134f6:	c9                   	leave  
   134f7:	c3                   	ret    

000134f8 <bitmap_byte_count>:
#include "tools/klib.h"

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count (int bit_count) {
   134f8:	f3 0f 1e fb          	endbr32 
   134fc:	55                   	push   %ebp
   134fd:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         // 向上取整
   134ff:	8b 45 08             	mov    0x8(%ebp),%eax
   13502:	83 c0 07             	add    $0x7,%eax
   13505:	8d 50 07             	lea    0x7(%eax),%edx
   13508:	85 c0                	test   %eax,%eax
   1350a:	0f 48 c2             	cmovs  %edx,%eax
   1350d:	c1 f8 03             	sar    $0x3,%eax
}
   13510:	5d                   	pop    %ebp
   13511:	c3                   	ret    

00013512 <bitmap_init>:
 * @param {bitmap_t *} bitmap   位图
 * @param {uint8_t *} bits      位图每一项的位数
 * @param {int} count           位图总的位数位数
 * @param {int} init_bit        位图初始状态（全0 or 全1）
 */
void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   13512:	f3 0f 1e fb          	endbr32 
   13516:	55                   	push   %ebp
   13517:	89 e5                	mov    %esp,%ebp
   13519:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   1351c:	8b 45 08             	mov    0x8(%ebp),%eax
   1351f:	8b 55 10             	mov    0x10(%ebp),%edx
   13522:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->bits = bits;
   13525:	8b 45 08             	mov    0x8(%ebp),%eax
   13528:	8b 55 0c             	mov    0xc(%ebp),%edx
   1352b:	89 10                	mov    %edx,(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   1352d:	8b 45 08             	mov    0x8(%ebp),%eax
   13530:	8b 40 04             	mov    0x4(%eax),%eax
   13533:	50                   	push   %eax
   13534:	e8 bf ff ff ff       	call   134f8 <bitmap_byte_count>
   13539:	83 c4 04             	add    $0x4,%esp
   1353c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 设置全为0 or 全为1
    kernel_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   1353f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13543:	74 07                	je     1354c <bitmap_init+0x3a>
   13545:	ba ff 00 00 00       	mov    $0xff,%edx
   1354a:	eb 05                	jmp    13551 <bitmap_init+0x3f>
   1354c:	ba 00 00 00 00       	mov    $0x0,%edx
   13551:	8b 45 08             	mov    0x8(%ebp),%eax
   13554:	8b 00                	mov    (%eax),%eax
   13556:	83 ec 04             	sub    $0x4,%esp
   13559:	ff 75 f4             	pushl  -0xc(%ebp)
   1355c:	52                   	push   %edx
   1355d:	50                   	push   %eax
   1355e:	e8 cc 03 00 00       	call   1392f <kernel_memset>
   13563:	83 c4 10             	add    $0x10,%esp
}
   13566:	90                   	nop
   13567:	c9                   	leave  
   13568:	c3                   	ret    

00013569 <bitmap_set_bit>:
/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   13569:	f3 0f 1e fb          	endbr32 
   1356d:	55                   	push   %ebp
   1356e:	89 e5                	mov    %esp,%ebp
   13570:	56                   	push   %esi
   13571:	53                   	push   %ebx
   13572:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   13575:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1357c:	e9 a0 00 00 00       	jmp    13621 <bitmap_set_bit+0xb8>
        // 可以考虑进行一定程序的优化!!
        if (bit) {
   13581:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   13585:	74 4a                	je     135d1 <bitmap_set_bit+0x68>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   13587:	8b 45 08             	mov    0x8(%ebp),%eax
   1358a:	8b 10                	mov    (%eax),%edx
   1358c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1358f:	8d 48 07             	lea    0x7(%eax),%ecx
   13592:	85 c0                	test   %eax,%eax
   13594:	0f 48 c1             	cmovs  %ecx,%eax
   13597:	c1 f8 03             	sar    $0x3,%eax
   1359a:	89 c3                	mov    %eax,%ebx
   1359c:	89 d8                	mov    %ebx,%eax
   1359e:	01 d0                	add    %edx,%eax
   135a0:	0f b6 00             	movzbl (%eax),%eax
   135a3:	89 c6                	mov    %eax,%esi
   135a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   135a8:	99                   	cltd   
   135a9:	c1 ea 1d             	shr    $0x1d,%edx
   135ac:	01 d0                	add    %edx,%eax
   135ae:	83 e0 07             	and    $0x7,%eax
   135b1:	29 d0                	sub    %edx,%eax
   135b3:	ba 01 00 00 00       	mov    $0x1,%edx
   135b8:	89 c1                	mov    %eax,%ecx
   135ba:	d3 e2                	shl    %cl,%edx
   135bc:	89 d0                	mov    %edx,%eax
   135be:	89 f1                	mov    %esi,%ecx
   135c0:	09 c1                	or     %eax,%ecx
   135c2:	8b 45 08             	mov    0x8(%ebp),%eax
   135c5:	8b 00                	mov    (%eax),%eax
   135c7:	89 da                	mov    %ebx,%edx
   135c9:	01 d0                	add    %edx,%eax
   135cb:	89 ca                	mov    %ecx,%edx
   135cd:	88 10                	mov    %dl,(%eax)
   135cf:	eb 48                	jmp    13619 <bitmap_set_bit+0xb0>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   135d1:	8b 45 08             	mov    0x8(%ebp),%eax
   135d4:	8b 10                	mov    (%eax),%edx
   135d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   135d9:	8d 48 07             	lea    0x7(%eax),%ecx
   135dc:	85 c0                	test   %eax,%eax
   135de:	0f 48 c1             	cmovs  %ecx,%eax
   135e1:	c1 f8 03             	sar    $0x3,%eax
   135e4:	89 c3                	mov    %eax,%ebx
   135e6:	89 d8                	mov    %ebx,%eax
   135e8:	01 d0                	add    %edx,%eax
   135ea:	0f b6 00             	movzbl (%eax),%eax
   135ed:	89 c6                	mov    %eax,%esi
   135ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   135f2:	99                   	cltd   
   135f3:	c1 ea 1d             	shr    $0x1d,%edx
   135f6:	01 d0                	add    %edx,%eax
   135f8:	83 e0 07             	and    $0x7,%eax
   135fb:	29 d0                	sub    %edx,%eax
   135fd:	ba 01 00 00 00       	mov    $0x1,%edx
   13602:	89 c1                	mov    %eax,%ecx
   13604:	d3 e2                	shl    %cl,%edx
   13606:	89 d0                	mov    %edx,%eax
   13608:	f7 d0                	not    %eax
   1360a:	89 f2                	mov    %esi,%edx
   1360c:	21 c2                	and    %eax,%edx
   1360e:	8b 45 08             	mov    0x8(%ebp),%eax
   13611:	8b 00                	mov    (%eax),%eax
   13613:	89 d9                	mov    %ebx,%ecx
   13615:	01 c8                	add    %ecx,%eax
   13617:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   13619:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1361d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   13621:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13624:	3b 45 10             	cmp    0x10(%ebp),%eax
   13627:	7d 0f                	jge    13638 <bitmap_set_bit+0xcf>
   13629:	8b 45 08             	mov    0x8(%ebp),%eax
   1362c:	8b 40 04             	mov    0x4(%eax),%eax
   1362f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13632:	0f 8c 49 ff ff ff    	jl     13581 <bitmap_set_bit+0x18>
        }
    }
} 
   13638:	90                   	nop
   13639:	83 c4 10             	add    $0x10,%esp
   1363c:	5b                   	pop    %ebx
   1363d:	5e                   	pop    %esi
   1363e:	5d                   	pop    %ebp
   1363f:	c3                   	ret    

00013640 <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit (bitmap_t * bitmap, int index) {
   13640:	f3 0f 1e fb          	endbr32 
   13644:	55                   	push   %ebp
   13645:	89 e5                	mov    %esp,%ebp
   13647:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   13648:	8b 45 08             	mov    0x8(%ebp),%eax
   1364b:	8b 10                	mov    (%eax),%edx
   1364d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13650:	8d 48 07             	lea    0x7(%eax),%ecx
   13653:	85 c0                	test   %eax,%eax
   13655:	0f 48 c1             	cmovs  %ecx,%eax
   13658:	c1 f8 03             	sar    $0x3,%eax
   1365b:	01 d0                	add    %edx,%eax
   1365d:	0f b6 00             	movzbl (%eax),%eax
   13660:	0f b6 d8             	movzbl %al,%ebx
   13663:	8b 45 0c             	mov    0xc(%ebp),%eax
   13666:	99                   	cltd   
   13667:	c1 ea 1d             	shr    $0x1d,%edx
   1366a:	01 d0                	add    %edx,%eax
   1366c:	83 e0 07             	and    $0x7,%eax
   1366f:	29 d0                	sub    %edx,%eax
   13671:	89 c1                	mov    %eax,%ecx
   13673:	d3 fb                	sar    %cl,%ebx
   13675:	89 d8                	mov    %ebx,%eax
   13677:	83 e0 01             	and    $0x1,%eax
}
   1367a:	5b                   	pop    %ebx
   1367b:	5d                   	pop    %ebp
   1367c:	c3                   	ret    

0001367d <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set (bitmap_t * bitmap, int index) {
   1367d:	f3 0f 1e fb          	endbr32 
   13681:	55                   	push   %ebp
   13682:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   13684:	ff 75 0c             	pushl  0xc(%ebp)
   13687:	ff 75 08             	pushl  0x8(%ebp)
   1368a:	e8 b1 ff ff ff       	call   13640 <bitmap_get_bit>
   1368f:	83 c4 08             	add    $0x8,%esp
   13692:	85 c0                	test   %eax,%eax
   13694:	0f 95 c0             	setne  %al
   13697:	0f b6 c0             	movzbl %al,%eax
}
   1369a:	c9                   	leave  
   1369b:	c3                   	ret    

0001369c <bitmap_alloc_nbits>:

/**
 * @brief 连续分配count个指定比特位，返回起始索引
 */
int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   1369c:	f3 0f 1e fb          	endbr32 
   136a0:	55                   	push   %ebp
   136a1:	89 e5                	mov    %esp,%ebp
   136a3:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   136a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   136ad:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   136b4:	e9 86 00 00 00       	jmp    1373f <bitmap_alloc_nbits+0xa3>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   136b9:	ff 75 fc             	pushl  -0x4(%ebp)
   136bc:	ff 75 08             	pushl  0x8(%ebp)
   136bf:	e8 7c ff ff ff       	call   13640 <bitmap_get_bit>
   136c4:	83 c4 08             	add    $0x8,%esp
   136c7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   136ca:	74 06                	je     136d2 <bitmap_alloc_nbits+0x36>
            // 不同，继续寻找起始的bit
            search_idx++;
   136cc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   136d0:	eb 6d                	jmp    1373f <bitmap_alloc_nbits+0xa3>
        }

        // 记录起始索引
        ok_idx = search_idx;
   136d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   136d5:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   136d8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   136df:	eb 27                	jmp    13708 <bitmap_alloc_nbits+0x6c>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   136e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   136e4:	8d 50 01             	lea    0x1(%eax),%edx
   136e7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   136ea:	50                   	push   %eax
   136eb:	ff 75 08             	pushl  0x8(%ebp)
   136ee:	e8 4d ff ff ff       	call   13640 <bitmap_get_bit>
   136f3:	83 c4 08             	add    $0x8,%esp
   136f6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   136f9:	74 09                	je     13704 <bitmap_alloc_nbits+0x68>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   136fb:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   13702:	eb 17                	jmp    1371b <bitmap_alloc_nbits+0x7f>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   13704:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13708:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1370b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1370e:	7d 0b                	jge    1371b <bitmap_alloc_nbits+0x7f>
   13710:	8b 45 08             	mov    0x8(%ebp),%eax
   13713:	8b 40 04             	mov    0x4(%eax),%eax
   13716:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13719:	7c c6                	jl     136e1 <bitmap_alloc_nbits+0x45>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   1371b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1371e:	3b 45 10             	cmp    0x10(%ebp),%eax
   13721:	7c 1c                	jl     1373f <bitmap_alloc_nbits+0xa3>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   13723:	8b 45 0c             	mov    0xc(%ebp),%eax
   13726:	f7 d0                	not    %eax
   13728:	50                   	push   %eax
   13729:	ff 75 10             	pushl  0x10(%ebp)
   1372c:	ff 75 f8             	pushl  -0x8(%ebp)
   1372f:	ff 75 08             	pushl  0x8(%ebp)
   13732:	e8 32 fe ff ff       	call   13569 <bitmap_set_bit>
   13737:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   1373a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1373d:	eb 14                	jmp    13753 <bitmap_alloc_nbits+0xb7>
    while (search_idx < bitmap->bit_count) {
   1373f:	8b 45 08             	mov    0x8(%ebp),%eax
   13742:	8b 40 04             	mov    0x4(%eax),%eax
   13745:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13748:	0f 8c 6b ff ff ff    	jl     136b9 <bitmap_alloc_nbits+0x1d>
        }
    }

    return -1;
   1374e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13753:	c9                   	leave  
   13754:	c3                   	ret    

00013755 <hlt>:
static inline void hlt(void) {
   13755:	55                   	push   %ebp
   13756:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   13758:	f4                   	hlt    
}
   13759:	90                   	nop
   1375a:	5d                   	pop    %ebp
   1375b:	c3                   	ret    

0001375c <kernel_strcpy>:
#include "tools/log.h"
#include "common/cpu_instr.h"

/* 将 src 字符串复制到 dest 字符串中 */
void kernel_strcpy(char *dest, const char *src)
{
   1375c:	f3 0f 1e fb          	endbr32 
   13760:	55                   	push   %ebp
   13761:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   13763:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13767:	74 3b                	je     137a4 <kernel_strcpy+0x48>
   13769:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1376d:	74 35                	je     137a4 <kernel_strcpy+0x48>
    {
        return;
    }
    while (*dest && *src)
   1376f:	eb 17                	jmp    13788 <kernel_strcpy+0x2c>
    {
        *dest++ = *src++;
   13771:	8b 55 0c             	mov    0xc(%ebp),%edx
   13774:	8d 42 01             	lea    0x1(%edx),%eax
   13777:	89 45 0c             	mov    %eax,0xc(%ebp)
   1377a:	8b 45 08             	mov    0x8(%ebp),%eax
   1377d:	8d 48 01             	lea    0x1(%eax),%ecx
   13780:	89 4d 08             	mov    %ecx,0x8(%ebp)
   13783:	0f b6 12             	movzbl (%edx),%edx
   13786:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   13788:	8b 45 08             	mov    0x8(%ebp),%eax
   1378b:	0f b6 00             	movzbl (%eax),%eax
   1378e:	84 c0                	test   %al,%al
   13790:	74 0a                	je     1379c <kernel_strcpy+0x40>
   13792:	8b 45 0c             	mov    0xc(%ebp),%eax
   13795:	0f b6 00             	movzbl (%eax),%eax
   13798:	84 c0                	test   %al,%al
   1379a:	75 d5                	jne    13771 <kernel_strcpy+0x15>
    }
    *dest = '\0';
   1379c:	8b 45 08             	mov    0x8(%ebp),%eax
   1379f:	c6 00 00             	movb   $0x0,(%eax)
   137a2:	eb 01                	jmp    137a5 <kernel_strcpy+0x49>
        return;
   137a4:	90                   	nop
}
   137a5:	5d                   	pop    %ebp
   137a6:	c3                   	ret    

000137a7 <kernel_strncpy>:
/* 将 src 字符串中的 size 个字符复制到 dest 字符串中 */
void kernel_strncpy(char *dest, const char *src, int size)
{
   137a7:	f3 0f 1e fb          	endbr32 
   137ab:	55                   	push   %ebp
   137ac:	89 e5                	mov    %esp,%ebp
   137ae:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   137b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   137b5:	74 61                	je     13818 <kernel_strncpy+0x71>
   137b7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   137bb:	74 5b                	je     13818 <kernel_strncpy+0x71>
   137bd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   137c1:	74 55                	je     13818 <kernel_strncpy+0x71>
    {
        return;
    }

    char *d = dest;
   137c3:	8b 45 08             	mov    0x8(%ebp),%eax
   137c6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   137c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   137cc:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   137cf:	eb 17                	jmp    137e8 <kernel_strncpy+0x41>
    {
        *d++ = *s++;
   137d1:	8b 55 f8             	mov    -0x8(%ebp),%edx
   137d4:	8d 42 01             	lea    0x1(%edx),%eax
   137d7:	89 45 f8             	mov    %eax,-0x8(%ebp)
   137da:	8b 45 fc             	mov    -0x4(%ebp),%eax
   137dd:	8d 48 01             	lea    0x1(%eax),%ecx
   137e0:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   137e3:	0f b6 12             	movzbl (%edx),%edx
   137e6:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   137e8:	8b 45 10             	mov    0x10(%ebp),%eax
   137eb:	8d 50 ff             	lea    -0x1(%eax),%edx
   137ee:	89 55 10             	mov    %edx,0x10(%ebp)
   137f1:	85 c0                	test   %eax,%eax
   137f3:	7e 0a                	jle    137ff <kernel_strncpy+0x58>
   137f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   137f8:	0f b6 00             	movzbl (%eax),%eax
   137fb:	84 c0                	test   %al,%al
   137fd:	75 d2                	jne    137d1 <kernel_strncpy+0x2a>
    }
    if (size == 0)
   137ff:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13803:	75 0b                	jne    13810 <kernel_strncpy+0x69>
    {
        *(d - 1) = '\0';
   13805:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13808:	83 e8 01             	sub    $0x1,%eax
   1380b:	c6 00 00             	movb   $0x0,(%eax)
   1380e:	eb 09                	jmp    13819 <kernel_strncpy+0x72>
    }
    else
    {
        *d = '\0';
   13810:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13813:	c6 00 00             	movb   $0x0,(%eax)
   13816:	eb 01                	jmp    13819 <kernel_strncpy+0x72>
        return;
   13818:	90                   	nop
    }
}
   13819:	c9                   	leave  
   1381a:	c3                   	ret    

0001381b <kernel_strlen>:
/* 计算字符串 str 的长度（不包括 null 字符） */
int kernel_strlen(const char *str)
{
   1381b:	f3 0f 1e fb          	endbr32 
   1381f:	55                   	push   %ebp
   13820:	89 e5                	mov    %esp,%ebp
   13822:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0)
   13825:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13829:	75 07                	jne    13832 <kernel_strlen+0x17>
    {
        return 0;
   1382b:	b8 00 00 00 00       	mov    $0x0,%eax
   13830:	eb 26                	jmp    13858 <kernel_strlen+0x3d>
    }

    const char *c = str;
   13832:	8b 45 08             	mov    0x8(%ebp),%eax
   13835:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   13838:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   1383f:	eb 04                	jmp    13845 <kernel_strlen+0x2a>
    {
        len++;
   13841:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   13845:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13848:	8d 50 01             	lea    0x1(%eax),%edx
   1384b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1384e:	0f b6 00             	movzbl (%eax),%eax
   13851:	84 c0                	test   %al,%al
   13853:	75 ec                	jne    13841 <kernel_strlen+0x26>
    }

    return len;
   13855:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   13858:	c9                   	leave  
   13859:	c3                   	ret    

0001385a <kernel_strncmp>:

/* 比较两个字符串 s1 和 s2 的前 size 个字符 , 如果某一字符串提前比较完成，也算相同*/
int kernel_strncmp(const char *s1, const char *s2, int size)
{
   1385a:	f3 0f 1e fb          	endbr32 
   1385e:	55                   	push   %ebp
   1385f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   13861:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13865:	74 06                	je     1386d <kernel_strncmp+0x13>
   13867:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1386b:	75 13                	jne    13880 <kernel_strncmp+0x26>
    {
        return -1;
   1386d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13872:	eb 66                	jmp    138da <kernel_strncmp+0x80>
    }

    // 2023-3-18 这里size没有用到
    while (*s1 && *s2 && (*s1 == *s2) && size)
    {
        s1++;
   13874:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   13878:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   1387c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   13880:	8b 45 08             	mov    0x8(%ebp),%eax
   13883:	0f b6 00             	movzbl (%eax),%eax
   13886:	84 c0                	test   %al,%al
   13888:	74 20                	je     138aa <kernel_strncmp+0x50>
   1388a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1388d:	0f b6 00             	movzbl (%eax),%eax
   13890:	84 c0                	test   %al,%al
   13892:	74 16                	je     138aa <kernel_strncmp+0x50>
   13894:	8b 45 08             	mov    0x8(%ebp),%eax
   13897:	0f b6 10             	movzbl (%eax),%edx
   1389a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1389d:	0f b6 00             	movzbl (%eax),%eax
   138a0:	38 c2                	cmp    %al,%dl
   138a2:	75 06                	jne    138aa <kernel_strncmp+0x50>
   138a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   138a8:	75 ca                	jne    13874 <kernel_strncmp+0x1a>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   138aa:	8b 45 08             	mov    0x8(%ebp),%eax
   138ad:	0f b6 00             	movzbl (%eax),%eax
   138b0:	84 c0                	test   %al,%al
   138b2:	74 21                	je     138d5 <kernel_strncmp+0x7b>
   138b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   138b7:	0f b6 00             	movzbl (%eax),%eax
   138ba:	84 c0                	test   %al,%al
   138bc:	74 17                	je     138d5 <kernel_strncmp+0x7b>
   138be:	8b 45 08             	mov    0x8(%ebp),%eax
   138c1:	0f b6 10             	movzbl (%eax),%edx
   138c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   138c7:	0f b6 00             	movzbl (%eax),%eax
   138ca:	38 c2                	cmp    %al,%dl
   138cc:	74 07                	je     138d5 <kernel_strncmp+0x7b>
   138ce:	b8 01 00 00 00       	mov    $0x1,%eax
   138d3:	eb 05                	jmp    138da <kernel_strncmp+0x80>
   138d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   138da:	5d                   	pop    %ebp
   138db:	c3                   	ret    

000138dc <kernel_memcpy>:
/* 将 src 指向的内存块中的 size 个字节复制到 dest 指向的内存块中 */
void kernel_memcpy(void *dest, void *src, int size)
{
   138dc:	f3 0f 1e fb          	endbr32 
   138e0:	55                   	push   %ebp
   138e1:	89 e5                	mov    %esp,%ebp
   138e3:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   138e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   138ea:	74 40                	je     1392c <kernel_memcpy+0x50>
   138ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   138f0:	74 3a                	je     1392c <kernel_memcpy+0x50>
   138f2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   138f6:	74 34                	je     1392c <kernel_memcpy+0x50>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   138f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   138fb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   138fe:	8b 45 08             	mov    0x8(%ebp),%eax
   13901:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   13904:	eb 17                	jmp    1391d <kernel_memcpy+0x41>
    {
        *d++ = *s++;
   13906:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13909:	8d 42 01             	lea    0x1(%edx),%eax
   1390c:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1390f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13912:	8d 48 01             	lea    0x1(%eax),%ecx
   13915:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   13918:	0f b6 12             	movzbl (%edx),%edx
   1391b:	88 10                	mov    %dl,(%eax)
    while (size--)
   1391d:	8b 45 10             	mov    0x10(%ebp),%eax
   13920:	8d 50 ff             	lea    -0x1(%eax),%edx
   13923:	89 55 10             	mov    %edx,0x10(%ebp)
   13926:	85 c0                	test   %eax,%eax
   13928:	75 dc                	jne    13906 <kernel_memcpy+0x2a>
   1392a:	eb 01                	jmp    1392d <kernel_memcpy+0x51>
        return;
   1392c:	90                   	nop
    }
}
   1392d:	c9                   	leave  
   1392e:	c3                   	ret    

0001392f <kernel_memset>:
/* 将 dest 指向的内存块中的前 size 个字节设置为值 v */
void kernel_memset(void *dest, uint8_t v, int size)
{
   1392f:	f3 0f 1e fb          	endbr32 
   13933:	55                   	push   %ebp
   13934:	89 e5                	mov    %esp,%ebp
   13936:	83 ec 14             	sub    $0x14,%esp
   13939:	8b 45 0c             	mov    0xc(%ebp),%eax
   1393c:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   1393f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13943:	74 2c                	je     13971 <kernel_memset+0x42>
   13945:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   13949:	74 26                	je     13971 <kernel_memset+0x42>
    {
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   1394b:	8b 45 08             	mov    0x8(%ebp),%eax
   1394e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   13951:	eb 0f                	jmp    13962 <kernel_memset+0x33>
    {
        *d++ = v;
   13953:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13956:	8d 50 01             	lea    0x1(%eax),%edx
   13959:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1395c:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   13960:	88 10                	mov    %dl,(%eax)
    while (size--)
   13962:	8b 45 10             	mov    0x10(%ebp),%eax
   13965:	8d 50 ff             	lea    -0x1(%eax),%edx
   13968:	89 55 10             	mov    %edx,0x10(%ebp)
   1396b:	85 c0                	test   %eax,%eax
   1396d:	75 e4                	jne    13953 <kernel_memset+0x24>
   1396f:	eb 01                	jmp    13972 <kernel_memset+0x43>
        return;
   13971:	90                   	nop
    }
}
   13972:	c9                   	leave  
   13973:	c3                   	ret    

00013974 <kernel_memcmp>:
/* 比较 d1 和 d2 指向的内存块中的前 size 个字节 */
int kernel_memcmp(void *d1, void *d2, int size)
{
   13974:	f3 0f 1e fb          	endbr32 
   13978:	55                   	push   %ebp
   13979:	89 e5                	mov    %esp,%ebp
   1397b:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   1397e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13982:	74 06                	je     1398a <kernel_memcmp+0x16>
   13984:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13988:	75 07                	jne    13991 <kernel_memcmp+0x1d>
    {
        return 1;
   1398a:	b8 01 00 00 00       	mov    $0x1,%eax
   1398f:	eb 43                	jmp    139d4 <kernel_memcmp+0x60>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   13991:	8b 45 08             	mov    0x8(%ebp),%eax
   13994:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   13997:	8b 45 0c             	mov    0xc(%ebp),%eax
   1399a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   1399d:	eb 23                	jmp    139c2 <kernel_memcmp+0x4e>
    {
        if (*p_d1++ != *p_d2++)
   1399f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   139a2:	8d 50 01             	lea    0x1(%eax),%edx
   139a5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   139a8:	0f b6 08             	movzbl (%eax),%ecx
   139ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
   139ae:	8d 50 01             	lea    0x1(%eax),%edx
   139b1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   139b4:	0f b6 00             	movzbl (%eax),%eax
   139b7:	38 c1                	cmp    %al,%cl
   139b9:	74 07                	je     139c2 <kernel_memcmp+0x4e>
        {
            return 1;
   139bb:	b8 01 00 00 00       	mov    $0x1,%eax
   139c0:	eb 12                	jmp    139d4 <kernel_memcmp+0x60>
    while (size--)
   139c2:	8b 45 10             	mov    0x10(%ebp),%eax
   139c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   139c8:	89 55 10             	mov    %edx,0x10(%ebp)
   139cb:	85 c0                	test   %eax,%eax
   139cd:	75 d0                	jne    1399f <kernel_memcmp+0x2b>
        }
    }

    return 0;
   139cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   139d4:	c9                   	leave  
   139d5:	c3                   	ret    

000139d6 <kernel_vsprintf>:
 * 格式化字符串
 * "Version:%s", "1.0.10"
 * 将可变参数列表 vl 中的内容根据 fmt 指定的格式进行格式化，并将结果存储在 buffer 中
 */
void kernel_vsprintf(char *buffer, const char *fmt, va_list vl)
{
   139d6:	f3 0f 1e fb          	endbr32 
   139da:	55                   	push   %ebp
   139db:	89 e5                	mov    %esp,%ebp
   139dd:	83 ec 28             	sub    $0x28,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   139e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    char *curr = buffer;
   139e7:	8b 45 08             	mov    0x8(%ebp),%eax
   139ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

    /**首先，使用后缀自增运算符 ++ 将 fmt 指针向后移动一位，指向下一个字符。
     * 然后，将 fmt 指针所指向的字符赋值给变量 ch。由于 *fmt++ 的优先级比 = 高，因此这个表达式先执行了 *fmt，然后再执行 fmt++。
     * 如果 ch 的值为 0，也就是遇到了字符串的结束符，那么整个循环就会终止。否则，循环会继续执行，读取下一个字符。
     */
    while ((ch = *fmt++))
   139ed:	e9 17 01 00 00       	jmp    13b09 <kernel_vsprintf+0x133>
    {
        if (state == NORMAL)
   139f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   139f6:	75 26                	jne    13a1e <kernel_vsprintf+0x48>
        {
            if (ch == '%')
   139f8:	80 7d e7 25          	cmpb   $0x25,-0x19(%ebp)
   139fc:	75 0c                	jne    13a0a <kernel_vsprintf+0x34>
            {
                state = READ_FMT;
   139fe:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   13a05:	e9 ff 00 00 00       	jmp    13b09 <kernel_vsprintf+0x133>
            }
            else
            {
                *curr++ = ch;
   13a0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a0d:	8d 50 01             	lea    0x1(%eax),%edx
   13a10:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13a13:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   13a17:	88 10                	mov    %dl,(%eax)
   13a19:	e9 eb 00 00 00       	jmp    13b09 <kernel_vsprintf+0x133>
            }
        }
        else
        {
            if (ch == 's')
   13a1e:	80 7d e7 73          	cmpb   $0x73,-0x19(%ebp)
   13a22:	75 47                	jne    13a6b <kernel_vsprintf+0x95>
            {
                const char *str = va_arg(vl, char *);
   13a24:	8b 45 10             	mov    0x10(%ebp),%eax
   13a27:	8d 50 04             	lea    0x4(%eax),%edx
   13a2a:	89 55 10             	mov    %edx,0x10(%ebp)
   13a2d:	8b 00                	mov    (%eax),%eax
   13a2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
                int len = kernel_strlen(str);
   13a32:	ff 75 ec             	pushl  -0x14(%ebp)
   13a35:	e8 e1 fd ff ff       	call   1381b <kernel_strlen>
   13a3a:	83 c4 04             	add    $0x4,%esp
   13a3d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                while (len--)
   13a40:	eb 17                	jmp    13a59 <kernel_vsprintf+0x83>
                {
                    *curr++ = *str++;
   13a42:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13a45:	8d 42 01             	lea    0x1(%edx),%eax
   13a48:	89 45 ec             	mov    %eax,-0x14(%ebp)
   13a4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a4e:	8d 48 01             	lea    0x1(%eax),%ecx
   13a51:	89 4d f0             	mov    %ecx,-0x10(%ebp)
   13a54:	0f b6 12             	movzbl (%edx),%edx
   13a57:	88 10                	mov    %dl,(%eax)
                while (len--)
   13a59:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13a5c:	8d 50 ff             	lea    -0x1(%eax),%edx
   13a5f:	89 55 e8             	mov    %edx,-0x18(%ebp)
   13a62:	85 c0                	test   %eax,%eax
   13a64:	75 dc                	jne    13a42 <kernel_vsprintf+0x6c>
   13a66:	e9 97 00 00 00       	jmp    13b02 <kernel_vsprintf+0x12c>
                }
            }
            else if (ch == 'd')
   13a6b:	80 7d e7 64          	cmpb   $0x64,-0x19(%ebp)
   13a6f:	75 34                	jne    13aa5 <kernel_vsprintf+0xcf>
            {
                int num = va_arg(vl, int);
   13a71:	8b 45 10             	mov    0x10(%ebp),%eax
   13a74:	8d 50 04             	lea    0x4(%eax),%edx
   13a77:	89 55 10             	mov    %edx,0x10(%ebp)
   13a7a:	8b 00                	mov    (%eax),%eax
   13a7c:	89 45 dc             	mov    %eax,-0x24(%ebp)
                kernel_itoa(curr, num, 10);
   13a7f:	83 ec 04             	sub    $0x4,%esp
   13a82:	6a 0a                	push   $0xa
   13a84:	ff 75 dc             	pushl  -0x24(%ebp)
   13a87:	ff 75 f0             	pushl  -0x10(%ebp)
   13a8a:	e8 97 00 00 00       	call   13b26 <kernel_itoa>
   13a8f:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);
   13a92:	83 ec 0c             	sub    $0xc,%esp
   13a95:	ff 75 f0             	pushl  -0x10(%ebp)
   13a98:	e8 7e fd ff ff       	call   1381b <kernel_strlen>
   13a9d:	83 c4 10             	add    $0x10,%esp
   13aa0:	01 45 f0             	add    %eax,-0x10(%ebp)
   13aa3:	eb 5d                	jmp    13b02 <kernel_vsprintf+0x12c>
            }
            else if (ch == 'x')
   13aa5:	80 7d e7 78          	cmpb   $0x78,-0x19(%ebp)
   13aa9:	75 34                	jne    13adf <kernel_vsprintf+0x109>
            {
                int num = va_arg(vl, int);
   13aab:	8b 45 10             	mov    0x10(%ebp),%eax
   13aae:	8d 50 04             	lea    0x4(%eax),%edx
   13ab1:	89 55 10             	mov    %edx,0x10(%ebp)
   13ab4:	8b 00                	mov    (%eax),%eax
   13ab6:	89 45 e0             	mov    %eax,-0x20(%ebp)
                kernel_itoa(curr, num, 16);
   13ab9:	83 ec 04             	sub    $0x4,%esp
   13abc:	6a 10                	push   $0x10
   13abe:	ff 75 e0             	pushl  -0x20(%ebp)
   13ac1:	ff 75 f0             	pushl  -0x10(%ebp)
   13ac4:	e8 5d 00 00 00       	call   13b26 <kernel_itoa>
   13ac9:	83 c4 10             	add    $0x10,%esp
                curr += kernel_strlen(curr);
   13acc:	83 ec 0c             	sub    $0xc,%esp
   13acf:	ff 75 f0             	pushl  -0x10(%ebp)
   13ad2:	e8 44 fd ff ff       	call   1381b <kernel_strlen>
   13ad7:	83 c4 10             	add    $0x10,%esp
   13ada:	01 45 f0             	add    %eax,-0x10(%ebp)
   13add:	eb 23                	jmp    13b02 <kernel_vsprintf+0x12c>
            }
            else if (ch == 'c')
   13adf:	80 7d e7 63          	cmpb   $0x63,-0x19(%ebp)
   13ae3:	75 1d                	jne    13b02 <kernel_vsprintf+0x12c>
            {
                char c = va_arg(vl, int);
   13ae5:	8b 45 10             	mov    0x10(%ebp),%eax
   13ae8:	8d 50 04             	lea    0x4(%eax),%edx
   13aeb:	89 55 10             	mov    %edx,0x10(%ebp)
   13aee:	8b 00                	mov    (%eax),%eax
   13af0:	88 45 e6             	mov    %al,-0x1a(%ebp)
                *curr++ = c;
   13af3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13af6:	8d 50 01             	lea    0x1(%eax),%edx
   13af9:	89 55 f0             	mov    %edx,-0x10(%ebp)
   13afc:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   13b00:	88 10                	mov    %dl,(%eax)
            }
            state = NORMAL;
   13b02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while ((ch = *fmt++))
   13b09:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b0c:	8d 50 01             	lea    0x1(%eax),%edx
   13b0f:	89 55 0c             	mov    %edx,0xc(%ebp)
   13b12:	0f b6 00             	movzbl (%eax),%eax
   13b15:	88 45 e7             	mov    %al,-0x19(%ebp)
   13b18:	80 7d e7 00          	cmpb   $0x0,-0x19(%ebp)
   13b1c:	0f 85 d0 fe ff ff    	jne    139f2 <kernel_vsprintf+0x1c>
        }
    }
}
   13b22:	90                   	nop
   13b23:	90                   	nop
   13b24:	c9                   	leave  
   13b25:	c3                   	ret    

00013b26 <kernel_itoa>:
/* 将int 转换为 char*（ASCII） 其中 base表示进制数 */
void kernel_itoa(char * buf, int num, int base) {
   13b26:	f3 0f 1e fb          	endbr32 
   13b2a:	55                   	push   %ebp
   13b2b:	89 e5                	mov    %esp,%ebp
   13b2d:	53                   	push   %ebx
   13b2e:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   13b31:	8b 45 08             	mov    0x8(%ebp),%eax
   13b34:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   13b37:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b3a:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   13b3d:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   13b41:	74 1d                	je     13b60 <kernel_itoa+0x3a>
   13b43:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   13b47:	74 17                	je     13b60 <kernel_itoa+0x3a>
   13b49:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   13b4d:	74 11                	je     13b60 <kernel_itoa+0x3a>
   13b4f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   13b53:	74 0b                	je     13b60 <kernel_itoa+0x3a>
        *p = '\0';
   13b55:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b58:	c6 00 00             	movb   $0x0,(%eax)
        return;
   13b5b:	e9 03 01 00 00       	jmp    13c63 <kernel_itoa+0x13d>
    }

    // 只支持十进制负数
    int signed_num = 0;
   13b60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   13b67:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b6b:	79 19                	jns    13b86 <kernel_itoa+0x60>
   13b6d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   13b71:	75 13                	jne    13b86 <kernel_itoa+0x60>
        *p++ = '-';
   13b73:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b76:	8d 50 01             	lea    0x1(%eax),%edx
   13b79:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13b7c:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   13b7f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   13b86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13b8a:	74 3b                	je     13bc7 <kernel_itoa+0xa1>
        do {
            char ch = num2ch[num % base + 15];
   13b8c:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   13b92:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b95:	99                   	cltd   
   13b96:	f7 7d 10             	idivl  0x10(%ebp)
   13b99:	89 d0                	mov    %edx,%eax
   13b9b:	83 c0 0f             	add    $0xf,%eax
   13b9e:	01 c8                	add    %ecx,%eax
   13ba0:	0f b6 00             	movzbl (%eax),%eax
   13ba3:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   13ba6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13ba9:	8d 50 01             	lea    0x1(%eax),%edx
   13bac:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13baf:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   13bb3:	88 10                	mov    %dl,(%eax)
            num /= base;
   13bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
   13bb8:	99                   	cltd   
   13bb9:	f7 7d 10             	idivl  0x10(%ebp)
   13bbc:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   13bbf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13bc3:	75 c7                	jne    13b8c <kernel_itoa+0x66>
   13bc5:	eb 4b                	jmp    13c12 <kernel_itoa+0xec>
    } else {
        uint32_t u_num = (uint32_t)num;
   13bc7:	8b 45 0c             	mov    0xc(%ebp),%eax
   13bca:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   13bcd:	8b 0d 40 50 01 00    	mov    0x15040,%ecx
   13bd3:	8b 5d 10             	mov    0x10(%ebp),%ebx
   13bd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13bd9:	ba 00 00 00 00       	mov    $0x0,%edx
   13bde:	f7 f3                	div    %ebx
   13be0:	89 d0                	mov    %edx,%eax
   13be2:	83 c0 0f             	add    $0xf,%eax
   13be5:	01 c8                	add    %ecx,%eax
   13be7:	0f b6 00             	movzbl (%eax),%eax
   13bea:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   13bed:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13bf0:	8d 50 01             	lea    0x1(%eax),%edx
   13bf3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13bf6:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   13bfa:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   13bfc:	8b 5d 10             	mov    0x10(%ebp),%ebx
   13bff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13c02:	ba 00 00 00 00       	mov    $0x0,%edx
   13c07:	f7 f3                	div    %ebx
   13c09:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   13c0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13c10:	75 bb                	jne    13bcd <kernel_itoa+0xa7>
    }
    *p-- = '\0';
   13c12:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13c15:	8d 50 ff             	lea    -0x1(%eax),%edx
   13c18:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13c1b:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   13c1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13c22:	74 08                	je     13c2c <kernel_itoa+0x106>
   13c24:	8b 45 08             	mov    0x8(%ebp),%eax
   13c27:	83 c0 01             	add    $0x1,%eax
   13c2a:	eb 03                	jmp    13c2f <kernel_itoa+0x109>
   13c2c:	8b 45 08             	mov    0x8(%ebp),%eax
   13c2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   13c32:	eb 27                	jmp    13c5b <kernel_itoa+0x135>
        char ch = *start;
   13c34:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13c37:	0f b6 00             	movzbl (%eax),%eax
   13c3a:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   13c3d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13c40:	0f b6 10             	movzbl (%eax),%edx
   13c43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13c46:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   13c48:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13c4b:	8d 50 ff             	lea    -0x1(%eax),%edx
   13c4e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   13c51:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   13c55:	88 10                	mov    %dl,(%eax)
        start++;
   13c57:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   13c5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13c5e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   13c61:	72 d1                	jb     13c34 <kernel_itoa+0x10e>
    }
}
   13c63:	83 c4 20             	add    $0x20,%esp
   13c66:	5b                   	pop    %ebx
   13c67:	5d                   	pop    %ebp
   13c68:	c3                   	ret    

00013c69 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   13c69:	f3 0f 1e fb          	endbr32 
   13c6d:	55                   	push   %ebp
   13c6e:	89 e5                	mov    %esp,%ebp
   13c70:	83 ec 18             	sub    $0x18,%esp
    va_list vl;
    va_start(vl, fmt);
   13c73:	8d 45 10             	lea    0x10(%ebp),%eax
   13c76:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    kernel_vsprintf(buffer, fmt, vl);
   13c79:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c7c:	83 ec 04             	sub    $0x4,%esp
   13c7f:	50                   	push   %eax
   13c80:	ff 75 0c             	pushl  0xc(%ebp)
   13c83:	ff 75 08             	pushl  0x8(%ebp)
   13c86:	e8 4b fd ff ff       	call   139d6 <kernel_vsprintf>
   13c8b:	83 c4 10             	add    $0x10,%esp
    va_end(vl);
}
   13c8e:	90                   	nop
   13c8f:	c9                   	leave  
   13c90:	c3                   	ret    

00013c91 <strings_count>:
/**
 * @brief 计算字符串的数量
 */
int strings_count (char ** start) {
   13c91:	f3 0f 1e fb          	endbr32 
   13c95:	55                   	push   %ebp
   13c96:	89 e5                	mov    %esp,%ebp
   13c98:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   13c9b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start) {
   13ca2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13ca6:	74 15                	je     13cbd <strings_count+0x2c>
        while (*start++) {
   13ca8:	eb 04                	jmp    13cae <strings_count+0x1d>
            count++;
   13caa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++) {
   13cae:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb1:	8d 50 04             	lea    0x4(%eax),%edx
   13cb4:	89 55 08             	mov    %edx,0x8(%ebp)
   13cb7:	8b 00                	mov    (%eax),%eax
   13cb9:	85 c0                	test   %eax,%eax
   13cbb:	75 ed                	jne    13caa <strings_count+0x19>
        }
    }
    return count;
   13cbd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13cc0:	c9                   	leave  
   13cc1:	c3                   	ret    

00013cc2 <get_file_name>:


/**
 * @brief 从路径中解释文件名
 */
char * get_file_name (char * name) {
   13cc2:	f3 0f 1e fb          	endbr32 
   13cc6:	55                   	push   %ebp
   13cc7:	89 e5                	mov    %esp,%ebp
   13cc9:	83 ec 10             	sub    $0x10,%esp
    char * s = name;
   13ccc:	8b 45 08             	mov    0x8(%ebp),%eax
   13ccf:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 定位到结束符
    while (*s != '\0') {
   13cd2:	eb 04                	jmp    13cd8 <get_file_name+0x16>
        s++;
   13cd4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0') {
   13cd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13cdb:	0f b6 00             	movzbl (%eax),%eax
   13cde:	84 c0                	test   %al,%al
   13ce0:	75 f2                	jne    13cd4 <get_file_name+0x12>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   13ce2:	eb 04                	jmp    13ce8 <get_file_name+0x26>
        s--;
   13ce4:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   13ce8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13ceb:	0f b6 00             	movzbl (%eax),%eax
   13cee:	3c 5c                	cmp    $0x5c,%al
   13cf0:	74 12                	je     13d04 <get_file_name+0x42>
   13cf2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13cf5:	0f b6 00             	movzbl (%eax),%eax
   13cf8:	3c 2f                	cmp    $0x2f,%al
   13cfa:	74 08                	je     13d04 <get_file_name+0x42>
   13cfc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13cff:	3b 45 08             	cmp    0x8(%ebp),%eax
   13d02:	73 e0                	jae    13ce4 <get_file_name+0x22>
    }
    return s + 1;
   13d04:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13d07:	83 c0 01             	add    $0x1,%eax
}
   13d0a:	c9                   	leave  
   13d0b:	c3                   	ret    

00013d0c <panic>:

void panic (const char * file, int line, const char * func, const char * cond) {
   13d0c:	f3 0f 1e fb          	endbr32 
   13d10:	55                   	push   %ebp
   13d11:	89 e5                	mov    %esp,%ebp
   13d13:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   13d16:	83 ec 08             	sub    $0x8,%esp
   13d19:	ff 75 14             	pushl  0x14(%ebp)
   13d1c:	68 0c 4c 01 00       	push   $0x14c0c
   13d21:	e8 e3 02 00 00       	call   14009 <log_printf>
   13d26:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   13d29:	ff 75 10             	pushl  0x10(%ebp)
   13d2c:	ff 75 0c             	pushl  0xc(%ebp)
   13d2f:	ff 75 08             	pushl  0x8(%ebp)
   13d32:	68 1e 4c 01 00       	push   $0x14c1e
   13d37:	e8 cd 02 00 00       	call   14009 <log_printf>
   13d3c:	83 c4 10             	add    $0x10,%esp

    for (;;) {
        hlt();
   13d3f:	e8 11 fa ff ff       	call   13755 <hlt>
   13d44:	eb f9                	jmp    13d3f <panic+0x33>

00013d46 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   13d46:	55                   	push   %ebp
   13d47:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   13d49:	8b 45 08             	mov    0x8(%ebp),%eax
   13d4c:	8b 40 08             	mov    0x8(%eax),%eax
   13d4f:	85 c0                	test   %eax,%eax
   13d51:	0f 94 c0             	sete   %al
   13d54:	0f b6 c0             	movzbl %al,%eax
}
   13d57:	5d                   	pop    %ebp
   13d58:	c3                   	ret    

00013d59 <list_init>:
#include "tools/list.h"
/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list) {
   13d59:	f3 0f 1e fb          	endbr32 
   13d5d:	55                   	push   %ebp
   13d5e:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   13d60:	8b 45 08             	mov    0x8(%ebp),%eax
   13d63:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13d6a:	8b 45 08             	mov    0x8(%ebp),%eax
   13d6d:	8b 50 04             	mov    0x4(%eax),%edx
   13d70:	8b 45 08             	mov    0x8(%ebp),%eax
   13d73:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   13d75:	8b 45 08             	mov    0x8(%ebp),%eax
   13d78:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   13d7f:	90                   	nop
   13d80:	5d                   	pop    %ebp
   13d81:	c3                   	ret    

00013d82 <list_insert_first>:
/**
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node) {
   13d82:	f3 0f 1e fb          	endbr32 
   13d86:	55                   	push   %ebp
   13d87:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   13d89:	8b 45 08             	mov    0x8(%ebp),%eax
   13d8c:	8b 10                	mov    (%eax),%edx
   13d8e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d91:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   13d94:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list)) {
   13d9d:	ff 75 08             	pushl  0x8(%ebp)
   13da0:	e8 a1 ff ff ff       	call   13d46 <list_is_empty>
   13da5:	83 c4 04             	add    $0x4,%esp
   13da8:	85 c0                	test   %eax,%eax
   13daa:	74 15                	je     13dc1 <list_insert_first+0x3f>
        list->last = list->first = node;
   13dac:	8b 45 08             	mov    0x8(%ebp),%eax
   13daf:	8b 55 0c             	mov    0xc(%ebp),%edx
   13db2:	89 10                	mov    %edx,(%eax)
   13db4:	8b 45 08             	mov    0x8(%ebp),%eax
   13db7:	8b 10                	mov    (%eax),%edx
   13db9:	8b 45 08             	mov    0x8(%ebp),%eax
   13dbc:	89 50 04             	mov    %edx,0x4(%eax)
   13dbf:	eb 12                	jmp    13dd3 <list_insert_first+0x51>
    } else {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   13dc1:	8b 45 08             	mov    0x8(%ebp),%eax
   13dc4:	8b 00                	mov    (%eax),%eax
   13dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
   13dc9:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   13dcb:	8b 45 08             	mov    0x8(%ebp),%eax
   13dce:	8b 55 0c             	mov    0xc(%ebp),%edx
   13dd1:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   13dd3:	8b 45 08             	mov    0x8(%ebp),%eax
   13dd6:	8b 40 08             	mov    0x8(%eax),%eax
   13dd9:	8d 50 01             	lea    0x1(%eax),%edx
   13ddc:	8b 45 08             	mov    0x8(%ebp),%eax
   13ddf:	89 50 08             	mov    %edx,0x8(%eax)
}
   13de2:	90                   	nop
   13de3:	c9                   	leave  
   13de4:	c3                   	ret    

00013de5 <list_insert_last>:
/**
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node) {
   13de5:	f3 0f 1e fb          	endbr32 
   13de9:	55                   	push   %ebp
   13dea:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   13dec:	8b 45 08             	mov    0x8(%ebp),%eax
   13def:	8b 50 04             	mov    0x4(%eax),%edx
   13df2:	8b 45 0c             	mov    0xc(%ebp),%eax
   13df5:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   13df7:	8b 45 0c             	mov    0xc(%ebp),%eax
   13dfa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list)) {
   13e01:	ff 75 08             	pushl  0x8(%ebp)
   13e04:	e8 3d ff ff ff       	call   13d46 <list_is_empty>
   13e09:	83 c4 04             	add    $0x4,%esp
   13e0c:	85 c0                	test   %eax,%eax
   13e0e:	74 16                	je     13e26 <list_insert_last+0x41>
        list->first = list->last = node;
   13e10:	8b 45 08             	mov    0x8(%ebp),%eax
   13e13:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e16:	89 50 04             	mov    %edx,0x4(%eax)
   13e19:	8b 45 08             	mov    0x8(%ebp),%eax
   13e1c:	8b 50 04             	mov    0x4(%eax),%edx
   13e1f:	8b 45 08             	mov    0x8(%ebp),%eax
   13e22:	89 10                	mov    %edx,(%eax)
   13e24:	eb 15                	jmp    13e3b <list_insert_last+0x56>
    } else {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   13e26:	8b 45 08             	mov    0x8(%ebp),%eax
   13e29:	8b 40 04             	mov    0x4(%eax),%eax
   13e2c:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e2f:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   13e32:	8b 45 08             	mov    0x8(%ebp),%eax
   13e35:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e38:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   13e3b:	8b 45 08             	mov    0x8(%ebp),%eax
   13e3e:	8b 40 08             	mov    0x8(%eax),%eax
   13e41:	8d 50 01             	lea    0x1(%eax),%edx
   13e44:	8b 45 08             	mov    0x8(%ebp),%eax
   13e47:	89 50 08             	mov    %edx,0x8(%eax)
}
   13e4a:	90                   	nop
   13e4b:	c9                   	leave  
   13e4c:	c3                   	ret    

00013e4d <list_remove_first>:
/**
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
   13e4d:	f3 0f 1e fb          	endbr32 
   13e51:	55                   	push   %ebp
   13e52:	89 e5                	mov    %esp,%ebp
   13e54:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list)) {
   13e57:	ff 75 08             	pushl  0x8(%ebp)
   13e5a:	e8 e7 fe ff ff       	call   13d46 <list_is_empty>
   13e5f:	83 c4 04             	add    $0x4,%esp
   13e62:	85 c0                	test   %eax,%eax
   13e64:	74 07                	je     13e6d <list_remove_first+0x20>
        return (list_node_t*)0;
   13e66:	b8 00 00 00 00       	mov    $0x0,%eax
   13e6b:	eb 5a                	jmp    13ec7 <list_remove_first+0x7a>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   13e6d:	8b 45 08             	mov    0x8(%ebp),%eax
   13e70:	8b 00                	mov    (%eax),%eax
   13e72:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   13e75:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e78:	8b 50 04             	mov    0x4(%eax),%edx
   13e7b:	8b 45 08             	mov    0x8(%ebp),%eax
   13e7e:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   13e80:	8b 45 08             	mov    0x8(%ebp),%eax
   13e83:	8b 00                	mov    (%eax),%eax
   13e85:	85 c0                	test   %eax,%eax
   13e87:	75 0c                	jne    13e95 <list_remove_first+0x48>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   13e89:	8b 45 08             	mov    0x8(%ebp),%eax
   13e8c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13e93:	eb 0c                	jmp    13ea1 <list_remove_first+0x54>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   13e95:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13e98:	8b 40 04             	mov    0x4(%eax),%eax
   13e9b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   13ea1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13ea4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   13eaa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13ead:	8b 10                	mov    (%eax),%edx
   13eaf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13eb2:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   13eb5:	8b 45 08             	mov    0x8(%ebp),%eax
   13eb8:	8b 40 08             	mov    0x8(%eax),%eax
   13ebb:	8d 50 ff             	lea    -0x1(%eax),%edx
   13ebe:	8b 45 08             	mov    0x8(%ebp),%eax
   13ec1:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   13ec4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13ec7:	c9                   	leave  
   13ec8:	c3                   	ret    

00013ec9 <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   13ec9:	f3 0f 1e fb          	endbr32 
   13ecd:	55                   	push   %ebp
   13ece:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   13ed0:	8b 45 08             	mov    0x8(%ebp),%eax
   13ed3:	8b 00                	mov    (%eax),%eax
   13ed5:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13ed8:	75 0b                	jne    13ee5 <list_remove+0x1c>
        list->first = remove_node->next;
   13eda:	8b 45 0c             	mov    0xc(%ebp),%eax
   13edd:	8b 50 04             	mov    0x4(%eax),%edx
   13ee0:	8b 45 08             	mov    0x8(%ebp),%eax
   13ee3:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   13ee5:	8b 45 08             	mov    0x8(%ebp),%eax
   13ee8:	8b 40 04             	mov    0x4(%eax),%eax
   13eeb:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13eee:	75 0b                	jne    13efb <list_remove+0x32>
        list->last = remove_node->pre;
   13ef0:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ef3:	8b 10                	mov    (%eax),%edx
   13ef5:	8b 45 08             	mov    0x8(%ebp),%eax
   13ef8:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   13efb:	8b 45 0c             	mov    0xc(%ebp),%eax
   13efe:	8b 00                	mov    (%eax),%eax
   13f00:	85 c0                	test   %eax,%eax
   13f02:	74 0e                	je     13f12 <list_remove+0x49>
        remove_node->pre->next = remove_node->next;
   13f04:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f07:	8b 00                	mov    (%eax),%eax
   13f09:	8b 55 0c             	mov    0xc(%ebp),%edx
   13f0c:	8b 52 04             	mov    0x4(%edx),%edx
   13f0f:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   13f12:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f15:	8b 40 04             	mov    0x4(%eax),%eax
   13f18:	85 c0                	test   %eax,%eax
   13f1a:	74 0d                	je     13f29 <list_remove+0x60>
        remove_node->next->pre = remove_node->pre;
   13f1c:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f1f:	8b 40 04             	mov    0x4(%eax),%eax
   13f22:	8b 55 0c             	mov    0xc(%ebp),%edx
   13f25:	8b 12                	mov    (%edx),%edx
   13f27:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   13f29:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f2c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   13f33:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f36:	8b 50 04             	mov    0x4(%eax),%edx
   13f39:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f3c:	89 10                	mov    %edx,(%eax)
    --list->count;
   13f3e:	8b 45 08             	mov    0x8(%ebp),%eax
   13f41:	8b 40 08             	mov    0x8(%eax),%eax
   13f44:	8d 50 ff             	lea    -0x1(%eax),%edx
   13f47:	8b 45 08             	mov    0x8(%ebp),%eax
   13f4a:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   13f4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f50:	5d                   	pop    %ebp
   13f51:	c3                   	ret    

00013f52 <inb>:
{
   13f52:	55                   	push   %ebp
   13f53:	89 e5                	mov    %esp,%ebp
   13f55:	83 ec 14             	sub    $0x14,%esp
   13f58:	8b 45 08             	mov    0x8(%ebp),%eax
   13f5b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]"
   13f5f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13f63:	89 c2                	mov    %eax,%edx
   13f65:	ec                   	in     (%dx),%al
   13f66:	88 45 ff             	mov    %al,-0x1(%ebp)
    return res;
   13f69:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13f6d:	c9                   	leave  
   13f6e:	c3                   	ret    

00013f6f <outb>:
{
   13f6f:	55                   	push   %ebp
   13f70:	89 e5                	mov    %esp,%ebp
   13f72:	83 ec 08             	sub    $0x8,%esp
   13f75:	8b 45 08             	mov    0x8(%ebp),%eax
   13f78:	8b 55 0c             	mov    0xc(%ebp),%edx
   13f7b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   13f7f:	89 d0                	mov    %edx,%eax
   13f81:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   13f84:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13f88:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13f8c:	ee                   	out    %al,(%dx)
}
   13f8d:	90                   	nop
   13f8e:	c9                   	leave  
   13f8f:	c3                   	ret    

00013f90 <log_init>:

/**
 * @brief 初始化日志输出
 */
void log_init(void)
{
   13f90:	f3 0f 1e fb          	endbr32 
   13f94:	55                   	push   %ebp
   13f95:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00); // Disable all interrupts
   13f97:	6a 00                	push   $0x0
   13f99:	68 f9 03 00 00       	push   $0x3f9
   13f9e:	e8 cc ff ff ff       	call   13f6f <outb>
   13fa3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80); // Enable DLAB (set baud rate divisor)
   13fa6:	68 80 00 00 00       	push   $0x80
   13fab:	68 fb 03 00 00       	push   $0x3fb
   13fb0:	e8 ba ff ff ff       	call   13f6f <outb>
   13fb5:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x03); // Set divisor to 3 (lo byte) 38400 baud
   13fb8:	6a 03                	push   $0x3
   13fba:	68 f8 03 00 00       	push   $0x3f8
   13fbf:	e8 ab ff ff ff       	call   13f6f <outb>
   13fc4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00); //                  (hi byte)
   13fc7:	6a 00                	push   $0x0
   13fc9:	68 f9 03 00 00       	push   $0x3f9
   13fce:	e8 9c ff ff ff       	call   13f6f <outb>
   13fd3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03); // 8 bits, no parity, one stop bit
   13fd6:	6a 03                	push   $0x3
   13fd8:	68 fb 03 00 00       	push   $0x3fb
   13fdd:	e8 8d ff ff ff       	call   13f6f <outb>
   13fe2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xC7); // Enable FIFO, clear them, with 14-byte threshold
   13fe5:	68 c7 00 00 00       	push   $0xc7
   13fea:	68 fa 03 00 00       	push   $0x3fa
   13fef:	e8 7b ff ff ff       	call   13f6f <outb>
   13ff4:	83 c4 08             	add    $0x8,%esp

    // If serial is not faulty set it in normal operation mode
    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)
    outb(COM1_PORT + 4, 0x0F);
   13ff7:	6a 0f                	push   $0xf
   13ff9:	68 fc 03 00 00       	push   $0x3fc
   13ffe:	e8 6c ff ff ff       	call   13f6f <outb>
   14003:	83 c4 08             	add    $0x8,%esp
}
   14006:	90                   	nop
   14007:	c9                   	leave  
   14008:	c3                   	ret    

00014009 <log_printf>:

/**
 * @brief 实现了内核态输出
 */
void log_printf(const char * fmt, ...) {
   14009:	f3 0f 1e fb          	endbr32 
   1400d:	55                   	push   %ebp
   1400e:	89 e5                	mov    %esp,%ebp
   14010:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   14016:	83 ec 04             	sub    $0x4,%esp
   14019:	68 80 00 00 00       	push   $0x80
   1401e:	6a 00                	push   $0x0
   14020:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   14026:	50                   	push   %eax
   14027:	e8 03 f9 ff ff       	call   1392f <kernel_memset>
   1402c:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   1402f:	8d 45 0c             	lea    0xc(%ebp),%eax
   14032:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   14038:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1403e:	83 ec 04             	sub    $0x4,%esp
   14041:	50                   	push   %eax
   14042:	ff 75 08             	pushl  0x8(%ebp)
   14045:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1404b:	50                   	push   %eax
   1404c:	e8 85 f9 ff ff       	call   139d6 <kernel_vsprintf>
   14051:	83 c4 10             	add    $0x10,%esp

    // 显示，如果发送速度太慢，会造成这里关中断太长时间
    // 所以，这里这样做不是好办法
    // irq_state_t state = irq_enter_protection();
    // 使用互斥锁
    mutex_lock(&mutex);
   14054:	83 ec 0c             	sub    $0xc,%esp
   14057:	68 0c 00 02 00       	push   $0x2000c
   1405c:	e8 ea f1 ff ff       	call   1324b <mutex_lock>
   14061:	83 c4 10             	add    $0x10,%esp
    
    const char * p = str_buf;    
   14064:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1406a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   1406d:	eb 3b                	jmp    140aa <log_printf+0xa1>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1406f:	90                   	nop
   14070:	83 ec 0c             	sub    $0xc,%esp
   14073:	68 fd 03 00 00       	push   $0x3fd
   14078:	e8 d5 fe ff ff       	call   13f52 <inb>
   1407d:	83 c4 10             	add    $0x10,%esp
   14080:	0f b6 c0             	movzbl %al,%eax
   14083:	83 e0 40             	and    $0x40,%eax
   14086:	85 c0                	test   %eax,%eax
   14088:	74 e6                	je     14070 <log_printf+0x67>
        outb(COM1_PORT, *p++);
   1408a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1408d:	8d 50 01             	lea    0x1(%eax),%edx
   14090:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14093:	0f b6 00             	movzbl (%eax),%eax
   14096:	0f b6 c0             	movzbl %al,%eax
   14099:	83 ec 08             	sub    $0x8,%esp
   1409c:	50                   	push   %eax
   1409d:	68 f8 03 00 00       	push   $0x3f8
   140a2:	e8 c8 fe ff ff       	call   13f6f <outb>
   140a7:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   140aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140ad:	0f b6 00             	movzbl (%eax),%eax
   140b0:	84 c0                	test   %al,%al
   140b2:	75 bb                	jne    1406f <log_printf+0x66>
    }

    outb(COM1_PORT, '\r');
   140b4:	83 ec 08             	sub    $0x8,%esp
   140b7:	6a 0d                	push   $0xd
   140b9:	68 f8 03 00 00       	push   $0x3f8
   140be:	e8 ac fe ff ff       	call   13f6f <outb>
   140c3:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   140c6:	83 ec 08             	sub    $0x8,%esp
   140c9:	6a 0a                	push   $0xa
   140cb:	68 f8 03 00 00       	push   $0x3f8
   140d0:	e8 9a fe ff ff       	call   13f6f <outb>
   140d5:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&mutex);
   140d8:	83 ec 0c             	sub    $0xc,%esp
   140db:	68 0c 00 02 00       	push   $0x2000c
   140e0:	e8 fe f1 ff ff       	call   132e3 <mutex_unlock>
   140e5:	83 c4 10             	add    $0x10,%esp
}
   140e8:	90                   	nop
   140e9:	c9                   	leave  
   140ea:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
    jmp first_task_main
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
 * @Date: 2023-05-06 09:34:29
 * @LastEditTime: 2023-05-26 16:53:47
 */
#include "applib/lib_syscall.h"

int first_task_main (void) {
80000010:	f3 0f 1e fb          	endbr32 
80000014:	55                   	push   %ebp
80000015:	89 e5                	mov    %esp,%ebp
80000017:	83 ec 28             	sub    $0x28,%esp
    int count = 3;
8000001a:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)

    int pid = getpid();
80000021:	e8 56 01 00 00       	call   8000017c <getpid>
80000026:	89 45 f0             	mov    %eax,-0x10(%ebp)
    print_msg("first task id=%d", pid);
80000029:	83 ec 08             	sub    $0x8,%esp
8000002c:	ff 75 f0             	pushl  -0x10(%ebp)
8000002f:	68 5c 4c 01 00       	push   $0x14c5c
80000034:	e8 62 01 00 00       	call   8000019b <print_msg>
80000039:	83 c4 10             	add    $0x10,%esp
    
    pid = fork();
8000003c:	e8 85 01 00 00       	call   800001c6 <fork>
80000041:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid < 0) {
80000044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000048:	79 14                	jns    8000005e <first_task_main+0x4e>
        print_msg("create child proc failed.", 0);
8000004a:	83 ec 08             	sub    $0x8,%esp
8000004d:	6a 00                	push   $0x0
8000004f:	68 6d 4c 01 00       	push   $0x14c6d
80000054:	e8 42 01 00 00       	call   8000019b <print_msg>
80000059:	83 c4 10             	add    $0x10,%esp
8000005c:	eb 73                	jmp    800000d1 <first_task_main+0xc1>
    } else if (pid == 0) {
8000005e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000062:	75 47                	jne    800000ab <first_task_main+0x9b>
        print_msg("child: %d", count);
80000064:	83 ec 08             	sub    $0x8,%esp
80000067:	ff 75 f4             	pushl  -0xc(%ebp)
8000006a:	68 87 4c 01 00       	push   $0x14c87
8000006f:	e8 27 01 00 00       	call   8000019b <print_msg>
80000074:	83 c4 10             	add    $0x10,%esp

        char * argv[] = {"arg0", "arg1", "arg2", "arg3"};
80000077:	c7 45 e0 91 4c 01 00 	movl   $0x14c91,-0x20(%ebp)
8000007e:	c7 45 e4 96 4c 01 00 	movl   $0x14c96,-0x1c(%ebp)
80000085:	c7 45 e8 9b 4c 01 00 	movl   $0x14c9b,-0x18(%ebp)
8000008c:	c7 45 ec a0 4c 01 00 	movl   $0x14ca0,-0x14(%ebp)
        execve("/shell.elf", argv, (char **)0);
80000093:	83 ec 04             	sub    $0x4,%esp
80000096:	6a 00                	push   $0x0
80000098:	8d 45 e0             	lea    -0x20(%ebp),%eax
8000009b:	50                   	push   %eax
8000009c:	68 a5 4c 01 00       	push   $0x14ca5
800000a1:	e8 40 01 00 00       	call   800001e6 <execve>
800000a6:	83 c4 10             	add    $0x10,%esp
800000a9:	eb 26                	jmp    800000d1 <first_task_main+0xc1>
    } else {
        print_msg("child task id=%d", pid);
800000ab:	83 ec 08             	sub    $0x8,%esp
800000ae:	ff 75 f0             	pushl  -0x10(%ebp)
800000b1:	68 b0 4c 01 00       	push   $0x14cb0
800000b6:	e8 e0 00 00 00       	call   8000019b <print_msg>
800000bb:	83 c4 10             	add    $0x10,%esp
        print_msg("parent: %d", count);
800000be:	83 ec 08             	sub    $0x8,%esp
800000c1:	ff 75 f4             	pushl  -0xc(%ebp)
800000c4:	68 c1 4c 01 00       	push   $0x14cc1
800000c9:	e8 cd 00 00 00       	call   8000019b <print_msg>
800000ce:	83 c4 10             	add    $0x10,%esp
    }

    pid = getpid();
800000d1:	e8 a6 00 00 00       	call   8000017c <getpid>
800000d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (;;) {
        print_msg("task id = %d", pid);
800000d9:	83 ec 08             	sub    $0x8,%esp
800000dc:	ff 75 f0             	pushl  -0x10(%ebp)
800000df:	68 cc 4c 01 00       	push   $0x14ccc
800000e4:	e8 b2 00 00 00       	call   8000019b <print_msg>
800000e9:	83 c4 10             	add    $0x10,%esp
        msleep(1000);
800000ec:	83 ec 0c             	sub    $0xc,%esp
800000ef:	68 e8 03 00 00       	push   $0x3e8
800000f4:	e8 51 00 00 00       	call   8000014a <msleep>
800000f9:	83 c4 10             	add    $0x10,%esp
        print_msg("task id = %d", pid);
800000fc:	eb db                	jmp    800000d9 <first_task_main+0xc9>

800000fe <sys_call>:
 * 通用系统调用接口，用于执行系统调用
 * @param {syscall_args_t *} args 系统调用参数
 * @return {*} 返回执行结果
 */
static inline int sys_call(syscall_args_t *args)
{
800000fe:	55                   	push   %ebp
800000ff:	89 e5                	mov    %esp,%ebp
80000101:	57                   	push   %edi
80000102:	56                   	push   %esi
80000103:	53                   	push   %ebx
80000104:	83 ec 10             	sub    $0x10,%esp

    // 使用调用门的方式进行系统调用
    // 偏移量为0; SELECTOR_SYSCALL是一个常量，它的值为0x40，表示选择了内核的syscall段,
    // | 0是为了清除低三位，保持段选择器的格式正确。
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};
80000107:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
8000010e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n" // 调用系统调用门
        : "=a"(ret)             // 将返回值存入ret中
        // 将参数和系统调用门的地址传递给汇编语句
        : [arg3] "r"(args->arg3),
80000115:	8b 45 08             	mov    0x8(%ebp),%eax
80000118:	8b 40 10             	mov    0x10(%eax),%eax
          [arg2] "r"(args->arg2),
8000011b:	8b 55 08             	mov    0x8(%ebp),%edx
8000011e:	8b 52 0c             	mov    0xc(%edx),%edx
          [arg1] "r"(args->arg1),
80000121:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000124:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0),
80000127:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000012a:	8b 5b 04             	mov    0x4(%ebx),%ebx
          [id] "r"(args->id),
8000012d:	8b 75 08             	mov    0x8(%ebp),%esi
80000130:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000132:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000135:	50                   	push   %eax
80000136:	52                   	push   %edx
80000137:	51                   	push   %ecx
80000138:	53                   	push   %ebx
80000139:	56                   	push   %esi
8000013a:	ff 1f                	lcall  *(%edi)
8000013c:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret; // 返回执行结果
8000013f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000142:	83 c4 10             	add    $0x10,%esp
80000145:	5b                   	pop    %ebx
80000146:	5e                   	pop    %esi
80000147:	5f                   	pop    %edi
80000148:	5d                   	pop    %ebp
80000149:	c3                   	ret    

8000014a <msleep>:
 * 休眠函数,调用系统的 sys_sleep函数
 * @param ms 休眠时间，单位为毫秒
 * @return 返回休眠的剩余时间，单位为毫秒
 */
int msleep(int ms)
{
8000014a:	f3 0f 1e fb          	endbr32 
8000014e:	55                   	push   %ebp
8000014f:	89 e5                	mov    %esp,%ebp
80000151:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
80000154:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000158:	7f 07                	jg     80000161 <msleep+0x17>
    {
        return 0;
8000015a:	b8 00 00 00 00       	mov    $0x0,%eax
8000015f:	eb 19                	jmp    8000017a <msleep+0x30>
    }

    syscall_args_t args;    // 创建一个系统调用参数结构体
    args.id = SYS_msleep;   // 设置系统调用号为SYS_msleep
80000161:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;         // 设置休眠时间为第一个参数
80000168:	8b 45 08             	mov    0x8(%ebp),%eax
8000016b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args); // 调用sys_call函数，执行系统调用
8000016e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000171:	50                   	push   %eax
80000172:	e8 87 ff ff ff       	call   800000fe <sys_call>
80000177:	83 c4 04             	add    $0x4,%esp
}
8000017a:	c9                   	leave  
8000017b:	c3                   	ret    

8000017c <getpid>:
/**
 * 获取当前进程的pid
 * @return {*}
 */
int getpid(void)
{
8000017c:	f3 0f 1e fb          	endbr32 
80000180:	55                   	push   %ebp
80000181:	89 e5                	mov    %esp,%ebp
80000183:	83 ec 20             	sub    $0x20,%esp

    syscall_args_t args;    // 创建一个系统调用参数结构体
    args.id = SYS_getpid;   // 设置系统调用号为SYS_msleep
80000186:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args); // 调用sys_call函数，执行系统调用
8000018d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000190:	50                   	push   %eax
80000191:	e8 68 ff ff ff       	call   800000fe <sys_call>
80000196:	83 c4 04             	add    $0x4,%esp
}
80000199:	c9                   	leave  
8000019a:	c3                   	ret    

8000019b <print_msg>:

// 临时使用的打印函数，只允许传递两个参数 后续使用文件系统
int print_msg(char * fmt, int arg) {
8000019b:	f3 0f 1e fb          	endbr32 
8000019f:	55                   	push   %ebp
800001a0:	89 e5                	mov    %esp,%ebp
800001a2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
800001a5:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
800001ac:	8b 45 08             	mov    0x8(%ebp),%eax
800001af:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800001b2:	8b 45 0c             	mov    0xc(%ebp),%eax
800001b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
800001b8:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001bb:	50                   	push   %eax
800001bc:	e8 3d ff ff ff       	call   800000fe <sys_call>
800001c1:	83 c4 04             	add    $0x4,%esp
}
800001c4:	c9                   	leave  
800001c5:	c3                   	ret    

800001c6 <fork>:
int fork()
{
800001c6:	f3 0f 1e fb          	endbr32 
800001ca:	55                   	push   %ebp
800001cb:	89 e5                	mov    %esp,%ebp
800001cd:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;    
800001d0:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    sys_call(&args);
800001d7:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001da:	50                   	push   %eax
800001db:	e8 1e ff ff ff       	call   800000fe <sys_call>
800001e0:	83 c4 04             	add    $0x4,%esp
}
800001e3:	90                   	nop
800001e4:	c9                   	leave  
800001e5:	c3                   	ret    

800001e6 <execve>:
 * @param {char} *name 要执行的程序的路径名。
 * @param {char} *  要执行的程序的命令行参数
 * @param {char} *  要执行的程序的环境变量
 * @return {*}
 */
int execve(const char *filename, char * const *argv, char * const *env) {
800001e6:	f3 0f 1e fb          	endbr32 
800001ea:	55                   	push   %ebp
800001eb:	89 e5                	mov    %esp,%ebp
800001ed:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execv;
800001f0:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)filename;
800001f7:	8b 45 08             	mov    0x8(%ebp),%eax
800001fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001fd:	8b 45 0c             	mov    0xc(%ebp),%eax
80000200:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
80000203:	8b 45 10             	mov    0x10(%ebp),%eax
80000206:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000209:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000020c:	50                   	push   %eax
8000020d:	e8 ec fe ff ff       	call   800000fe <sys_call>
80000212:	83 c4 04             	add    $0x4,%esp
}
80000215:	c9                   	leave  
80000216:	c3                   	ret    

80000217 <yield>:

int yield (void) {
80000217:	f3 0f 1e fb          	endbr32 
8000021b:	55                   	push   %ebp
8000021c:	89 e5                	mov    %esp,%ebp
8000021e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
80000221:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
80000228:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000022b:	50                   	push   %eax
8000022c:	e8 cd fe ff ff       	call   800000fe <sys_call>
80000231:	83 c4 04             	add    $0x4,%esp
}
80000234:	c9                   	leave  
80000235:	c3                   	ret    

80000236 <open>:
int open(const char *name, int flags, ...) {
80000236:	f3 0f 1e fb          	endbr32 
8000023a:	55                   	push   %ebp
8000023b:	89 e5                	mov    %esp,%ebp
8000023d:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
80000240:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
80000247:	8b 45 08             	mov    0x8(%ebp),%eax
8000024a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
8000024d:	8b 45 0c             	mov    0xc(%ebp),%eax
80000250:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000253:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000256:	50                   	push   %eax
80000257:	e8 a2 fe ff ff       	call   800000fe <sys_call>
8000025c:	83 c4 04             	add    $0x4,%esp
}
8000025f:	c9                   	leave  
80000260:	c3                   	ret    

80000261 <read>:

int read(int file, char *ptr, int len) {
80000261:	f3 0f 1e fb          	endbr32 
80000265:	55                   	push   %ebp
80000266:	89 e5                	mov    %esp,%ebp
80000268:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
8000026b:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
80000272:	8b 45 08             	mov    0x8(%ebp),%eax
80000275:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000278:	8b 45 0c             	mov    0xc(%ebp),%eax
8000027b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000027e:	8b 45 10             	mov    0x10(%ebp),%eax
80000281:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000284:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000287:	50                   	push   %eax
80000288:	e8 71 fe ff ff       	call   800000fe <sys_call>
8000028d:	83 c4 04             	add    $0x4,%esp
}
80000290:	c9                   	leave  
80000291:	c3                   	ret    

80000292 <write>:

int write(int file, char *ptr, int len) {
80000292:	f3 0f 1e fb          	endbr32 
80000296:	55                   	push   %ebp
80000297:	89 e5                	mov    %esp,%ebp
80000299:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
8000029c:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
800002a3:	8b 45 08             	mov    0x8(%ebp),%eax
800002a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800002a9:	8b 45 0c             	mov    0xc(%ebp),%eax
800002ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
800002af:	8b 45 10             	mov    0x10(%ebp),%eax
800002b2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002b5:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002b8:	50                   	push   %eax
800002b9:	e8 40 fe ff ff       	call   800000fe <sys_call>
800002be:	83 c4 04             	add    $0x4,%esp
}
800002c1:	c9                   	leave  
800002c2:	c3                   	ret    

800002c3 <close>:

int close(int file) {
800002c3:	f3 0f 1e fb          	endbr32 
800002c7:	55                   	push   %ebp
800002c8:	89 e5                	mov    %esp,%ebp
800002ca:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
800002cd:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
800002d4:	8b 45 08             	mov    0x8(%ebp),%eax
800002d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002da:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002dd:	50                   	push   %eax
800002de:	e8 1b fe ff ff       	call   800000fe <sys_call>
800002e3:	83 c4 04             	add    $0x4,%esp
}
800002e6:	c9                   	leave  
800002e7:	c3                   	ret    

800002e8 <lseek>:

int lseek(int file, int ptr, int dir) {
800002e8:	f3 0f 1e fb          	endbr32 
800002ec:	55                   	push   %ebp
800002ed:	89 e5                	mov    %esp,%ebp
800002ef:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002f2:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
800002f9:	8b 45 08             	mov    0x8(%ebp),%eax
800002fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800002ff:	8b 45 0c             	mov    0xc(%ebp),%eax
80000302:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
80000305:	8b 45 10             	mov    0x10(%ebp),%eax
80000308:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
8000030b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000030e:	50                   	push   %eax
8000030f:	e8 ea fd ff ff       	call   800000fe <sys_call>
80000314:	83 c4 04             	add    $0x4,%esp
}
80000317:	c9                   	leave  
80000318:	c3                   	ret    

80000319 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file) {
80000319:	f3 0f 1e fb          	endbr32 
8000031d:	55                   	push   %ebp
8000031e:	89 e5                	mov    %esp,%ebp
80000320:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
80000323:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
8000032a:	8b 45 08             	mov    0x8(%ebp),%eax
8000032d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000330:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000333:	50                   	push   %eax
80000334:	e8 c5 fd ff ff       	call   800000fe <sys_call>
80000339:	83 c4 04             	add    $0x4,%esp
}
8000033c:	c9                   	leave  
8000033d:	c3                   	ret    

8000033e <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st) {
8000033e:	f3 0f 1e fb          	endbr32 
80000342:	55                   	push   %ebp
80000343:	89 e5                	mov    %esp,%ebp
80000345:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
80000348:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
8000034f:	8b 45 08             	mov    0x8(%ebp),%eax
80000352:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
80000355:	8b 45 0c             	mov    0xc(%ebp),%eax
80000358:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
8000035b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000035e:	50                   	push   %eax
8000035f:	e8 9a fd ff ff       	call   800000fe <sys_call>
80000364:	83 c4 04             	add    $0x4,%esp
}
80000367:	c9                   	leave  
80000368:	c3                   	ret    

80000369 <sbrk>:


void * sbrk(ptrdiff_t incr) {
80000369:	f3 0f 1e fb          	endbr32 
8000036d:	55                   	push   %ebp
8000036e:	89 e5                	mov    %esp,%ebp
80000370:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000373:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
8000037a:	8b 45 08             	mov    0x8(%ebp),%eax
8000037d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000380:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000383:	50                   	push   %eax
80000384:	e8 75 fd ff ff       	call   800000fe <sys_call>
80000389:	83 c4 04             	add    $0x4,%esp
}
8000038c:	c9                   	leave  
8000038d:	c3                   	ret    
