In archive /home/alvin/workspace/LukeyOS/LukeyOS/start/build/source/applib/libapp.a:

crt0.S.o:     file format elf32-i386
rw-r--r-- 0/0   1468 Jan  1 08:00 1970 crt0.S.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000010  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  3 .debug_line   00000073  00000000  00000000  00000044  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  4 .debug_info   00000026  00000000  00000000  000000b7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 00000014  00000000  00000000  000000dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_aranges 00000020  00000000  00000000  000000f8  2**3
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  7 .debug_str    0000008d  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 g       .text	00000000 _start
00000000         *UND*	00000000 cstart



Disassembly of section .text:

00000000 <_start>:
    .global _start
    .extern cstart
_start:
    # 设置各数据段的选择子,由于应用任务都是用tss恢复的，所以
    # 实际不必设置，但为安全起见，还是设置一下
    mov %ss, %ax
   0:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
   3:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   5:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   7:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   9:	8e e8                	mov    %eax,%gs

    # 进入主函数执行，注意此时栈没有变，参数仍然在其中
    # 所以调用cstart时，仍然可以看到参数
    jmp cstart
   b:	e9 fc ff ff ff       	jmp    c <_start+0xc>
			c: R_386_PC32	cstart

cstart.c.o:     file format elf32-i386
rw-r--r-- 0/0   8052 Jan  1 08:00 1970 cstart.c.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000003c  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000070  2**0
                  ALLOC
  3 .debug_info   00000a2a  00000000  00000000  00000070  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 00000209  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00000020  00000000  00000000  00000ca3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  6 .debug_line   000001eb  00000000  00000000  00000cc3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  7 .debug_str    0000061b  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .comment      0000002c  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY
  9 .note.GNU-stack 00000000  00000000  00000000  000014f5  2**0
                  CONTENTS, READONLY
 10 .note.gnu.property 0000001c  00000000  00000000  000014f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_frame  00000034  00000000  00000000  00001514  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .note.GNU-stack	00000000 .note.GNU-stack
00000000 l    d  .note.gnu.property	00000000 .note.gnu.property
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 g     F .text	0000003c cstart
00000000         *UND*	00000000 __bss_start__
00000000         *UND*	00000000 __bss_end__
00000000         *UND*	00000000 main



Disassembly of section .text:

00000000 <cstart>:
extern uint8_t __bss_start__[], __bss_end__[];

/**
 * @brief 应用的初始化，C部分
 */
void cstart (int argc, char ** argv) {
   0:	f3 0f 1e fb          	endbr32 
   4:	55                   	push   %ebp
   5:	89 e5                	mov    %esp,%ebp
   7:	83 ec 18             	sub    $0x18,%esp
    // 清空bss区，注意这是必须的！！！
    // 像newlib库中有些代码就依赖于此，未清空时数据未知，导致调用sbrk时申请很大内存空间
    uint8_t * start = __bss_start__;
   a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			d: R_386_32	__bss_start__
    while (start < __bss_end__) {
  11:	eb 0c                	jmp    1f <cstart+0x1f>
        *start++ = 0;
  13:	8b 45 f4             	mov    -0xc(%ebp),%eax
  16:	8d 50 01             	lea    0x1(%eax),%edx
  19:	89 55 f4             	mov    %edx,-0xc(%ebp)
  1c:	c6 00 00             	movb   $0x0,(%eax)
    while (start < __bss_end__) {
  1f:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
			22: R_386_32	__bss_end__
  26:	72 eb                	jb     13 <cstart+0x13>
    }
    // 进入应用程序运行
    main(argc, argv);
  28:	83 ec 08             	sub    $0x8,%esp
  2b:	ff 75 0c             	pushl  0xc(%ebp)
  2e:	ff 75 08             	pushl  0x8(%ebp)
  31:	e8 fc ff ff ff       	call   32 <cstart+0x32>
			32: R_386_PC32	main
  36:	83 c4 10             	add    $0x10,%esp
  39:	90                   	nop
  3a:	c9                   	leave  
  3b:	c3                   	ret    

lib_syscall.c.o:     file format elf32-i386
rw-r--r-- 0/0  12640 Jan  1 08:00 1970 lib_syscall.c.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002c4  2**0
                  ALLOC
  3 .debug_info   00001017  00000000  00000000  000002c4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 00000249  00000000  00000000  000012db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00000020  00000000  00000000  00001524  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  6 .debug_line   00000325  00000000  00000000  00001544  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  7 .debug_str    000007fd  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .comment      0000002c  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY
  9 .note.GNU-stack 00000000  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY
 10 .note.gnu.property 0000001c  00000000  00000000  00002094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_frame  00000200  00000000  00000000  000020b0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 lib_syscall.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l     F .text	0000004c sys_call
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .note.GNU-stack	00000000 .note.GNU-stack
00000000 l    d  .note.gnu.property	00000000 .note.gnu.property
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
0000004c g     F .text	00000032 msleep
0000007e g     F .text	0000001f getpid
0000009d g     F .text	0000002b print_msg
000000c8 g     F .text	00000020 fork
000000e8 g     F .text	00000031 execve
00000119 g     F .text	0000001f yield
00000138 g     F .text	0000002b open
00000163 g     F .text	00000031 read
00000194 g     F .text	00000031 write
000001c5 g     F .text	00000025 close
000001ea g     F .text	00000031 lseek
0000021b g     F .text	00000025 isatty
00000240 g     F .text	0000002b fstat
0000026b g     F .text	00000025 sbrk



Disassembly of section .text:

00000000 <sys_call>:
 * 通用系统调用接口，用于执行系统调用
 * @param {syscall_args_t *} args 系统调用参数
 * @return {*} 返回执行结果
 */
static inline int sys_call(syscall_args_t *args)
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	57                   	push   %edi
   4:	56                   	push   %esi
   5:	53                   	push   %ebx
   6:	83 ec 10             	sub    $0x10,%esp

    // 使用调用门的方式进行系统调用
    // 偏移量为0; SELECTOR_SYSCALL是一个常量，它的值为0x40，表示选择了内核的syscall段,
    // | 0是为了清除低三位，保持段选择器的格式正确。
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};
   9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n" // 调用系统调用门
        : "=a"(ret)             // 将返回值存入ret中
        // 将参数和系统调用门的地址传递给汇编语句
        : [arg3] "r"(args->arg3),
  17:	8b 45 08             	mov    0x8(%ebp),%eax
  1a:	8b 40 10             	mov    0x10(%eax),%eax
          [arg2] "r"(args->arg2),
  1d:	8b 55 08             	mov    0x8(%ebp),%edx
  20:	8b 52 0c             	mov    0xc(%edx),%edx
          [arg1] "r"(args->arg1),
  23:	8b 4d 08             	mov    0x8(%ebp),%ecx
  26:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0),
  29:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2c:	8b 5b 04             	mov    0x4(%ebx),%ebx
          [id] "r"(args->id),
  2f:	8b 75 08             	mov    0x8(%ebp),%esi
  32:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
  34:	8d 7d e8             	lea    -0x18(%ebp),%edi
  37:	50                   	push   %eax
  38:	52                   	push   %edx
  39:	51                   	push   %ecx
  3a:	53                   	push   %ebx
  3b:	56                   	push   %esi
  3c:	ff 1f                	lcall  *(%edi)
  3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret; // 返回执行结果
  41:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  44:	83 c4 10             	add    $0x10,%esp
  47:	5b                   	pop    %ebx
  48:	5e                   	pop    %esi
  49:	5f                   	pop    %edi
  4a:	5d                   	pop    %ebp
  4b:	c3                   	ret    

0000004c <msleep>:
 * 休眠函数,调用系统的 sys_sleep函数
 * @param ms 休眠时间，单位为毫秒
 * @return 返回休眠的剩余时间，单位为毫秒
 */
int msleep(int ms)
{
  4c:	f3 0f 1e fb          	endbr32 
  50:	55                   	push   %ebp
  51:	89 e5                	mov    %esp,%ebp
  53:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
  56:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  5a:	7f 07                	jg     63 <msleep+0x17>
    {
        return 0;
  5c:	b8 00 00 00 00       	mov    $0x0,%eax
  61:	eb 19                	jmp    7c <msleep+0x30>
    }

    syscall_args_t args;    // 创建一个系统调用参数结构体
    args.id = SYS_msleep;   // 设置系统调用号为SYS_msleep
  63:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;         // 设置休眠时间为第一个参数
  6a:	8b 45 08             	mov    0x8(%ebp),%eax
  6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args); // 调用sys_call函数，执行系统调用
  70:	8d 45 ec             	lea    -0x14(%ebp),%eax
  73:	50                   	push   %eax
  74:	e8 87 ff ff ff       	call   0 <sys_call>
  79:	83 c4 04             	add    $0x4,%esp
}
  7c:	c9                   	leave  
  7d:	c3                   	ret    

0000007e <getpid>:
/**
 * 获取当前进程的pid
 * @return {*}
 */
int getpid(void)
{
  7e:	f3 0f 1e fb          	endbr32 
  82:	55                   	push   %ebp
  83:	89 e5                	mov    %esp,%ebp
  85:	83 ec 20             	sub    $0x20,%esp

    syscall_args_t args;    // 创建一个系统调用参数结构体
    args.id = SYS_getpid;   // 设置系统调用号为SYS_msleep
  88:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args); // 调用sys_call函数，执行系统调用
  8f:	8d 45 ec             	lea    -0x14(%ebp),%eax
  92:	50                   	push   %eax
  93:	e8 68 ff ff ff       	call   0 <sys_call>
  98:	83 c4 04             	add    $0x4,%esp
}
  9b:	c9                   	leave  
  9c:	c3                   	ret    

0000009d <print_msg>:

// 临时使用的打印函数，只允许传递两个参数 后续使用文件系统
int print_msg(char * fmt, int arg) {
  9d:	f3 0f 1e fb          	endbr32 
  a1:	55                   	push   %ebp
  a2:	89 e5                	mov    %esp,%ebp
  a4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
  a7:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
  ae:	8b 45 08             	mov    0x8(%ebp),%eax
  b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
  b4:	8b 45 0c             	mov    0xc(%ebp),%eax
  b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
  ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
  bd:	50                   	push   %eax
  be:	e8 3d ff ff ff       	call   0 <sys_call>
  c3:	83 c4 04             	add    $0x4,%esp
}
  c6:	c9                   	leave  
  c7:	c3                   	ret    

000000c8 <fork>:
int fork()
{
  c8:	f3 0f 1e fb          	endbr32 
  cc:	55                   	push   %ebp
  cd:	89 e5                	mov    %esp,%ebp
  cf:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;    
  d2:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    sys_call(&args);
  d9:	8d 45 ec             	lea    -0x14(%ebp),%eax
  dc:	50                   	push   %eax
  dd:	e8 1e ff ff ff       	call   0 <sys_call>
  e2:	83 c4 04             	add    $0x4,%esp
}
  e5:	90                   	nop
  e6:	c9                   	leave  
  e7:	c3                   	ret    

000000e8 <execve>:
 * @param {char} *name 要执行的程序的路径名。
 * @param {char} *  要执行的程序的命令行参数
 * @param {char} *  要执行的程序的环境变量
 * @return {*}
 */
int execve(const char *filename, char * const *argv, char * const *env) {
  e8:	f3 0f 1e fb          	endbr32 
  ec:	55                   	push   %ebp
  ed:	89 e5                	mov    %esp,%ebp
  ef:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execv;
  f2:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)filename;
  f9:	8b 45 08             	mov    0x8(%ebp),%eax
  fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
  ff:	8b 45 0c             	mov    0xc(%ebp),%eax
 102:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
 105:	8b 45 10             	mov    0x10(%ebp),%eax
 108:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 10b:	8d 45 ec             	lea    -0x14(%ebp),%eax
 10e:	50                   	push   %eax
 10f:	e8 ec fe ff ff       	call   0 <sys_call>
 114:	83 c4 04             	add    $0x4,%esp
}
 117:	c9                   	leave  
 118:	c3                   	ret    

00000119 <yield>:

int yield (void) {
 119:	f3 0f 1e fb          	endbr32 
 11d:	55                   	push   %ebp
 11e:	89 e5                	mov    %esp,%ebp
 120:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
 123:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
 12a:	8d 45 ec             	lea    -0x14(%ebp),%eax
 12d:	50                   	push   %eax
 12e:	e8 cd fe ff ff       	call   0 <sys_call>
 133:	83 c4 04             	add    $0x4,%esp
}
 136:	c9                   	leave  
 137:	c3                   	ret    

00000138 <open>:
int open(const char *name, int flags, ...) {
 138:	f3 0f 1e fb          	endbr32 
 13c:	55                   	push   %ebp
 13d:	89 e5                	mov    %esp,%ebp
 13f:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
 142:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
 149:	8b 45 08             	mov    0x8(%ebp),%eax
 14c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
 14f:	8b 45 0c             	mov    0xc(%ebp),%eax
 152:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
 155:	8d 45 ec             	lea    -0x14(%ebp),%eax
 158:	50                   	push   %eax
 159:	e8 a2 fe ff ff       	call   0 <sys_call>
 15e:	83 c4 04             	add    $0x4,%esp
}
 161:	c9                   	leave  
 162:	c3                   	ret    

00000163 <read>:

int read(int file, char *ptr, int len) {
 163:	f3 0f 1e fb          	endbr32 
 167:	55                   	push   %ebp
 168:	89 e5                	mov    %esp,%ebp
 16a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
 16d:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
 174:	8b 45 08             	mov    0x8(%ebp),%eax
 177:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
 17a:	8b 45 0c             	mov    0xc(%ebp),%eax
 17d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
 180:	8b 45 10             	mov    0x10(%ebp),%eax
 183:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 186:	8d 45 ec             	lea    -0x14(%ebp),%eax
 189:	50                   	push   %eax
 18a:	e8 71 fe ff ff       	call   0 <sys_call>
 18f:	83 c4 04             	add    $0x4,%esp
}
 192:	c9                   	leave  
 193:	c3                   	ret    

00000194 <write>:

int write(int file, char *ptr, int len) {
 194:	f3 0f 1e fb          	endbr32 
 198:	55                   	push   %ebp
 199:	89 e5                	mov    %esp,%ebp
 19b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
 19e:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
 1a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
 1ab:	8b 45 0c             	mov    0xc(%ebp),%eax
 1ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
 1b1:	8b 45 10             	mov    0x10(%ebp),%eax
 1b4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 1b7:	8d 45 ec             	lea    -0x14(%ebp),%eax
 1ba:	50                   	push   %eax
 1bb:	e8 40 fe ff ff       	call   0 <sys_call>
 1c0:	83 c4 04             	add    $0x4,%esp
}
 1c3:	c9                   	leave  
 1c4:	c3                   	ret    

000001c5 <close>:

int close(int file) {
 1c5:	f3 0f 1e fb          	endbr32 
 1c9:	55                   	push   %ebp
 1ca:	89 e5                	mov    %esp,%ebp
 1cc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
 1cf:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
 1d6:	8b 45 08             	mov    0x8(%ebp),%eax
 1d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 1dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
 1df:	50                   	push   %eax
 1e0:	e8 1b fe ff ff       	call   0 <sys_call>
 1e5:	83 c4 04             	add    $0x4,%esp
}
 1e8:	c9                   	leave  
 1e9:	c3                   	ret    

000001ea <lseek>:

int lseek(int file, int ptr, int dir) {
 1ea:	f3 0f 1e fb          	endbr32 
 1ee:	55                   	push   %ebp
 1ef:	89 e5                	mov    %esp,%ebp
 1f1:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
 1f4:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
 1fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
 201:	8b 45 0c             	mov    0xc(%ebp),%eax
 204:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
 207:	8b 45 10             	mov    0x10(%ebp),%eax
 20a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 20d:	8d 45 ec             	lea    -0x14(%ebp),%eax
 210:	50                   	push   %eax
 211:	e8 ea fd ff ff       	call   0 <sys_call>
 216:	83 c4 04             	add    $0x4,%esp
}
 219:	c9                   	leave  
 21a:	c3                   	ret    

0000021b <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file) {
 21b:	f3 0f 1e fb          	endbr32 
 21f:	55                   	push   %ebp
 220:	89 e5                	mov    %esp,%ebp
 222:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
 225:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
 22c:	8b 45 08             	mov    0x8(%ebp),%eax
 22f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 232:	8d 45 ec             	lea    -0x14(%ebp),%eax
 235:	50                   	push   %eax
 236:	e8 c5 fd ff ff       	call   0 <sys_call>
 23b:	83 c4 04             	add    $0x4,%esp
}
 23e:	c9                   	leave  
 23f:	c3                   	ret    

00000240 <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st) {
 240:	f3 0f 1e fb          	endbr32 
 244:	55                   	push   %ebp
 245:	89 e5                	mov    %esp,%ebp
 247:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
 24a:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
 251:	8b 45 08             	mov    0x8(%ebp),%eax
 254:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
 257:	8b 45 0c             	mov    0xc(%ebp),%eax
 25a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
 25d:	8d 45 ec             	lea    -0x14(%ebp),%eax
 260:	50                   	push   %eax
 261:	e8 9a fd ff ff       	call   0 <sys_call>
 266:	83 c4 04             	add    $0x4,%esp
}
 269:	c9                   	leave  
 26a:	c3                   	ret    

0000026b <sbrk>:


void * sbrk(ptrdiff_t incr) {
 26b:	f3 0f 1e fb          	endbr32 
 26f:	55                   	push   %ebp
 270:	89 e5                	mov    %esp,%ebp
 272:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
 275:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
 27c:	8b 45 08             	mov    0x8(%ebp),%eax
 27f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
 282:	8d 45 ec             	lea    -0x14(%ebp),%eax
 285:	50                   	push   %eax
 286:	e8 75 fd ff ff       	call   0 <sys_call>
 28b:	83 c4 04             	add    $0x4,%esp
}
 28e:	c9                   	leave  
 28f:	c3                   	ret    
